{"version":3,"file":"urdf-viewer-element.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js","../src/urdf-viewer-element.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    show() {\n        this.visible = true;\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    delete() {\n        this.parent.remove(this);\n        this.children.map(child => {\n            this.remove(child);\n        });\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n","import * as THREE from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, makeURDFCollider } from './URDFClasses.js';\nimport { MeshBVH, acceleratedRaycast } from 'three-mesh-bvh';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\nclass URDFLoader {\n\n    constructor(manager, allowMeshBVH = false) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.allowMeshBVH = allowMeshBVH;\n        this.retryMap = {};\n\n    }\n\n    /* Public API */\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError, options) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        const errors = {};\n\n        let managerOnErrorDefault = function() {};\n        let managerOnProgressDefault = function() {};\n        let managerOnLoadDefault = function() {};\n        let model;\n\n        if (manager.onError) {\n\n            managerOnErrorDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onProgress) {\n\n            managerOnProgressDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onLoad) {\n\n            managerOnLoadDefault = manager.onLoad.bind(manager);\n\n        }\n\n        const that = this;\n        manager.onError = function(url) {\n\n            errors[url] = 'Error in loading resource';\n\n            if (onError) {\n\n                onError({\n                    url,\n                    retry: that.retryMap[url],\n                });\n\n            }\n\n            managerOnErrorDefault(url);\n\n        };\n\n        manager.onProgress = function(url, itemsLoaded, itemsTotal) {\n\n            if (onProgress) {\n\n                onProgress(url, itemsLoaded, itemsTotal);\n\n            }\n\n            managerOnProgressDefault(url, itemsLoaded, itemsTotal);\n\n        };\n\n        manager.onLoad = function() {\n\n            if (onComplete) {\n\n                const partialErrors = Object.keys(errors).length === 0\n                    ? undefined\n                    : errors;\n\n                onComplete(model, partialErrors);\n\n            }\n\n            managerOnLoadDefault();\n\n        };\n\n        options = Object.assign({\n            workingPath,\n        }, options);\n\n        manager.itemStart(urdfPath);\n        fetch(urdfPath, options.fetchOptions)\n            .then(res => res.text())\n            .then(data => {\n\n                model = this.parse(data, options);\n                window.model = model;\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                console.error('URDFLoader: Error parsing file.', e);\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content, options = {}) {\n\n        const packages = options.packages || '';\n        const loadMeshCb = options.loadMeshCb || this.defaultMeshLoader.bind(this);\n        const workingPath = options.workingPath || '';\n        const parseVisual = ('parseVisual' in options) ? options.parseVisual : true;\n        const parseCollision = options.parseCollision || false;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${ targetPkg } not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        const processUrdf = data => {\n\n            const parser = new DOMParser();\n            const urdf = parser.parseFromString(data, 'text/xml');\n            const children = [ ...urdf.children ];\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot.call(this, robotNode);\n\n        };\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [ ...robot.children ];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial.call(this, m);\n\n            });\n\n            // Create the <link> map\n            links.forEach(l => {\n\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${ name }\"]`) === null;\n                linkMap[name] = processLink.call(this, l, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint.call(this, j);\n\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n\n            return obj;\n\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n\n            const children = [ ...joint.children ];\n            const jointType = joint.getAttribute('type');\n            const obj = new URDFJoint();\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                } else if (type === 'child') {\n\n                    child = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'parent') {\n\n                    parent = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'limit') {\n\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n                }\n\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n\n            if (axisNode) {\n\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n\n            }\n\n            return obj;\n\n        }\n\n        // Process the <link> nodes\n        function processLink(link, target = null) {\n\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [ ...link.children ];\n            target.name = link.getAttribute('name');\n            target.urdfNode = link;\n\n            if (parseVisual) {\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => processLinkElement.call(this, vn, target, materialMap));\n            }\n            if (parseCollision) {\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(vn => processLinkElement.call(this, vn, target));\n            }\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [ ...node.children ];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n\n                } else if (type === 'texture') {\n\n                    const loader = new THREE.TextureLoader(manager);\n                    const filename = n.getAttribute('filename');\n                    const filePath = resolvePath(filename);\n                    const onError = () => {\n                        this.retryMap[filePath] = () => loader.load(filePath, () => null, () => null, onError);\n                    };\n                    material.map = loader.load(filePath, () => null, () => null, onError);\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, linkObj, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n            let scale = [1, 1, 1];\n\n            const children = [ ...vn.children ];\n            let material = null;\n            let primitiveModel = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial.call(this, materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) scale = processTuple(scaleAttr);\n\n                            const cb = (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n                                    this.retryMap[filePath] = () => loadMeshCb(filePath, manager, cb);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n                                        if (this.allowMeshBVH) {\n                                            obj.raycast = acceleratedRaycast;\n                                            obj.geometry.boundsTree = new MeshBVH(obj.geometry);\n                                        }\n                                    }\n\n                                    linkObj.add(obj);\n\n                                    obj.position.set(xyz[0], xyz[1], xyz[2]);\n                                    obj.rotation.set(0, 0, 0);\n\n                                    // multiply the existing scale by the scale components because\n                                    // the loaded model could have important scale values already applied\n                                    // to the root. Collada files, for example, can load in with a scale\n                                    // to convert the model units to meters.\n                                    obj.scale.x *= scale[0];\n                                    obj.scale.y *= scale[1];\n                                    obj.scale.z *= scale[2];\n\n                                    applyRotation(obj, rpy);\n\n                                    if (isCollisionNode) {\n\n                                        makeURDFCollider(obj);\n\n                                    }\n\n                                }\n\n                            };\n                            loadMeshCb(filePath, manager, cb);\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n\n                        linkObj.add(primitiveModel);\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'sphere') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'cylinder') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                }\n\n            });\n\n            // apply the position and rotation to the primitive geometry after\n            // the fact because it's guaranteed to have been scraped from the child\n            // nodes by this point\n            if (primitiveModel) {\n\n                applyRotation(primitiveModel, rpy, true);\n                primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\n\n            }\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl(?:\\?|$)/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae(?:\\?|$)/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\n\n        }\n\n    }\n\n};\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/js/controls/OrbitControls';\nimport URDFLoader from './URDFLoader.js';\n\n// urdf-viewer element\n// Loads and displays a 3D view of a URDF-formatted robot\n\n// Events\n// urdf-change: Fires when the URDF has finished loading and getting processed\n// urdf-processed: Fires when the URDF has finished loading and getting processed\n// geometry-loaded: Fires when all the geometry has been fully loaded\n// ignore-limits-change: Fires when the 'ignore-limits' attribute changes\n// angle-change: Fires when an angle changes\nexport default\nclass URDFViewer extends HTMLElement {\n\n    static get observedAttributes() {\n\n        return ['package', 'urdf', 'up', 'display-shadow', 'ambient-color', 'ignore-limits'];\n\n    }\n\n    get package() { return this.getAttribute('package') || ''; }\n    set package(val) { this.setAttribute('package', val); }\n\n    get urdf() { return this.getAttribute('urdf') || ''; }\n    set urdf(val) { this.setAttribute('urdf', val); }\n\n    get ignoreLimits() { return this.hasAttribute('ignore-limits') || false; }\n    set ignoreLimits(val) { val ? this.setAttribute('ignore-limits', val) : this.removeAttribute('ignore-limits'); }\n\n    get up() { return this.getAttribute('up') || '+Z'; }\n    set up(val) { this.setAttribute('up', val); }\n\n    get displayShadow() { return this.hasAttribute('display-shadow') || false; }\n    set displayShadow(val) { val ? this.setAttribute('display-shadow', '') : this.removeAttribute('display-shadow'); }\n\n    get ambientColor() { return this.getAttribute('ambient-color') || '#455A64'; }\n    set ambientColor(val) { val ? this.setAttribute('ambient-color', val) : this.removeAttribute('ambient-color'); }\n\n    get autoRedraw() { return this.hasAttribute('auto-redraw') || false; }\n    set autoRedraw(val) { val ? this.setAttribute('auto-redraw', true) : this.removeAttribute('auto-redraw'); }\n\n    get noAutoRecenter() { return this.hasAttribute('no-auto-recenter') || false; }\n    set noAutoRecenter(val) { val ? this.setAttribute('no-auto-recenter', true) : this.removeAttribute('no-auto-recenter'); }\n\n    get angles() {\n\n        const angles = {};\n        if (this.robot) {\n\n            for (const name in this.robot.joints) angles[name] = this.robot.joints[name].angle;\n\n        }\n\n        return angles;\n\n    }\n    set angles(val) { this._setAngles(val); }\n\n    /* Lifecycle Functions */\n    constructor() {\n\n        super();\n\n        this._requestId = 0;\n        this._dirty = false;\n        this._loadScheduled = false;\n        this.robot = null;\n        this.loadMeshFunc = null;\n        this.urlModifierFunc = null;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n\n        const ambientLight = new THREE.HemisphereLight(this.ambientColor, '#000');\n        ambientLight.groundColor.lerp(ambientLight.color, 0.5);\n        ambientLight.intensity = 0.5;\n        ambientLight.position.set(0, 1, 0);\n        scene.add(ambientLight);\n\n        // Light setup\n        const dirLight = new THREE.DirectionalLight(0xffffff);\n        dirLight.position.set(4, 10, 1);\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.castShadow = true;\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setClearColor(0xffffff);\n        renderer.setClearAlpha(0);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.gammaOutput = true;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n        camera.position.z = -10;\n\n        // World setup\n        const world = new THREE.Object3D();\n        scene.add(world);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(40, 40),\n            new THREE.ShadowMaterial({ side: THREE.DoubleSide, transparent: true, opacity: 0.5 })\n        );\n        plane.rotation.x = -Math.PI / 2;\n        plane.position.y = -0.5;\n        plane.receiveShadow = true;\n        plane.scale.set(10, 10, 10);\n        scene.add(plane);\n\n        // Controls setup\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.rotateSpeed = 2.0;\n        controls.zoomSpeed = 5;\n        controls.panSpeed = 2;\n        controls.enableZoom = true;\n        controls.enableDamping = false;\n        controls.maxDistance = 50;\n        controls.minDistance = 0.25;\n        controls.addEventListener('change', () => this.recenter());\n\n        this.scene = scene;\n        this.world = world;\n        this.renderer = renderer;\n        this.camera = camera;\n        this.controls = controls;\n        this.plane = plane;\n        this.directionalLight = dirLight;\n        this.ambientLight = ambientLight;\n\n        this._setUp(this.up);\n\n        const _renderLoop = () => {\n\n            if (this.parentNode) {\n\n                this.updateSize();\n\n                if (this._dirty || this.autoRedraw) {\n\n                    if (!this.noAutoRecenter) {\n\n                        this._updateEnvironment();\n                    }\n\n                    this.renderer.render(scene, camera);\n                    this._dirty = false;\n\n                }\n\n                // update controls after the environment in\n                // case the controls are retargeted\n                this.controls.update();\n\n            }\n            this._renderLoopId = requestAnimationFrame(_renderLoop);\n\n        };\n        _renderLoop();\n\n    }\n\n    connectedCallback() {\n\n        // Add our initialize styles for the element if they haven't\n        // been added yet\n        if (!this.constructor._styletag) {\n\n            const styletag = document.createElement('style');\n            styletag.innerHTML =\n            `\n                ${ this.tagName } { display: block; }\n                ${ this.tagName } canvas {\n                    width: 100%;\n                    height: 100%;\n                }\n            `;\n            document.head.appendChild(styletag);\n            this.constructor._styletag = styletag;\n\n        }\n\n        // add the renderer\n        if (this.childElementCount === 0) {\n\n            this.appendChild(this.renderer.domElement);\n\n        }\n\n        this.updateSize();\n        requestAnimationFrame(() => this.updateSize());\n\n    }\n\n    disconnectedCallback() {\n\n        cancelAnimationFrame(this._renderLoopId);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        this.recenter();\n\n        switch (attr) {\n\n            case 'package':\n            case 'urdf': {\n\n                this._scheduleLoad();\n                break;\n\n            }\n\n            case 'up': {\n\n                this._setUp(this.up);\n                break;\n\n            }\n\n            case 'ambient-color': {\n\n                this.ambientLight.color.set(this.ambientColor);\n                this.ambientLight.groundColor.set('#000').lerp(this.ambientLight.color, 0.5);\n                break;\n\n            }\n\n            case 'ignore-limits': {\n\n                this._setIgnoreLimits(this.ignoreLimits, true);\n                break;\n\n            }\n\n        }\n\n    }\n\n    /* Public API */\n    updateSize() {\n\n        const r = this.renderer;\n        const w = this.clientWidth;\n        const h = this.clientHeight;\n        const currsize = new THREE.Vector2();\n        r.getSize(currsize);\n\n        if (currsize.width !== w || currsize.height !== h) {\n\n            this.recenter();\n\n        }\n\n        r.setPixelRatio(window.devicePixelRatio);\n        r.setSize(w, h, false);\n\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n\n    }\n\n    redraw() {\n\n        this._dirty = true;\n    }\n\n    recenter() {\n\n        this._updateEnvironment();\n        this.redraw();\n\n    }\n\n    // Set the joint with jointName to\n    // angle in degrees\n    setAngle(jointName, angle) {\n\n        if (!this.robot) return;\n        if (!this.robot.joints[jointName]) return;\n\n        const origAngle = this.robot.joints[jointName].angle;\n        const newAngle = this.robot.setAngle(jointName, angle);\n        if (origAngle !== newAngle) {\n            this.redraw();\n        }\n\n        this.dispatchEvent(new CustomEvent('angle-change', { bubbles: true, cancelable: true, detail: jointName }));\n\n    }\n\n    setAngles(angles) {\n\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n    /* Private Functions */\n    // Updates the position of the plane to be at the\n    // lowest point below the robot and focuses the\n    // camera on the center of the scene\n    _updateEnvironment() {\n\n        if (!this.robot) return;\n\n        this.world.updateMatrixWorld();\n\n        const bbox = new THREE.Box3();\n        const temp = new THREE.Box3();\n\n        this.robot.traverse(c => {\n\n            const geometry = c.geometry;\n            if (geometry) {\n\n                if (geometry.boundingBox === null) {\n\n                    geometry.computeBoundingBox();\n\n                }\n\n                temp.copy(geometry.boundingBox);\n                temp.applyMatrix4(c.matrixWorld);\n\n                bbox.union(temp);\n\n            }\n\n        });\n\n        const center = bbox.getCenter(new THREE.Vector3());\n        this.controls.target.y = center.y;\n        this.plane.position.y = bbox.min.y - 1e-3;\n\n        const dirLight = this.directionalLight;\n        dirLight.castShadow = this.displayShadow;\n\n        if (this.displayShadow) {\n\n            // Update the shadow camera rendering bounds to encapsulate the\n            // model. We use the bounding sphere of the bounding box for\n            // simplicity -- this could be a tighter fit.\n            const sphere = bbox.getBoundingSphere(new THREE.Sphere());\n            const minmax = sphere.radius;\n            const cam = dirLight.shadow.camera;\n            cam.left = cam.bottom = -minmax;\n            cam.right = cam.top = minmax;\n\n            // Update the camera to focus on the center of the model so the\n            // shadow can encapsulate it\n            const offset = dirLight.position.clone().sub(dirLight.target.position);\n            dirLight.target.position.copy(center);\n            dirLight.position.copy(center).add(offset);\n\n            cam.updateProjectionMatrix();\n\n        }\n\n    }\n\n    _scheduleLoad() {\n\n        // if our current model is already what's being requested\n        // or has been loaded then early out\n        if (this._prevload === `${ this.package }|${ this.urdf }`) return;\n        this._prevload = `${ this.package }|${ this.urdf }`;\n\n        // if we're already waiting on a load then early out\n        if (this._loadScheduled) return;\n        this._loadScheduled = true;\n\n        if (this.robot) {\n\n            this.robot.traverse(c => c.dispose && c.dispose());\n            this.robot.parent.remove(this.robot);\n            this.robot = null;\n\n        }\n\n        requestAnimationFrame(() => {\n\n            this._loadUrdf(this.package, this.urdf);\n            this._loadScheduled = false;\n\n        });\n\n    }\n\n    // Watch the package and urdf field and load the robot model.\n    // This should _only_ be called from _scheduleLoad because that\n    // ensures the that current robot has been removed\n    _loadUrdf(pkg, urdf) {\n\n        this.dispatchEvent(new CustomEvent('urdf-change', { bubbles: true, cancelable: true, composed: true }));\n\n        if (urdf) {\n\n            // Keep track of this request and make\n            // sure it doesn't get overwritten by\n            // a subsequent one\n            this._requestId++;\n            const requestId = this._requestId;\n\n            const updateMaterials = mesh => {\n\n                mesh.traverse(c => {\n\n                    if (c.isMesh) {\n\n                        c.castShadow = true;\n                        c.receiveShadow = true;\n\n                        if (c.material) {\n\n                            const mats =\n                                (Array.isArray(c.material) ? c.material : [c.material])\n                                    .map(m => {\n\n                                        if (m instanceof THREE.MeshBasicMaterial) {\n\n                                            m = new THREE.MeshPhongMaterial();\n\n                                        }\n\n                                        if (m.map) {\n\n                                            m.map.encoding = THREE.GammaEncoding;\n\n                                        }\n\n                                        return m;\n\n                                    });\n                            c.material = mats.length === 1 ? mats[0] : mats;\n\n                        }\n\n                    }\n\n                });\n\n            };\n\n            if (pkg.includes(':') && (pkg.split(':')[1].substring(0, 2)) !== '//') {\n                // E.g. pkg = \"pkg_name: path/to/pkg_name, pk2: path2/to/pk2\"}\n\n                // Convert pkg(s) into a map. E.g.\n                // { \"pkg_name\": \"path/to/pkg_name\",\n                //   \"pk2\":      \"path2/to/pk2\"      }\n\n                pkg = pkg.split(',').reduce((map, value) => {\n\n                    const split = value.split(/:/).filter(x => !!x);\n                    const pkgName = split.shift().trim();\n                    const pkgPath = split.join(':').trim();\n                    map[pkgName] = pkgPath;\n\n                    return map;\n\n                }, {});\n            }\n\n            let robot = null;\n            const manager = new THREE.LoadingManager();\n            manager.onLoad = () => {\n\n                // If another request has come in to load a new\n                // robot, then ignore this one\n                if (this._requestId !== requestId) {\n\n                    robot.traverse(c => c.dispose && c.dispose());\n                    return;\n\n                }\n\n                this.robot = robot;\n                this.world.add(robot);\n                updateMaterials(robot);\n\n                this._setIgnoreLimits(this.ignoreLimits);\n\n                this.dispatchEvent(new CustomEvent('urdf-processed', { bubbles: true, cancelable: true, composed: true }));\n                this.dispatchEvent(new CustomEvent('geometry-loaded', { bubbles: true, cancelable: true, composed: true }));\n\n                this.recenter();\n\n            };\n\n            if (this.urlModifierFunc) {\n\n                manager.setURLModifier(this.urlModifierFunc);\n\n            }\n\n            new URDFLoader(manager).load(\n                urdf,\n\n                // onComplete\n                (model) => {\n                    robot = model;\n                },\n\n                // onProgress\n                (url, loaded, total) => {\n                    console.log(`${ url }; ${ loaded }/${ total }`);\n                },\n\n                // onError\n                (error) => {\n                    console.log(error);\n                },\n\n                // options\n                {\n\n                    packages: pkg,\n                    loadMeshCb: this.loadMeshFunc,\n                    fetchOptions: { mode: 'cors', credentials: 'same-origin' },\n\n                });\n\n        }\n\n    }\n\n    // Watch the coordinate frame and update the\n    // rotation of the scene to match\n    _setUp(up) {\n\n        if (!up) up = '+Z';\n        up = up.toUpperCase();\n        const sign = up.replace(/[^-+]/g, '')[0] || '+';\n        const axis = up.replace(/[^XYZ]/gi, '')[0] || 'Z';\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        if (axis === 'X') this.world.rotation.set(0, 0, sign === '+' ? HALFPI : -HALFPI);\n        if (axis === 'Z') this.world.rotation.set(sign === '+' ? -HALFPI : HALFPI, 0, 0);\n        if (axis === 'Y') this.world.rotation.set(sign === '+' ? 0 : PI, 0, 0);\n\n    }\n\n    // Updates the current robot's angles to ignore\n    // joint limits or not\n    _setIgnoreLimits(ignore, dispatch = false) {\n\n        if (this.robot) {\n\n            Object\n                .values(this.robot.joints)\n                .forEach(joint => {\n\n                    joint.ignoreLimits = ignore;\n                    joint.setAngle(joint.angle);\n\n                });\n\n        }\n\n        if (dispatch) {\n\n            this.dispatchEvent(new CustomEvent('ignore-limits-change', { bubbles: true, cancelable: true, composed: true }));\n\n        }\n\n    }\n\n};\n"],"names":["URDFColliderClone","proto","Object","getPrototypeOf","args","result","clone","call","isURDFCollider","makeURDFCollider","object","URDFLink","isURDFLink","type","urdfNode","visible","parent","remove","children","map","child","source","recursive","Object3D","URDFJoint","_jointType","v","jointType","jointValue","Array","fill","isURDFJoint","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","isArray","setOffset","values","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","copy","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","isURDFRobot","urdfRobotNode","robotName","links","joints","traverse","c","name","jointName","joint","setAngle","angles","tempQuaternion","THREE","tempEuler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","rotation","set","setFromEuler","multiply","URDFLoader","manager","allowMeshBVH","retryMap","urdf","onComplete","onProgress","onError","options","workingPath","extractUrlBase","urdfPath","resolveURL","errors","managerOnErrorDefault","managerOnProgressDefault","managerOnLoadDefault","model","bind","onLoad","that","url","retry","itemsLoaded","itemsTotal","partialErrors","keys","length","undefined","assign","itemStart","fetch","fetchOptions","then","res","text","data","parse","window","itemEnd","e","error","itemError","content","packages","loadMeshCb","defaultMeshLoader","parseVisual","parseCollision","linkMap","jointMap","materialMap","resolvePath","path","test","replace","targetPkg","relPath","endsWith","processUrdf","parser","DOMParser","parseFromString","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","forEach","m","processMaterial","l","isRoot","querySelector","processLink","j","processJoint","xyz","n","add","axisNode","axisXYZ","normalize","link","target","visualNodes","vn","processLinkElement","collisionNodes","node","matNodes","material","rgba","color","setRGB","opacity","transparent","loader","filename","filePath","load","linkObj","isCollisionNode","scale","primitiveModel","materialNode","geoType","scaleAttr","cb","err","raycast","acceleratedRaycast","geometry","boundsTree","MeshBVH","x","y","z","size","radius","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene","URDFViewer","setAttribute","hasAttribute","removeAttribute","_setAngles","_requestId","_dirty","_loadScheduled","loadMeshFunc","urlModifierFunc","ambientLight","ambientColor","groundColor","lerp","intensity","dirLight","shadow","mapSize","width","height","castShadow","renderer","antialias","alpha","setClearColor","setClearAlpha","shadowMap","enabled","gammaOutput","camera","world","plane","side","receiveShadow","controls","OrbitControls","domElement","rotateSpeed","zoomSpeed","panSpeed","enableZoom","enableDamping","maxDistance","minDistance","addEventListener","recenter","directionalLight","_setUp","up","_renderLoop","parentNode","updateSize","autoRedraw","noAutoRecenter","_updateEnvironment","render","update","_renderLoopId","requestAnimationFrame","constructor","_styletag","styletag","document","createElement","innerHTML","tagName","head","appendChild","childElementCount","cancelAnimationFrame","attr","oldval","newval","_scheduleLoad","_setIgnoreLimits","r","w","clientWidth","h","clientHeight","currsize","getSize","setPixelRatio","devicePixelRatio","setSize","aspect","updateProjectionMatrix","redraw","origAngle","newAngle","dispatchEvent","CustomEvent","bubbles","cancelable","detail","updateMatrixWorld","bbox","temp","boundingBox","computeBoundingBox","applyMatrix4","matrixWorld","union","center","getCenter","displayShadow","sphere","getBoundingSphere","minmax","cam","left","bottom","right","top","offset","sub","_prevload","dispose","_loadUrdf","pkg","composed","requestId","updateMaterials","isMesh","mats","encoding","includes","substring","reduce","value","pkgName","shift","pkgPath","join","setURLModifier","loaded","total","log","mode","credentials","toUpperCase","sign","HALFPI","ignore","dispatch","HTMLElement"],"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"}