{"version":3,"file":"urdf-viewer-element.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js","../src/urdf-viewer-element.js"],"sourcesContent":["import { Object3D, Vector3 } from 'three';\n\nconst _tempAxis = new Vector3();\n\nclass URDFBase extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.urdfNode = null;\n        this.urdfName = '';\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.urdfName = source.urdfName;\n\n        return this;\n\n    }\n\n}\n\nclass URDFCollider extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFCollider = true;\n        this.type = 'URDFCollider';\n\n    }\n\n}\n\nclass URDFVisual extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFVisual = true;\n        this.type = 'URDFVisual';\n\n    }\n\n}\n\nclass URDFLink extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n\n    }\n\n}\n\nclass URDFJoint extends URDFBase {\n\n    \n\n    get jointType() {\n        console.log('Accessing jointType:', this._jointType);\n        return this._jointType;\n    }\n\n    set jointType(v) {\n        console.log('Setting jointType from', this.jointType, 'to', v);\n        if (this.jointType === v) return;\n        this._jointType = v;\n        this.matrixWorldNeedsUpdate = true;\n        switch (v) {\n            case 'fixed':\n                this.jointValue = [];\n                break;\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = new Array(1).fill(0);\n                break;\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n        }\n    }\n\n    get angle() {\n        console.log('Getting angle:', this.jointValue[0]);\n        return this.jointValue[0];\n    }\n\n    constructor(...args) {\n        super(...args);\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = new Vector3(1, 0, 0);\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n        this.origPosition = null;\n        this.origQuaternion = null;\n        this.mimicJoints = [];\n        this.dependentMimicJoints = [];\n    }\n\n    copy(source, recursive) {\n        super.copy(source, recursive);\n        console.log('Copying properties from source', source);\n        this.jointType = source.jointType;\n        this.axis = source.axis.clone();\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = source.ignoreLimits;\n        this.jointValue = [...source.jointValue];\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n        this.mimicJoints = [...source.mimicJoints];\n        this.dependentMimicJoints = source.dependentMimicJoints.map(joint => joint.clone());\n    }\n\n    setJointValue(...values) {\n        console.log('Initial values received:', values);\n        values = values.map(v => v === null ? null : parseFloat(v));\n        console.log('Parsed values:', values);\n        if (!this.origPosition || !this.origQuaternion) {\n            console.log('Initializing original position and quaternion');\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n        }\n\n        let didUpdate = false;\n        this.dependentMimicJoints.forEach(mimicJoint => {\n            const mimicValues = values.map(value => value * mimicJoint.multiplier + mimicJoint.offset);\n            console.log('Updating mimic joint', mimicJoint, 'with values', mimicValues);\n            didUpdate = mimicJoint.setJointValue(...mimicValues) || didUpdate;\n        });\n\n        switch (this.jointType) {\n            case 'fixed':\n                break;\n            case 'continuous':\n            case 'revolute':\n                let angle = values[0];\n                console.log('Current angle:', angle);\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n                    console.log('Angle adjusted within limits:', angle);\n                }\n                this.quaternion.setFromAxisAngle(this.axis, angle).premultiply(this.origQuaternion);\n                if (this.jointValue[0] !== angle) {\n                    this.jointValue[0] = angle;\n                    this.matrixWorldNeedsUpdate = true;\n                    didUpdate = true;\n                    console.log('Angle updated to:', angle);\n                }\n                break;\n            case 'prismatic':\n                let pos = values[0];\n                console.log('Current position:', pos);\n                if (!this.ignoreLimits) {\n                    pos = Math.min(this.limit.upper, pos);\n                    pos = Math.max(this.limit.lower, pos);\n                    console.log('Position adjusted within limits:', pos);\n                }\n                this.position.copy(this.origPosition);\n                _tempAxis.copy(this.axis).applyEuler(this.rotation);\n                this.position.addScaledVector(_tempAxis, pos);\n                if (this.jointValue[0] !== pos) {\n                    this.jointValue[0] = pos;\n                    this.matrixWorldNeedsUpdate = true;\n                    didUpdate = true;\n                    console.log('Position updated to:', pos);\n                }\n                break;\n            case 'floating':\n            case 'planar':\n                console.warn(`'${this.jointType}' joint not yet supported`);\n        }\n\n        console.log('Did update:', didUpdate);\n        return didUpdate;\n    }\n\n    addDependentMimicJoint(mimicJoint) {\n        console.log('Adding dependent mimic joint:', mimicJoint);\n        if (!this.dependentMimicJoints.includes(mimicJoint)) {\n            this.dependentMimicJoints.push(mimicJoint);\n        }\n    }\n}\n\nclass URDFMimicJoint extends URDFJoint {\n\n    constructor(...args) {\n\n        super(...args);\n        this.type = 'URDFMimicJoint';\n        this.mimicJoint = null;\n        this.offset = 0;\n        this.multiplier = 1;\n\n    }\n\n    updateFromMimickedJoint(...values) {\n\n        const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n        return super.setJointValue(...modifiedValues);\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.mimicJoint = source.mimicJoint;\n        this.offset = source.offset;\n        this.multiplier = source.multiplier;\n\n        return this;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n        this.colliders = null;\n        this.visual = null;\n        this.frames = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n        this.colliders = {};\n        this.visual = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.urdfName in source.joints) {\n\n                this.joints[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFLink && c.urdfName in source.links) {\n\n                this.links[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFCollider && c.urdfName in source.colliders) {\n\n                this.colliders[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFVisual && c.urdfName in source.visual) {\n\n                this.visual[c.urdfName] = c;\n\n            }\n\n        });\n\n        // Repair mimic joint references once we've re-accumulated all our joint data\n        for (const joint in this.joints) {\n            this.joints[joint].mimicJoints = this.joints[joint].mimicJoints.map((mimicJoint) => this.joints[mimicJoint.name]);\n        }\n\n        this.frames = {\n            ...this.colliders,\n            ...this.visual,\n            ...this.links,\n            ...this.joints,\n        };\n\n        return this;\n\n    }\n\n    getFrame(name) {\n\n        return this.frames[name];\n\n    }\n\n    setJointValue(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setJointValue(...angle);\n\n        }\n\n        return false;\n    }\n\n    setJointValues(values) {\n\n        let didChange = false;\n        for (const name in values) {\n\n            const value = values[name];\n            if (Array.isArray(value)) {\n\n                didChange = this.setJointValue(name, ...value) || didChange;\n\n            } else {\n\n                didChange = this.setJointValue(name, value) || didChange;\n\n            }\n\n        }\n\n        return didChange;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };","import * as THREE from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, URDFCollider, URDFVisual, URDFMimicJoint } from './URDFClasses.js';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\nclass URDFLoader {\n\n    constructor(manager) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.loadMeshCb = this.defaultMeshLoader.bind(this);\n        this.parseVisual = true;\n        this.parseCollision = false;\n        this.packages = '';\n        this.workingPath = '';\n        this.fetchOptions = {};\n\n    }\n\n    /* Public API */\n    loadAsync(urdf) {\n\n        return new Promise((resolve, reject) => {\n\n            this.load(urdf, resolve, null, reject);\n\n        });\n\n    }\n\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        manager.itemStart(urdfPath);\n\n        fetch(urdfPath, this.fetchOptions)\n            .then(res => {\n\n                if (res.ok) {\n\n                    if (onProgress) {\n\n                        onProgress(null);\n\n                    }\n                    return res.text();\n\n                } else {\n\n                    throw new Error(`URDFLoader: Failed to load url '${ urdfPath }' with error code ${ res.status } : ${ res.statusText }.`);\n\n                }\n\n            })\n            .then(data => {\n\n                if (this.workingPath === '') {\n\n                    this.workingPath = workingPath;\n\n                }\n\n                const model = this.parse(data);\n                onComplete(model);\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                if (onError) {\n\n                    onError(e);\n\n                } else {\n\n                    console.error('URDFLoader: Error loading file.', e);\n\n                }\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content) {\n\n        const packages = this.packages;\n        const loadMeshCb = this.loadMeshCb;\n        const parseVisual = this.parseVisual;\n        const parseCollision = this.parseCollision;\n        const workingPath = this.workingPath;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (packages instanceof Function) {\n\n                return packages(targetPkg) + '/' + relPath;\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${ targetPkg } not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        function processUrdf(data) {\n\n            let children;\n            if (data instanceof Document) {\n\n                children = [ ...data.children ];\n\n            } else if (data instanceof Element) {\n\n                children = [ data ];\n\n            } else {\n\n                const parser = new DOMParser();\n                const urdf = parser.parseFromString(data, 'text/xml');\n                children = [ ...urdf.children ];\n\n            }\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot(robotNode);\n\n        }\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [ ...robot.children ];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial(m);\n\n            });\n\n            // Create the <link> map\n            const visualMap = {};\n            const colliderMap = {};\n            links.forEach(l => {\n\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${ name }\"]`) === null;\n                linkMap[name] = processLink(l, visualMap, colliderMap, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint(j);\n\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n            obj.colliders = colliderMap;\n            obj.visual = visualMap;\n\n            // Link up mimic joints\n            const jointList = Object.values(jointMap);\n            jointList.forEach(j => {\n\n                if (j instanceof URDFMimicJoint) {\n\n                    jointMap[j.mimicJoint].mimicJoints.push(j);\n\n                }\n\n            });\n\n            // Detect infinite loops of mimic joints\n            jointList.forEach(j => {\n\n                const uniqueJoints = new Set();\n                const iterFunction = joint => {\n\n                    if (uniqueJoints.has(joint)) {\n\n                        throw new Error('URDFLoader: Detected an infinite loop of mimic joints.');\n\n                    }\n\n                    uniqueJoints.add(joint);\n                    joint.mimicJoints.forEach(j => {\n\n                        iterFunction(j);\n\n                    });\n\n                };\n\n                iterFunction(j);\n            });\n\n            obj.frames = {\n                ...colliderMap,\n                ...visualMap,\n                ...linkMap,\n                ...jointMap,\n            };\n\n            return obj;\n\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n\n            const children = [ ...joint.children ];\n            const jointType = joint.getAttribute('type');\n\n            let obj;\n\n            const mimicTag = children.find(n => n.nodeName.toLowerCase() === 'mimic');\n            if (mimicTag) {\n\n                obj = new URDFMimicJoint();\n                obj.mimicJoint = mimicTag.getAttribute('joint');\n                obj.multiplier = parseFloat(mimicTag.getAttribute('multiplier') || 1.0);\n                obj.offset = parseFloat(mimicTag.getAttribute('offset') || 0.0);\n\n                console.log('MIMIC: ', obj);\n\n            } else {\n\n                obj = new URDFJoint();\n\n            }\n\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.urdfName = obj.name;\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                } else if (type === 'child') {\n\n                    child = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'parent') {\n\n                    parent = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'limit') {\n\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n                }\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n\n            if (axisNode) {\n\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n\n            }\n\n            return obj;\n\n        }\n\n        // Process the <link> nodes\n        function processLink(link, visualMap, colliderMap, target = null) {\n\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [ ...link.children ];\n            target.name = link.getAttribute('name');\n            target.urdfName = target.name;\n            target.urdfNode = link;\n\n            if (parseVisual) {\n\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => {\n\n                    const v = processLinkElement(vn, materialMap);\n                    target.add(v);\n\n                    if (vn.hasAttribute('name')) {\n\n                        const name = vn.getAttribute('name');\n                        v.name = name;\n                        v.urdfName = name;\n                        visualMap[name] = v;\n\n                    }\n\n                });\n\n            }\n\n            if (parseCollision) {\n\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(cn => {\n\n                    const c = processLinkElement(cn);\n                    target.add(c);\n\n                    if (cn.hasAttribute('name')) {\n\n                        const name = cn.getAttribute('name');\n                        c.name = name;\n                        c.urdfName = name;\n                        colliderMap[name] = c;\n\n                    }\n\n                });\n\n            }\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [ ...node.children ];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n                    material.depthWrite = !material.transparent;\n\n                } else if (type === 'texture') {\n\n                    // The URDF spec does not require that the <texture/> tag include\n                    // a filename attribute so skip loading the texture if not provided.\n                    const filename = n.getAttribute('filename');\n                    if (filename) {\n\n                        const loader = new THREE.TextureLoader(manager);\n                        const filePath = resolvePath(filename);\n                        material.map = loader.load(filePath);\n                        material.map.colorSpace = THREE.SRGBColorSpace;\n\n                    }\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            const children = [ ...vn.children ];\n            let material = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial(materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            const group = isCollisionNode ? new URDFCollider() : new URDFVisual();\n            group.urdfNode = vn;\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) {\n\n                                const scale = processTuple(scaleAttr);\n                                group.scale.set(scale[0], scale[1], scale[2]);\n\n                            }\n\n                            loadMeshCb(filePath, manager, (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n\n                                    }\n\n                                    // We don't expect non identity rotations or positions. In the case of\n                                    // COLLADA files the model might come in with a custom scale for unit\n                                    // conversion.\n                                    obj.position.set(0, 0, 0);\n                                    obj.quaternion._x = 0;\n                                    obj.quaternion._y = 0;\n                                    obj.quaternion._z = 0;\n                                    obj.quaternion._w = 0;\n                                    group.add(obj);\n\n                                }\n\n                            });\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'sphere') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'cylinder') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        group.add(primitiveModel);\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    const xyz = processTuple(n.getAttribute('xyz'));\n                    const rpy = processTuple(n.getAttribute('rpy'));\n\n                    group.position.set(xyz[0], xyz[1], xyz[2]);\n                    group.rotation.set(0, 0, 0);\n                    applyRotation(group, rpy);\n\n                }\n\n            });\n\n            return group;\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl$/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae$/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\n\n        }\n\n    }\n\n};","import * as THREE from 'three';\nimport { MeshPhongMaterial } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport URDFLoader from './URDFLoader.js';\n\nconst tempVec2 = new THREE.Vector2();\nconst emptyRaycast = () => {};\n\n// urdf-viewer element\n// Loads and displays a 3D view of a URDF-formatted robot\n\n// Events\n// urdf-change: Fires when the URDF has finished loading and getting processed\n// urdf-processed: Fires when the URDF has finished loading and getting processed\n// geometry-loaded: Fires when all the geometry has been fully loaded\n// ignore-limits-change: Fires when the 'ignore-limits' attribute changes\n// angle-change: Fires when an angle changes\nexport default\nclass URDFViewer extends HTMLElement {\n\n    static get observedAttributes() {\n\n        return ['package', 'urdf', 'up', 'display-shadow', 'ambient-color', 'ignore-limits', 'show-collision'];\n\n    }\n\n    get package() { return this.getAttribute('package') || ''; }\n    set package(val) { this.setAttribute('package', val); }\n\n    get urdf() { return this.getAttribute('urdf') || ''; }\n    set urdf(val) { this.setAttribute('urdf', val); }\n\n    get ignoreLimits() { return this.hasAttribute('ignore-limits') || false; }\n    set ignoreLimits(val) { val ? this.setAttribute('ignore-limits', val) : this.removeAttribute('ignore-limits'); }\n\n    get up() { return this.getAttribute('up') || '+Z'; }\n    set up(val) { this.setAttribute('up', val); }\n\n    get displayShadow() { return this.hasAttribute('display-shadow') || false; }\n    set displayShadow(val) { val ? this.setAttribute('display-shadow', '') : this.removeAttribute('display-shadow'); }\n\n    get ambientColor() { return this.getAttribute('ambient-color') || '#8ea0a8'; }\n    set ambientColor(val) { val ? this.setAttribute('ambient-color', val) : this.removeAttribute('ambient-color'); }\n\n    get autoRedraw() { return this.hasAttribute('auto-redraw') || false; }\n    set autoRedraw(val) { val ? this.setAttribute('auto-redraw', true) : this.removeAttribute('auto-redraw'); }\n\n    get noAutoRecenter() { return this.hasAttribute('no-auto-recenter') || false; }\n    set noAutoRecenter(val) { val ? this.setAttribute('no-auto-recenter', true) : this.removeAttribute('no-auto-recenter'); }\n\n    get showCollision() { return this.hasAttribute('show-collision') || false; }\n    set showCollision(val) { val ? this.setAttribute('show-collision', true) : this.removeAttribute('show-collision'); }\n\n    get jointValues() {\n\n        const values = {};\n        if (this.robot) {\n\n            for (const name in this.robot.joints) {\n\n                const joint = this.robot.joints[name];\n                values[name] = joint.jointValue.length === 1 ? joint.angle : [...joint.jointValue];\n\n            }\n\n        }\n\n        return values;\n\n    }\n    set jointValues(val) { this.setJointValues(val); }\n\n    get angles() {\n\n        return this.jointValues;\n\n    }\n    set angles(v) {\n\n        this.jointValues = v;\n\n    }\n\n    /* Lifecycle Functions */\n    constructor() {\n\n        super();\n\n        this._requestId = 0;\n        this._dirty = false;\n        this._loadScheduled = false;\n        this.robot = null;\n        this.loadMeshFunc = null;\n        this.urlModifierFunc = null;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n\n        const ambientLight = new THREE.HemisphereLight(this.ambientColor, '#000');\n        ambientLight.groundColor.lerp(ambientLight.color, 0.5 * Math.PI);\n        ambientLight.intensity = 0.5;\n        ambientLight.position.set(0, 1, 0);\n        scene.add(ambientLight);\n\n        // Light setup\n        const dirLight = new THREE.DirectionalLight(0xffffff, Math.PI);\n        dirLight.position.set(4, 10, 1);\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.shadow.normalBias = 0.001;\n        dirLight.castShadow = true;\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setClearColor(0xffffff);\n        renderer.setClearAlpha(0);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.outputColorSpace = THREE.SRGBColorSpace;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n        camera.position.z = -10;\n\n        // World setup\n        const world = new THREE.Object3D();\n        scene.add(world);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneGeometry(40, 40),\n            new THREE.ShadowMaterial({ side: THREE.DoubleSide, transparent: true, opacity: 0.25 }),\n        );\n        plane.rotation.x = -Math.PI / 2;\n        plane.position.y = -0.5;\n        plane.receiveShadow = true;\n        plane.scale.set(10, 10, 10);\n        scene.add(plane);\n\n        // Controls setup\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.rotateSpeed = 2.0;\n        controls.zoomSpeed = 5;\n        controls.panSpeed = 2;\n        controls.enableZoom = true;\n        controls.enableDamping = false;\n        controls.maxDistance = 50;\n        controls.minDistance = 0.25;\n        controls.addEventListener('change', () => this.recenter());\n\n        this.scene = scene;\n        this.world = world;\n        this.renderer = renderer;\n        this.camera = camera;\n        this.controls = controls;\n        this.plane = plane;\n        this.directionalLight = dirLight;\n        this.ambientLight = ambientLight;\n\n        this._setUp(this.up);\n\n        this._collisionMaterial = new MeshPhongMaterial({\n            transparent: true,\n            opacity: 0.35,\n            shininess: 2.5,\n            premultipliedAlpha: true,\n            color: 0xffbe38,\n            polygonOffset: true,\n            polygonOffsetFactor: -1,\n            polygonOffsetUnits: -1,\n        });\n\n        const _renderLoop = () => {\n\n            if (this.parentNode) {\n\n                this.updateSize();\n\n                if (this._dirty || this.autoRedraw) {\n\n                    if (!this.noAutoRecenter) {\n\n                        this._updateEnvironment();\n                    }\n\n                    this.renderer.render(scene, camera);\n                    this._dirty = false;\n\n                }\n\n                // update controls after the environment in\n                // case the controls are retargeted\n                this.controls.update();\n\n            }\n            this._renderLoopId = requestAnimationFrame(_renderLoop);\n\n        };\n        _renderLoop();\n\n    }\n\n    connectedCallback() {\n\n        // Add our initialize styles for the element if they haven't\n        // been added yet\n        if (!this.constructor._styletag) {\n\n            const styletag = document.createElement('style');\n            styletag.innerHTML =\n            `\n                ${ this.tagName } { display: block; }\n                ${ this.tagName } canvas {\n                    width: 100%;\n                    height: 100%;\n                }\n            `;\n            document.head.appendChild(styletag);\n            this.constructor._styletag = styletag;\n\n        }\n\n        // add the renderer\n        if (this.childElementCount === 0) {\n\n            this.appendChild(this.renderer.domElement);\n\n        }\n\n        this.updateSize();\n        requestAnimationFrame(() => this.updateSize());\n\n    }\n\n    disconnectedCallback() {\n\n        cancelAnimationFrame(this._renderLoopId);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        this._updateCollisionVisibility();\n        if (!this.noAutoRecenter) {\n            this.recenter();\n        }\n\n        switch (attr) {\n\n            case 'package':\n            case 'urdf': {\n\n                this._scheduleLoad();\n                break;\n\n            }\n\n            case 'up': {\n\n                this._setUp(this.up);\n                break;\n\n            }\n\n            case 'ambient-color': {\n\n                this.ambientLight.color.set(this.ambientColor);\n                this.ambientLight.groundColor.set('#000').lerp(this.ambientLight.color, 0.5);\n                break;\n\n            }\n\n            case 'ignore-limits': {\n\n                this._setIgnoreLimits(this.ignoreLimits, true);\n                break;\n\n            }\n\n        }\n\n    }\n\n    /* Public API */\n    updateSize() {\n\n        const r = this.renderer;\n        const w = this.clientWidth;\n        const h = this.clientHeight;\n        const currSize = r.getSize(tempVec2);\n\n        if (currSize.width !== w || currSize.height !== h) {\n\n            this.recenter();\n\n        }\n\n        r.setPixelRatio(window.devicePixelRatio);\n        r.setSize(w, h, false);\n\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n\n    }\n\n    redraw() {\n\n        this._dirty = true;\n    }\n\n    recenter() {\n\n        this._updateEnvironment();\n        this.redraw();\n\n    }\n\n    // Set the joint with jointName to\n    // angle in degrees\n    setJointValue(jointName, ...values) {\n\n        if (!this.robot) return;\n        if (!this.robot.joints[jointName]) return;\n\n        if (this.robot.joints[jointName].setJointValue(...values)) {\n\n            this.redraw();\n            this.dispatchEvent(new CustomEvent('angle-change', { bubbles: true, cancelable: true, detail: jointName }));\n\n        }\n\n    }\n\n    setJointValues(values) {\n\n        for (const name in values) this.setJointValue(name, values[name]);\n\n    }\n\n    /* Private Functions */\n    // Updates the position of the plane to be at the\n    // lowest point below the robot and focuses the\n    // camera on the center of the scene\n    _updateEnvironment() {\n\n        const robot = this.robot;\n        if (!robot) return;\n\n        this.world.updateMatrixWorld();\n\n        const bbox = new THREE.Box3();\n        bbox.makeEmpty();\n        robot.traverse(c => {\n            if (c.isURDFVisual) {\n                bbox.expandByObject(c);\n            }\n        });\n\n        const center = bbox.getCenter(new THREE.Vector3());\n        this.controls.target.y = center.y;\n        this.plane.position.y = bbox.min.y - 1e-3;\n\n        const dirLight = this.directionalLight;\n        dirLight.castShadow = this.displayShadow;\n\n        if (this.displayShadow) {\n\n            // Update the shadow camera rendering bounds to encapsulate the\n            // model. We use the bounding sphere of the bounding box for\n            // simplicity -- this could be a tighter fit.\n            const sphere = bbox.getBoundingSphere(new THREE.Sphere());\n            const minmax = sphere.radius;\n            const cam = dirLight.shadow.camera;\n            cam.left = cam.bottom = -minmax;\n            cam.right = cam.top = minmax;\n\n            // Update the camera to focus on the center of the model so the\n            // shadow can encapsulate it\n            const offset = dirLight.position.clone().sub(dirLight.target.position);\n            dirLight.target.position.copy(center);\n            dirLight.position.copy(center).add(offset);\n\n            cam.updateProjectionMatrix();\n\n        }\n\n    }\n\n    _scheduleLoad() {\n\n        // if our current model is already what's being requested\n        // or has been loaded then early out\n        if (this._prevload === `${ this.package }|${ this.urdf }`) return;\n        this._prevload = `${ this.package }|${ this.urdf }`;\n\n        // if we're already waiting on a load then early out\n        if (this._loadScheduled) return;\n        this._loadScheduled = true;\n\n        if (this.robot) {\n\n            this.robot.traverse(c => c.dispose && c.dispose());\n            this.robot.parent.remove(this.robot);\n            this.robot = null;\n\n        }\n\n        requestAnimationFrame(() => {\n\n            this._loadUrdf(this.package, this.urdf);\n            this._loadScheduled = false;\n\n        });\n\n    }\n\n    // Watch the package and urdf field and load the robot model.\n    // This should _only_ be called from _scheduleLoad because that\n    // ensures the that current robot has been removed\n    _loadUrdf(pkg, urdf) {\n\n        this.dispatchEvent(new CustomEvent('urdf-change', { bubbles: true, cancelable: true, composed: true }));\n\n        if (urdf) {\n\n            // Keep track of this request and make\n            // sure it doesn't get overwritten by\n            // a subsequent one\n            this._requestId++;\n            const requestId = this._requestId;\n\n            const updateMaterials = mesh => {\n\n                mesh.traverse(c => {\n\n                    if (c.isMesh) {\n\n                        c.castShadow = true;\n                        c.receiveShadow = true;\n\n                        if (c.material) {\n\n                            const mats =\n                                (Array.isArray(c.material) ? c.material : [c.material])\n                                    .map(m => {\n\n                                        if (m instanceof THREE.MeshBasicMaterial) {\n\n                                            m = new THREE.MeshPhongMaterial();\n\n                                        }\n\n                                        if (m.map) {\n\n                                            m.map.colorSpace = THREE.SRGBColorSpace;\n\n                                        }\n\n                                        return m;\n\n                                    });\n                            c.material = mats.length === 1 ? mats[0] : mats;\n\n                        }\n\n                    }\n\n                });\n\n            };\n\n            if (pkg.includes(':') && (pkg.split(':')[1].substring(0, 2)) !== '//') {\n                // E.g. pkg = \"pkg_name: path/to/pkg_name, pk2: path2/to/pk2\"}\n\n                // Convert pkg(s) into a map. E.g.\n                // { \"pkg_name\": \"path/to/pkg_name\",\n                //   \"pk2\":      \"path2/to/pk2\"      }\n\n                pkg = pkg.split(',').reduce((map, value) => {\n\n                    const split = value.split(/:/).filter(x => !!x);\n                    const pkgName = split.shift().trim();\n                    const pkgPath = split.join(':').trim();\n                    map[pkgName] = pkgPath;\n\n                    return map;\n\n                }, {});\n            }\n\n            let robot = null;\n            const manager = new THREE.LoadingManager();\n            manager.onLoad = () => {\n\n                // If another request has come in to load a new\n                // robot, then ignore this one\n                if (this._requestId !== requestId) {\n\n                    robot.traverse(c => c.dispose && c.dispose());\n                    return;\n\n                }\n\n                this.robot = robot;\n                this.world.add(robot);\n                updateMaterials(robot);\n\n                this._setIgnoreLimits(this.ignoreLimits);\n                this._updateCollisionVisibility();\n\n                this.dispatchEvent(new CustomEvent('urdf-processed', { bubbles: true, cancelable: true, composed: true }));\n                this.dispatchEvent(new CustomEvent('geometry-loaded', { bubbles: true, cancelable: true, composed: true }));\n\n                this.recenter();\n\n            };\n\n            if (this.urlModifierFunc) {\n\n                manager.setURLModifier(this.urlModifierFunc);\n\n            }\n\n            const loader = new URDFLoader(manager);\n            loader.packages = pkg;\n            loader.loadMeshCb = this.loadMeshFunc;\n            loader.fetchOptions = { mode: 'cors', credentials: 'same-origin' };\n            loader.parseCollision = true;\n            loader.load(urdf, model => robot = model);\n\n        }\n\n    }\n\n    _updateCollisionVisibility() {\n\n        const showCollision = this.showCollision;\n        const collisionMaterial = this._collisionMaterial;\n        const robot = this.robot;\n\n        if (robot === null) return;\n\n        const colliders = [];\n        robot.traverse(c => {\n\n            if (c.isURDFCollider) {\n\n                c.visible = showCollision;\n                colliders.push(c);\n\n            }\n\n        });\n\n        colliders.forEach(coll => {\n\n            coll.traverse(c => {\n\n                if (c.isMesh) {\n\n                    c.raycast = emptyRaycast;\n                    c.material = collisionMaterial;\n                    c.castShadow = false;\n\n                }\n\n            });\n\n        });\n\n    }\n\n    // Watch the coordinate frame and update the\n    // rotation of the scene to match\n    _setUp(up) {\n\n        if (!up) up = '+Z';\n        up = up.toUpperCase();\n        const sign = up.replace(/[^-+]/g, '')[0] || '+';\n        const axis = up.replace(/[^XYZ]/gi, '')[0] || 'Z';\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        if (axis === 'X') this.world.rotation.set(0, 0, sign === '+' ? HALFPI : -HALFPI);\n        if (axis === 'Z') this.world.rotation.set(sign === '+' ? -HALFPI : HALFPI, 0, 0);\n        if (axis === 'Y') this.world.rotation.set(sign === '+' ? 0 : PI, 0, 0);\n\n    }\n\n    // Updates the current robot's angles to ignore\n    // joint limits or not\n    _setIgnoreLimits(ignore, dispatch = false) {\n\n        if (this.robot) {\n\n            Object\n                .values(this.robot.joints)\n                .forEach(joint => {\n\n                    joint.ignoreLimits = ignore;\n                    joint.setJointValue(...joint.jointValue);\n\n                });\n\n        }\n\n        if (dispatch) {\n\n            this.dispatchEvent(new CustomEvent('ignore-limits-change', { bubbles: true, cancelable: true, composed: true }));\n\n        }\n\n    }\n\n};"],"names":["_tempAxis","Vector3","URDFBase","_Object3D","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","urdfNode","urdfName","_inherits","_createClass","key","value","copy","source","recursive","_get","_getPrototypeOf","prototype","call","Object3D","URDFCollider","_URDFBase","_this2","_len2","_key2","isURDFCollider","type","URDFVisual","_URDFBase2","_this3","_len3","_key3","isURDFVisual","URDFLink","_URDFBase3","_this4","_len4","_key4","isURDFLink","URDFJoint","_URDFBase4","_this5","_len5","_key5","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","mimicJoints","dependentMimicJoints","get","console","log","_jointType","set","v","matrixWorldNeedsUpdate","fill","clone","_toConsumableArray","map","joint","setJointValue","_len6","values","_key6","parseFloat","position","quaternion","didUpdate","forEach","mimicJoint","mimicValues","multiplier","offset","apply","angle","Math","min","max","setFromAxisAngle","premultiply","pos","applyEuler","rotation","addScaledVector","warn","addDependentMimicJoint","includes","push","URDFMimicJoint","_URDFJoint","_this6","_len7","_key7","updateFromMimickedJoint","_this7","_get2","_len8","_key8","modifiedValues","x","URDFRobot","_URDFLink","_this8","_len9","_key9","isURDFRobot","urdfRobotNode","robotName","links","joints","colliders","visual","frames","_this9","traverse","c","name","_objectSpread","getFrame","jointName","_len10","_key10","setJointValues","didChange","isArray","tempQuaternion","THREE","Quaternion","tempEuler","Euler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","undefined","setFromEuler","multiply","URDFLoader","manager","DefaultLoadingManager","loadMeshCb","defaultMeshLoader","bind","parseVisual","parseCollision","packages","workingPath","fetchOptions","loadAsync","urdf","Promise","resolve","reject","load","onComplete","onProgress","onError","LoaderUtils","extractUrlBase","urdfPath","resolveURL","itemStart","fetch","then","res","ok","text","Error","status","statusText","data","model","parse","itemEnd","e","error","itemError","content","linkMap","jointMap","materialMap","resolvePath","path","test","_path$replace$split","replace","_path$replace$split2","_slicedToArray","targetPkg","relPath","endsWith","Function","_typeof","processUrdf","children","Document","Element","parser","DOMParser","parseFromString","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","m","processMaterial","visualMap","colliderMap","l","isRoot","querySelector","processLink","j","processJoint","jointList","Object","uniqueJoints","Set","iterFunction","has","add","mimicTag","find","n","parent","child","xyz","axisNode","axisXYZ","normalize","link","target","visualNodes","vn","processLinkElement","hasAttribute","collisionNodes","cn","node","matNodes","material","MeshPhongMaterial","rgba","color","setRGB","opacity","transparent","depthWrite","filename","loader","TextureLoader","filePath","colorSpace","SRGBColorSpace","isCollisionNode","materialNode","group","geoType","scaleAttr","scale","err","Mesh","_x","_y","_z","_w","primitiveModel","geometry","BoxGeometry","size","SphereGeometry","radius","CylinderGeometry","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene","tempVec2","Vector2","emptyRaycast","URDFViewer","_HTMLElement","_requestId","_dirty","_loadScheduled","loadMeshFunc","urlModifierFunc","Scene","ambientLight","HemisphereLight","ambientColor","groundColor","lerp","intensity","dirLight","DirectionalLight","shadow","mapSize","width","height","normalBias","castShadow","renderer","WebGLRenderer","antialias","alpha","setClearColor","setClearAlpha","shadowMap","enabled","PCFSoftShadowMap","outputColorSpace","camera","PerspectiveCamera","z","world","plane","PlaneGeometry","ShadowMaterial","side","DoubleSide","y","receiveShadow","controls","OrbitControls","domElement","rotateSpeed","zoomSpeed","panSpeed","enableZoom","enableDamping","maxDistance","minDistance","addEventListener","recenter","directionalLight","_setUp","up","_collisionMaterial","shininess","premultipliedAlpha","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","_renderLoop","parentNode","updateSize","autoRedraw","noAutoRecenter","_updateEnvironment","render","update","_renderLoopId","requestAnimationFrame","setAttribute","removeAttribute","jointValues","connectedCallback","constructor","_styletag","styletag","document","createElement","innerHTML","tagName","head","appendChild","childElementCount","disconnectedCallback","cancelAnimationFrame","attributeChangedCallback","attr","oldval","newval","_updateCollisionVisibility","_scheduleLoad","_setIgnoreLimits","r","w","clientWidth","h","clientHeight","currSize","getSize","setPixelRatio","window","devicePixelRatio","setSize","aspect","updateProjectionMatrix","redraw","_this$robot$joints$jo","dispatchEvent","CustomEvent","bubbles","cancelable","detail","updateMatrixWorld","bbox","Box3","makeEmpty","expandByObject","center","getCenter","displayShadow","sphere","getBoundingSphere","Sphere","minmax","cam","left","bottom","right","top","sub","_prevload","dispose","remove","_loadUrdf","pkg","composed","requestId","updateMaterials","isMesh","mats","MeshBasicMaterial","substring","reduce","pkgName","shift","pkgPath","join","LoadingManager","onLoad","setURLModifier","mode","credentials","showCollision","collisionMaterial","visible","coll","raycast","toUpperCase","sign","HALFPI","ignore","dispatch","_wrapNativeSuper","HTMLElement"],"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"}