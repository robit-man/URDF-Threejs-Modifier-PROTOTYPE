{"version":3,"file":"urdf-viewer-element.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js","../src/urdf-viewer-element.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    show() {\n        this.visible = true;\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    delete() {\n        this.parent.remove(this);\n        this.children.map(child => {\n            this.remove(child);\n        });\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n","import * as THREE from 'three';\nimport { AxesHelper } from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, makeURDFCollider } from './URDFClasses.js';\nimport { MeshBVH, acceleratedRaycast } from 'three-mesh-bvh';\nimport Ammo from 'ammojs3';\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into an array [x, y, z]\nfunction processTuple(val) {\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n    // if additive is true the rotation is applied in addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default class URDFLoader {\n    constructor(manager, allowMeshBVH = false) {\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.allowMeshBVH = allowMeshBVH;\n        this.retryMap = {};\n        this.physicsWorld = null;\n        this.physicsObjects = [];\n        this.tempTransform = null;\n        this.Ammo = null;\n    }\n\n    /* Public API */\n    // urdf: The path to the URDF within the package OR absolute\n    // onComplete: Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError, options) {\n        // Check if a full URI is specified before prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n        const errors = {};\n        let managerOnErrorDefault = function () {};\n        let managerOnProgressDefault = function () {};\n        let managerOnLoadDefault = function () {};\n        let model;\n\n        if (manager.onError) {\n            managerOnErrorDefault = manager.onProgress.bind(manager);\n        }\n\n        if (manager.onProgress) {\n            managerOnProgressDefault = manager.onProgress.bind(manager);\n        }\n\n        if (manager.onLoad) {\n            managerOnLoadDefault = manager.onLoad.bind(manager);\n        }\n\n        const that = this;\n        manager.onError = function (url) {\n            errors[url] = 'Error in loading resource';\n            if (onError) {\n                onError({\n                    url,\n                    retry: that.retryMap[url],\n                });\n            }\n            managerOnErrorDefault(url);\n        };\n\n        manager.onProgress = function (url, itemsLoaded, itemsTotal) {\n            if (onProgress) {\n                onProgress(url, itemsLoaded, itemsTotal);\n            }\n            managerOnProgressDefault(url, itemsLoaded, itemsTotal);\n        };\n\n        manager.onLoad = function () {\n            if (onComplete) {\n                const partialErrors = Object.keys(errors).length === 0 ? undefined : errors;\n                onComplete(model, partialErrors);\n            }\n            managerOnLoadDefault();\n        };\n\n        options = Object.assign({\n            workingPath,\n        }, options);\n\n        manager.itemStart(urdfPath);\n        fetch(urdfPath, options.fetchOptions)\n            .then(res => res.text())\n            .then(data => {\n                model = this.parse(data, options);\n                window.model = model;\n                manager.itemEnd(urdfPath);\n            })\n            .catch(e => {\n                console.error('URDFLoader: Error parsing file.', e);\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n            });\n    }\n\n    parse(content, options = {}) {\n        const packages = options.packages || '';\n        const loadMeshCb = options.loadMeshCb || this.defaultMeshLoader.bind(this);\n        const workingPath = options.workingPath || '';\n        const parseVisual = ('parseVisual' in options) ? options.parseVisual : true;\n        const parseCollision = options.parseCollision || false;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n            if (!/^package:\\/\\//.test(path)) {\n                return workingPath ? workingPath + path : path;\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n            if (typeof packages === 'string') {\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n                } else {\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n                }\n            } else if (typeof packages === 'object') {\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n                    return packages[targetPkg] + '/' + relPath;\n                } else {\n                    console.error(`URDFLoader : ${targetPkg} not found in provided package list.`);\n                    return null;\n                }\n            }\n        }\n\n        // Process the URDF text format\n        const processUrdf = data => {\n            const parser = new DOMParser();\n            const urdf = parser.parseFromString(data, 'text/xml');\n            const children = [...urdf.children];\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot.call(this, robotNode);\n        };\n\n        // Process the <robot> node\n        function processRobot(robot) {\n            const robotNodes = [...robot.children];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial.call(this, m);\n            });\n\n            // Create the <link> map\n            links.forEach(l => {\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${name}\"]`) === null;\n                linkMap[name] = processLink.call(this, l, isRoot ? obj : null);\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint.call(this, j);\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n\n            return obj;\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n            const children = [...joint.children];\n            const jointType = joint.getAttribute('type');\n            const obj = new URDFJoint();\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n                } else if (type === 'child') {\n                    child = linkMap[n.getAttribute('link')];\n                } else if (type === 'parent') {\n                    parent = linkMap[n.getAttribute('link')];\n                } else if (type === 'limit') {\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n                }\n            });\n\n            // Join the links\n            if (parent && parent instanceof THREE.Object3D) {\n                parent.add(obj);\n            }\n            if (child && child instanceof THREE.Object3D) {\n                obj.add(child);\n            }\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n            // Add AxesHelper\n            const jointAxesHelper = new AxesHelper(0.5); // Customize size as needed\n            obj.add(jointAxesHelper);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n            if (axisNode) {\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n            }\n\n            return obj;\n        }\n\n        // Process the <link> nodes\n        function processLink(link, target = null) {\n            if (target === null) {\n                target = new URDFLink();\n            }\n\n            const children = [...link.children];\n            target.name = link.getAttribute('name');\n            target.urdfNode = link;\n\n            if (parseVisual) {\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => processLinkElement.call(this, vn, target, materialMap));\n            }\n            if (parseCollision) {\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(vn => processLinkElement.call(this, vn, target));\n            }\n\n            // Add AxesHelper\n            const linkAxesHelper = new AxesHelper(0.5); // Customize size as needed\n            target.add(linkAxesHelper);\n\n            // Add physical properties\n            this.addPhysicsToLink(target);\n\n            return target;\n        }\n\n        function processMaterial(node) {\n            const matNodes = [...node.children];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n                    const rgba = n.getAttribute('rgba').split(/\\s/g).map(v => parseFloat(v));\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n                } else if (type === 'texture') {\n                    const loader = new THREE.TextureLoader(manager);\n                    const filename = n.getAttribute('filename');\n                    const filePath = resolvePath(filename);\n                    const onError = () => {\n                        this.retryMap[filePath] = () => loader.load(filePath, () => null, () => null, onError);\n                    };\n                    material.map = loader.load(filePath, () => null, () => null, onError);\n                }\n            });\n\n            return material;\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, linkObj, materialMap = {}) {\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n            let scale = [1, 1, 1];\n\n            const children = [...vn.children];\n            let material = null;\n            let primitiveModel = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n                    material = materialMap[name];\n                } else {\n                    material = processMaterial.call(this, materialNode);\n                }\n            } else {\n                material = new THREE.MeshPhongMaterial();\n            }\n\n            children.forEach(n => {\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) scale = processTuple(scaleAttr);\n\n                            const cb = (obj, err) => {\n                                if (err) {\n                                    console.error('URDFLoader: Error loading mesh.', err);\n                                    this.retryMap[filePath] = () => loadMeshCb(filePath, manager, cb);\n                                } else if (obj) {\n                                    if (obj instanceof THREE.Mesh) {\n                                        obj.material = material;\n                                        if (this.allowMeshBVH) {\n                                            obj.raycast = acceleratedRaycast;\n                                            obj.geometry.boundsTree = new MeshBVH(obj.geometry);\n                                        }\n                                    }\n\n                                    linkObj.add(obj);\n                                    obj.position.set(xyz[0], xyz[1], xyz[2]);\n                                    obj.rotation.set(0, 0, 0);\n\n                                    // multiply the existing scale by the scale components because\n                                    // the loaded model could have important scale values already applied\n                                    // to the root. Collada files, for example, can load in with a scale\n                                    // to convert the model units to meters.\n                                    obj.scale.x *= scale[0];\n                                    obj.scale.y *= scale[1];\n                                    obj.scale.z *= scale[2];\n\n                                    applyRotation(obj, rpy);\n\n                                    if (isCollisionNode) {\n                                        makeURDFCollider(obj);\n                                    }\n                                }\n                            };\n                            loadMeshCb(filePath, manager, cb);\n                        }\n                    } else if (geoType === 'box') {\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n                        linkObj.add(primitiveModel);\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        if (isCollisionNode) {\n                            makeURDFCollider(primitiveModel);\n                        }\n                    } else if (geoType === 'sphere') {\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n                            makeURDFCollider(primitiveModel);\n                        }\n                    } else if (geoType === 'cylinder') {\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n                            makeURDFCollider(primitiveModel);\n                        }\n                    }\n                } else if (type === 'origin') {\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n                }\n            });\n\n            // apply the position and rotation to the primitive geometry after\n            // the fact because it's guaranteed to have been scraped from the child\n            // nodes by this point\n            if (primitiveModel) {\n                applyRotation(primitiveModel, rpy, true);\n                primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\n            }\n        }\n\n        return processUrdf(content);\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n        if (/\\.stl(?:\\?|$)/i.test(path)) {\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n        } else if (/\\.dae(?:\\?|$)/i.test(path)) {\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n        } else {\n            console.warn(`URDFLoader: Could not load model at ${path}.\\nNo loader available`);\n        }\n    }\n\n    addPhysicsToLink(link) {\n        if (!this.Ammo) return; // Ensure Ammo is loaded\n\n        const shape = new this.Ammo.btBoxShape(new this.Ammo.btVector3(0.5, 0.5, 0.5)); // Adjust size as needed\n        const transform = new this.Ammo.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new this.Ammo.btVector3(link.position.x, link.position.y, link.position.z));\n\n        const mass = 1; // Adjust mass as needed\n        const localInertia = new this.Ammo.btVector3(0, 0, 0);\n        shape.calculateLocalInertia(mass, localInertia);\n\n        const motionState = new this.Ammo.btDefaultMotionState(transform);\n        const rbInfo = new this.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n        const body = new this.Ammo.btRigidBody(rbInfo);\n\n        this.physicsWorld.addRigidBody(body);\n        this.physicsObjects.push({ threeObject: link, body });\n    }\n\n    // Initialize Ammo.js and the Physics World\n    initPhysics() {\n        Ammo().then((AmmoLib) => {\n            this.Ammo = AmmoLib;\n\n            const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n            const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n            const overlappingPairCache = new AmmoLib.btDbvtBroadphase();\n            const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n            this.physicsWorld = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);\n            this.physicsWorld.setGravity(new AmmoLib.btVector3(0, -9.82, 0));\n\n            this.physicsObjects = [];\n            this.tempTransform = new AmmoLib.btTransform();\n\n            this.initGround();\n        });\n    }\n\n    initGround() {\n        if (!this.Ammo) return; // Ensure Ammo is loaded\n\n        const groundShape = new this.Ammo.btBoxShape(new this.Ammo.btVector3(50, 1, 50));\n        const groundTransform = new this.Ammo.btTransform();\n        groundTransform.setIdentity();\n        groundTransform.setOrigin(new this.Ammo.btVector3(0, -1, 0));\n\n        const mass = 0;\n        const localInertia = new this.Ammo.btVector3(0, 0, 0);\n        const myMotionState = new this.Ammo.btDefaultMotionState(groundTransform);\n        const rbInfo = new this.Ammo.btRigidBodyConstructionInfo(mass, myMotionState, groundShape, localInertia);\n        const body = new this.Ammo.btRigidBody(rbInfo);\n\n        this.physicsWorld.addRigidBody(body);\n    }\n\n    // Update the Physics Simulation\n    updatePhysics() {\n        if (!this.physicsWorld) return; // Ensure the physics world is initialized\n\n        const deltaTime = 1 / 60;\n        this.physicsWorld.stepSimulation(deltaTime, 10);\n\n        this.physicsObjects.forEach(obj => {\n            const { threeObject, body } = obj;\n            const ms = body.getMotionState();\n            if (ms) {\n                ms.getWorldTransform(this.tempTransform);\n                const p = this.tempTransform.getOrigin();\n                const q = this.tempTransform.getRotation();\n                threeObject.position.set(p.x(), p.y(), p.z());\n                threeObject.quaternion.set(q.x(), q.y(), q.z(), q.w());\n            }\n        });\n    }\n}\n\nURDFLoader.prototype.parseFromString = function(urdfString, options) {\n    try {\n        const parser = new DOMParser();\n        const urdfDom = parser.parseFromString(urdfString, \"text/xml\");\n        \n        // Directly use the existing parse method if it can handle a DOM object\n        // Alternatively, convert the DOM to a string or another format as required by your parse method\n        const model = this.parse(urdfDom, options);\n        \n        if (options.onComplete) {\n            options.onComplete(model);\n        }\n    } catch (error) {\n        if (options.onError) {\n            options.onError(error);\n        }\n    }\n};\n\nURDFLoader.prototype.loadFromString = function(urdfString, onComplete) {\n    try {\n        // Assuming the existing parse method can handle XML DOM, convert the string to DOM first\n        const parser = new DOMParser();\n        const urdfDOM = parser.parseFromString(urdfString, \"text/xml\");\n        const model = this.parse(urdfDOM, {});\n        if (onComplete) {\n            onComplete(model);\n        }\n    } catch (error) {\n        console.error('Failed to parse URDF string:', error);\n    }\n};\n\n// Extend URDFLoader to handle scene updates\nURDFLoader.prototype.applyUpdates = function () {\n    // This could be a method to apply pending updates or simply refresh parts of the model\n    if (window.model) {\n        window.model.refreshScene();\n    }\n};\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/js/controls/OrbitControls';\nimport URDFLoader from './URDFLoader.js';\nimport Ammo from 'ammojs3';\n\n// urdf-viewer element\n// Loads and displays a 3D view of a URDF-formatted robot\n\n// Events\n// urdf-change: Fires when the URDF has finished loading and getting processed\n// urdf-processed: Fires when the URDF has finished loading and getting processed\n// geometry-loaded: Fires when all the geometry has been fully loaded\n// ignore-limits-change: Fires when the 'ignore-limits' attribute changes\n// angle-change: Fires when an angle changes\nexport default\nclass URDFViewer extends HTMLElement {\n\n    static get observedAttributes() {\n\n        return ['package', 'urdf', 'up', 'display-shadow', 'ambient-color', 'ignore-limits'];\n\n    }\n\n    get package() { return this.getAttribute('package') || ''; }\n    set package(val) { this.setAttribute('package', val); }\n\n    get urdf() { return this.getAttribute('urdf') || ''; }\n    set urdf(val) { this.setAttribute('urdf', val); }\n\n    get ignoreLimits() { return this.hasAttribute('ignore-limits') || false; }\n    set ignoreLimits(val) { val ? this.setAttribute('ignore-limits', val) : this.removeAttribute('ignore-limits'); }\n\n    get up() { return this.getAttribute('up') || '+Z'; }\n    set up(val) { this.setAttribute('up', val); }\n\n    get displayShadow() { return this.hasAttribute('display-shadow') || false; }\n    set displayShadow(val) { val ? this.setAttribute('display-shadow', '') : this.removeAttribute('display-shadow'); }\n\n    get ambientColor() { return this.getAttribute('ambient-color') || '#263238'; }\n    set ambientColor(val) { val ? this.setAttribute('ambient-color', val) : this.removeAttribute('ambient-color'); }\n\n    get autoRedraw() { return this.hasAttribute('auto-redraw') || false; }\n    set autoRedraw(val) { val ? this.setAttribute('auto-redraw', true) : this.removeAttribute('auto-redraw'); }\n\n    get noAutoRecenter() { return this.hasAttribute('no-auto-recenter') || false; }\n    set noAutoRecenter(val) { val ? this.setAttribute('no-auto-recenter', true) : this.removeAttribute('no-auto-recenter'); }\n\n    get angles() {\n\n        const angles = {};\n        if (this.robot) {\n\n            for (const name in this.robot.joints) angles[name] = this.robot.joints[name].angle;\n\n        }\n\n        return angles;\n\n    }\n    set angles(val) { this._setAngles(val); }\n\n    /* Lifecycle Functions */\n    constructor() {\n\n        super();\n\n        this._requestId = 0;\n        this._dirty = false;\n        this._loadScheduled = false;\n        this.robot = null;\n        this.loadMeshFunc = null;\n        this.urlModifierFunc = null;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n\n        const ambientLight = new THREE.HemisphereLight(this.ambientColor, '#000');\n        ambientLight.groundColor.lerp(ambientLight.color, 0.5);\n        ambientLight.intensity = 0.5;\n        ambientLight.position.set(0, 1, 0);\n        scene.add(ambientLight);\n\n        // Light setup\n        const dirLight = new THREE.DirectionalLight(0xffffff);\n        dirLight.position.set(4, 10, 1);\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.castShadow = true;\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setClearColor(0xffffff);\n        renderer.setClearAlpha(0);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.gammaOutput = true;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 2000);\n        camera.position.z = -10;\n\n        // World setup\n        const world = new THREE.Object3D();\n        scene.add(world);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(40, 40),\n            new THREE.ShadowMaterial({ side: THREE.DoubleSide, transparent: true, opacity: 0.5 })\n        );\n        plane.rotation.x = -Math.PI / 2;\n        plane.position.y = -0.5;\n        plane.receiveShadow = true;\n        plane.scale.set(10, 10, 10);\n        scene.add(plane);\n\n        // Controls setup\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.rotateSpeed = 2.0;\n        controls.zoomSpeed = 5;\n        controls.panSpeed = 2;\n        controls.enableZoom = true;\n        controls.enableDamping = false;\n        controls.maxDistance = 150;\n        controls.minDistance = 0.25;\n        controls.addEventListener('change', () => this.recenter());\n\n        this.scene = scene;\n        this.world = world;\n        this.renderer = renderer;\n        this.camera = camera;\n        this.controls = controls;\n        this.plane = plane;\n        this.directionalLight = dirLight;\n        this.ambientLight = ambientLight;\n\n        this._setUp(this.up);\n        this.initPhysics();\n\n        const _renderLoop = () => {\n\n            if (this.parentNode) {\n\n                this.updateSize();\n\n                if (this._dirty || this.autoRedraw) {\n\n                    if (!this.noAutoRecenter) {\n\n                        this._updateEnvironment();\n                    }\n\n                    this.renderer.render(scene, camera);\n                    this._dirty = false;\n\n                }\n\n                // update controls after the environment in\n                // case the controls are retargeted\n                this.controls.update();\n                this.updatePhysics();\n            }\n            this._renderLoopId = requestAnimationFrame(_renderLoop);\n\n        };\n        _renderLoop();\n\n    }\n\n    connectedCallback() {\n\n        // Add our initialize styles for the element if they haven't\n        // been added yet\n        if (!this.constructor._styletag) {\n\n            const styletag = document.createElement('style');\n            styletag.innerHTML =\n            `\n                ${ this.tagName } { display: block; }\n                ${ this.tagName } canvas {\n                    width: 100%;\n                    height: 100%;\n                }\n            `;\n            document.head.appendChild(styletag);\n            this.constructor._styletag = styletag;\n\n        }\n\n        // add the renderer\n        if (this.childElementCount === 0) {\n\n            this.appendChild(this.renderer.domElement);\n\n        }\n\n        this.updateSize();\n        requestAnimationFrame(() => this.updateSize());\n\n    }\n\n    disconnectedCallback() {\n\n        cancelAnimationFrame(this._renderLoopId);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        this.recenter();\n\n        switch (attr) {\n\n            case 'package':\n            case 'urdf': {\n\n                this._scheduleLoad();\n                break;\n\n            }\n\n            case 'up': {\n\n                this._setUp(this.up);\n                break;\n\n            }\n\n            case 'ambient-color': {\n\n                this.ambientLight.color.set(this.ambientColor);\n                this.ambientLight.groundColor.set('#000').lerp(this.ambientLight.color, 0.5);\n                break;\n\n            }\n\n            case 'ignore-limits': {\n\n                this._setIgnoreLimits(this.ignoreLimits, true);\n                break;\n\n            }\n\n        }\n\n    }\n\n    /* Public API */\n    updateSize() {\n\n        const r = this.renderer;\n        const w = this.clientWidth;\n        const h = this.clientHeight;\n        const currsize = new THREE.Vector2();\n        r.getSize(currsize);\n\n        if (currsize.width !== w || currsize.height !== h) {\n\n            this.recenter();\n\n        }\n\n        r.setPixelRatio(window.devicePixelRatio);\n        r.setSize(w, h, false);\n\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n\n    }\n\n    redraw() {\n\n        this._dirty = true;\n    }\n\n    recenter() {\n\n        this._updateEnvironment();\n        this.redraw();\n\n    }\n\n    // Set the joint with jointName to\n    // angle in degrees\n    setAngle(jointName, angle) {\n\n        if (!this.robot) return;\n        if (!this.robot.joints[jointName]) return;\n\n        const origAngle = this.robot.joints[jointName].angle;\n        const newAngle = this.robot.setAngle(jointName, angle);\n        if (origAngle !== newAngle) {\n            this.redraw();\n        }\n\n        this.dispatchEvent(new CustomEvent('angle-change', { bubbles: true, cancelable: true, detail: jointName }));\n\n    }\n\n    setAngles(angles) {\n\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n    /* Private Functions */\n    // Updates the position of the plane to be at the\n    // lowest point below the robot and focuses the\n    // camera on the center of the scene\n    _updateEnvironment() {\n\n        if (!this.robot) return;\n\n        this.world.updateMatrixWorld();\n\n        const bbox = new THREE.Box3();\n        const temp = new THREE.Box3();\n\n        this.robot.traverse(c => {\n\n            const geometry = c.geometry;\n            if (geometry) {\n\n                if (geometry.boundingBox === null) {\n\n                    geometry.computeBoundingBox();\n\n                }\n\n                temp.copy(geometry.boundingBox);\n                temp.applyMatrix4(c.matrixWorld);\n\n                bbox.union(temp);\n\n            }\n\n        });\n\n        const center = bbox.getCenter(new THREE.Vector3());\n        this.controls.target.y = center.y;\n        this.plane.position.y = bbox.min.y - 1e-3;\n\n        const dirLight = this.directionalLight;\n        dirLight.castShadow = this.displayShadow;\n\n        if (this.displayShadow) {\n\n            // Update the shadow camera rendering bounds to encapsulate the\n            // model. We use the bounding sphere of the bounding box for\n            // simplicity -- this could be a tighter fit.\n            const sphere = bbox.getBoundingSphere(new THREE.Sphere());\n            const minmax = sphere.radius;\n            const cam = dirLight.shadow.camera;\n            cam.left = cam.bottom = -minmax;\n            cam.right = cam.top = minmax;\n\n            // Update the camera to focus on the center of the model so the\n            // shadow can encapsulate it\n            const offset = dirLight.position.clone().sub(dirLight.target.position);\n            dirLight.target.position.copy(center);\n            dirLight.position.copy(center).add(offset);\n\n            cam.updateProjectionMatrix();\n\n        }\n\n    }\n\n    _scheduleLoad() {\n\n        // if our current model is already what's being requested\n        // or has been loaded then early out\n        if (this._prevload === `${ this.package }|${ this.urdf }`) return;\n        this._prevload = `${ this.package }|${ this.urdf }`;\n\n        // if we're already waiting on a load then early out\n        if (this._loadScheduled) return;\n        this._loadScheduled = true;\n\n        if (this.robot) {\n\n            this.robot.traverse(c => c.dispose && c.dispose());\n            this.robot.parent.remove(this.robot);\n            this.robot = null;\n\n        }\n\n        requestAnimationFrame(() => {\n\n            this._loadUrdf(this.package, this.urdf);\n            this._loadScheduled = false;\n\n        });\n\n    }\n\n    // Watch the package and urdf field and load the robot model.\n    // This should _only_ be called from _scheduleLoad because that\n    // ensures the that current robot has been removed\n    _loadUrdf(pkg, urdf) {\n\n        this.dispatchEvent(new CustomEvent('urdf-change', { bubbles: true, cancelable: true, composed: true }));\n\n        if (urdf) {\n\n            // Keep track of this request and make\n            // sure it doesn't get overwritten by\n            // a subsequent one\n            this._requestId++;\n            const requestId = this._requestId;\n\n            const updateMaterials = mesh => {\n\n                mesh.traverse(c => {\n\n                    if (c.isMesh) {\n\n                        c.castShadow = true;\n                        c.receiveShadow = true;\n\n                        if (c.material) {\n\n                            const mats =\n                                (Array.isArray(c.material) ? c.material : [c.material])\n                                    .map(m => {\n\n                                        if (m instanceof THREE.MeshBasicMaterial) {\n\n                                            m = new THREE.MeshPhongMaterial();\n\n                                        }\n\n                                        if (m.map) {\n\n                                            m.map.encoding = THREE.GammaEncoding;\n\n                                        }\n\n                                        return m;\n\n                                    });\n                            c.material = mats.length === 1 ? mats[0] : mats;\n\n                        }\n\n                    }\n\n                });\n\n            };\n\n            if (pkg.includes(':') && (pkg.split(':')[1].substring(0, 2)) !== '//') {\n                // E.g. pkg = \"pkg_name: path/to/pkg_name, pk2: path2/to/pk2\"}\n\n                // Convert pkg(s) into a map. E.g.\n                // { \"pkg_name\": \"path/to/pkg_name\",\n                //   \"pk2\":      \"path2/to/pk2\"      }\n\n                pkg = pkg.split(',').reduce((map, value) => {\n\n                    const split = value.split(/:/).filter(x => !!x);\n                    const pkgName = split.shift().trim();\n                    const pkgPath = split.join(':').trim();\n                    map[pkgName] = pkgPath;\n\n                    return map;\n\n                }, {});\n            }\n\n            let robot = null;\n            const manager = new THREE.LoadingManager();\n            manager.onLoad = () => {\n\n                // If another request has come in to load a new\n                // robot, then ignore this one\n                if (this._requestId !== requestId) {\n\n                    robot.traverse(c => c.dispose && c.dispose());\n                    return;\n\n                }\n\n                this.robot = robot;\n                this.world.add(robot);\n                updateMaterials(robot);\n\n                this._setIgnoreLimits(this.ignoreLimits);\n\n                this.dispatchEvent(new CustomEvent('urdf-processed', { bubbles: true, cancelable: true, composed: true }));\n                this.dispatchEvent(new CustomEvent('geometry-loaded', { bubbles: true, cancelable: true, composed: true }));\n\n                this.recenter();\n\n            };\n\n            if (this.urlModifierFunc) {\n\n                manager.setURLModifier(this.urlModifierFunc);\n\n            }\n\n            new URDFLoader(manager).load(\n                urdf,\n\n                // onComplete\n                (model) => {\n                    robot = model;\n                },\n\n                // onProgress\n                (url, loaded, total) => {\n                    console.log(`${ url }; ${ loaded }/${ total }`);\n                },\n\n                // onError\n                (error) => {\n                    console.log(error);\n                },\n\n                // options\n                {\n\n                    packages: pkg,\n                    loadMeshCb: this.loadMeshFunc,\n                    fetchOptions: { mode: 'cors', credentials: 'same-origin' },\n\n                });\n\n        }\n\n    }\n\n    // Watch the coordinate frame and update the\n    // rotation of the scene to match\n    _setUp(up) {\n\n        if (!up) up = '+Z';\n        up = up.toUpperCase();\n        const sign = up.replace(/[^-+]/g, '')[0] || '+';\n        const axis = up.replace(/[^XYZ]/gi, '')[0] || 'Z';\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        if (axis === 'X') this.world.rotation.set(0, 0, sign === '+' ? HALFPI : -HALFPI);\n        if (axis === 'Z') this.world.rotation.set(sign === '+' ? -HALFPI : HALFPI, 0, 0);\n        if (axis === 'Y') this.world.rotation.set(sign === '+' ? 0 : PI, 0, 0);\n\n    }\n\n    // Updates the current robot's angles to ignore\n    // joint limits or not\n    _setIgnoreLimits(ignore, dispatch = false) {\n\n        if (this.robot) {\n\n            Object\n                .values(this.robot.joints)\n                .forEach(joint => {\n\n                    joint.ignoreLimits = ignore;\n                    joint.setAngle(joint.angle);\n\n                });\n\n        }\n\n        if (dispatch) {\n\n            this.dispatchEvent(new CustomEvent('ignore-limits-change', { bubbles: true, cancelable: true, composed: true }));\n\n        }\n\n    }\n\n\n    // Ammo.js setup and functions\n    initPhysics() {\n        Ammo().then((AmmoLib) => {\n            this.Ammo = AmmoLib;\n    \n            const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n            const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n            const overlappingPairCache = new AmmoLib.btDbvtBroadphase();\n            const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n            this.physicsWorld = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);\n            this.physicsWorld.setGravity(new AmmoLib.btVector3(0, -9.82, 0));\n    \n            this.physicsObjects = [];\n            this.tempTransform = new AmmoLib.btTransform();\n            console.log('physics init');\n            this.initGround();\n        });\n    }\n    initGround() {\n        if (!this.Ammo) return; // Ensure Ammo is loaded\n    \n        const groundShape = new this.Ammo.btBoxShape(new this.Ammo.btVector3(50, 1, 50));\n        const groundTransform = new this.Ammo.btTransform();\n        groundTransform.setIdentity();\n        groundTransform.setOrigin(new this.Ammo.btVector3(0, -1, 0));\n    \n        const mass = 0;\n        const localInertia = new this.Ammo.btVector3(0, 0, 0);\n        const myMotionState = new this.Ammo.btDefaultMotionState(groundTransform);\n        const rbInfo = new this.Ammo.btRigidBodyConstructionInfo(mass, myMotionState, groundShape, localInertia);\n        const body = new this.Ammo.btRigidBody(rbInfo);\n\n        console.log('ground init');\n\n        this.physicsWorld.addRigidBody(body);\n    }\n\n    createPhysicsObject(threeObject, shapeType, mass) {\n        let shape;\n        switch (shapeType) {\n            case 'box':\n                const bbox = new THREE.Box3().setFromObject(threeObject);\n                const size = new THREE.Vector3();\n                bbox.getSize(size);\n                shape = new this.Ammo.btBoxShape(new this.Ammo.btVector3(size.x / 2, size.y / 2, size.z / 2));\n                break;\n            // Add more shape types as needed\n        }\n\n        const transform = new this.Ammo.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new this.Ammo.btVector3(threeObject.position.x, threeObject.position.y, threeObject.position.z));\n\n        const localInertia = new this.Ammo.btVector3(0, 0, 0);\n        shape.calculateLocalInertia(mass, localInertia);\n\n        const motionState = new this.Ammo.btDefaultMotionState(transform);\n        const rbInfo = new this.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n        const body = new this.Ammo.btRigidBody(rbInfo);\n\n        console.log('physics objects created');\n\n        this.physicsWorld.addRigidBody(body);\n        this.physicsObjects.push({ threeObject, body });\n    }\n\n    updatePhysics() {\n        if (!this.physicsWorld) return; // Ensure the physics world is initialized\n    \n        const deltaTime = 1 / 60;\n        this.physicsWorld.stepSimulation(deltaTime, 10);\n    \n        this.physicsObjects.forEach(obj => {\n            const { threeObject, body } = obj;\n            const ms = body.getMotionState();\n            if (ms) {\n                ms.getWorldTransform(this.tempTransform);\n                const p = this.tempTransform.getOrigin();\n                const q = this.tempTransform.getRotation();\n                threeObject.position.set(p.x(), p.y(), p.z());\n                threeObject.quaternion.set(q.x(), q.y(), q.z(), q.w());\n            }\n        });\n        //console.log('update physics');\n\n    }\n};\n"],"names":["URDFColliderClone","_proto$clone","proto","Object","getPrototypeOf","_len","arguments","length","args","Array","_key","result","clone","call","apply","concat","isURDFCollider","makeURDFCollider","object","URDFLink","_Object3D","_this","_classCallCheck","_len2","_key2","_callSuper","isURDFLink","type","urdfNode","_inherits","_createClass","key","value","show","visible","hide","_delete","_this2","parent","remove","children","map","child","copy","source","recursive","_get","_getPrototypeOf","prototype","Object3D","URDFJoint","_Object3D2","_this3","_len3","_key3","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","get","_jointType","set","v","fill","isArray","_toConsumableArray","setAngle","setOffset","_len4","values","_key4","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","_URDFLink","_this4","_len5","_key5","isURDFRobot","urdfRobotNode","robotName","links","joints","_this5","traverse","c","name","jointName","joint","_len6","_key6","setAngles","angles","tempQuaternion","THREE","tempEuler","Euler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","undefined","rotation","setFromEuler","multiply","URDFLoader","manager","allowMeshBVH","DefaultLoadingManager","retryMap","physicsWorld","physicsObjects","tempTransform","Ammo","load","urdf","onComplete","onProgress","onError","options","workingPath","LoaderUtils","extractUrlBase","urdfPath","resolveURL","errors","managerOnErrorDefault","managerOnProgressDefault","managerOnLoadDefault","model","bind","onLoad","that","url","retry","itemsLoaded","itemsTotal","partialErrors","keys","assign","itemStart","fetch","fetchOptions","then","res","text","data","parse","window","itemEnd","e","error","itemError","content","packages","loadMeshCb","defaultMeshLoader","parseVisual","parseCollision","linkMap","jointMap","materialMap","resolvePath","path","test","_path$replace$split","replace","_path$replace$split2","_slicedToArray","targetPkg","relPath","endsWith","_typeof","processUrdf","parser","DOMParser","parseFromString","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","forEach","m","processMaterial","l","isRoot","querySelector","processLink","j","processJoint","xyz","n","add","jointAxesHelper","AxesHelper","axisNode","axisXYZ","Vector3","normalize","link","target","visualNodes","vn","processLinkElement","collisionNodes","linkAxesHelper","addPhysicsToLink","node","matNodes","material","MeshPhongMaterial","rgba","color","setRGB","opacity","transparent","loader","TextureLoader","filename","filePath","linkObj","_this6","isCollisionNode","scale","primitiveModel","materialNode","geoType","scaleAttr","cb","err","Mesh","raycast","acceleratedRaycast","geometry","boundsTree","MeshBVH","x","y","z","BoxBufferGeometry","size","SphereBufferGeometry","radius","CylinderBufferGeometry","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene","shape","btBoxShape","btVector3","transform","btTransform","setIdentity","setOrigin","mass","localInertia","calculateLocalInertia","motionState","btDefaultMotionState","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","push","threeObject","initPhysics","_this7","AmmoLib","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","overlappingPairCache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","setGravity","initGround","groundShape","groundTransform","myMotionState","updatePhysics","_this8","deltaTime","stepSimulation","ms","getMotionState","getWorldTransform","p","getOrigin","q","getRotation","w","urdfString","urdfDom","loadFromString","urdfDOM","applyUpdates","refreshScene","URDFViewer","_HTMLElement","_requestId","_dirty","_loadScheduled","loadMeshFunc","urlModifierFunc","Scene","ambientLight","HemisphereLight","ambientColor","groundColor","lerp","intensity","dirLight","DirectionalLight","shadow","mapSize","width","height","castShadow","renderer","WebGLRenderer","antialias","alpha","setClearColor","setClearAlpha","shadowMap","enabled","PCFSoftShadowMap","gammaOutput","camera","PerspectiveCamera","world","plane","PlaneBufferGeometry","ShadowMaterial","side","DoubleSide","receiveShadow","controls","OrbitControls","domElement","rotateSpeed","zoomSpeed","panSpeed","enableZoom","enableDamping","maxDistance","minDistance","addEventListener","recenter","directionalLight","_setUp","up","_renderLoop","parentNode","updateSize","autoRedraw","noAutoRecenter","_updateEnvironment","render","update","_renderLoopId","requestAnimationFrame","setAttribute","hasAttribute","removeAttribute","_setAngles","connectedCallback","constructor","_styletag","styletag","document","createElement","innerHTML","tagName","head","appendChild","childElementCount","disconnectedCallback","cancelAnimationFrame","attributeChangedCallback","attr","oldval","newval","_scheduleLoad","_setIgnoreLimits","r","clientWidth","h","clientHeight","currsize","Vector2","getSize","setPixelRatio","devicePixelRatio","setSize","aspect","updateProjectionMatrix","redraw","origAngle","newAngle","dispatchEvent","CustomEvent","bubbles","cancelable","detail","updateMatrixWorld","bbox","Box3","temp","boundingBox","computeBoundingBox","applyMatrix4","matrixWorld","union","center","getCenter","displayShadow","sphere","getBoundingSphere","Sphere","minmax","cam","left","bottom","right","top","offset","sub","_prevload","dispose","_loadUrdf","pkg","composed","requestId","updateMaterials","isMesh","mats","MeshBasicMaterial","encoding","GammaEncoding","includes","substring","reduce","pkgName","shift","pkgPath","join","LoadingManager","setURLModifier","loaded","total","log","mode","credentials","toUpperCase","sign","HALFPI","ignore","dispatch","createPhysicsObject","shapeType","setFromObject","_wrapNativeSuper","HTMLElement"],"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"}