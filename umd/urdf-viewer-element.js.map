{"version":3,"file":"urdf-viewer-element.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js","../src/urdf-viewer-element.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    show() {\n        this.visible = true;\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    delete() {\n        this.parent.remove(this);\n        this.children.map(child => {\n            this.remove(child);\n        });\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n","import * as THREE from 'three';\nimport { AxesHelper } from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, makeURDFCollider } from './URDFClasses.js';\nimport { MeshBVH, acceleratedRaycast } from 'three-mesh-bvh';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\n    class URDFLoader {\n\n    constructor(manager, allowMeshBVH = false) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.allowMeshBVH = allowMeshBVH;\n        this.retryMap = {};\n\n    }\n\n    /* Public API */\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError, options) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        const errors = {};\n\n        let managerOnErrorDefault = function () { };\n        let managerOnProgressDefault = function () { };\n        let managerOnLoadDefault = function () { };\n        let model;\n\n        if (manager.onError) {\n\n            managerOnErrorDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onProgress) {\n\n            managerOnProgressDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onLoad) {\n\n            managerOnLoadDefault = manager.onLoad.bind(manager);\n\n        }\n\n        const that = this;\n        manager.onError = function (url) {\n\n            errors[url] = 'Error in loading resource';\n\n            if (onError) {\n\n                onError({\n                    url,\n                    retry: that.retryMap[url],\n                });\n\n            }\n\n            managerOnErrorDefault(url);\n\n        };\n\n        manager.onProgress = function (url, itemsLoaded, itemsTotal) {\n\n            if (onProgress) {\n\n                onProgress(url, itemsLoaded, itemsTotal);\n\n            }\n\n            managerOnProgressDefault(url, itemsLoaded, itemsTotal);\n\n        };\n\n        manager.onLoad = function () {\n\n            if (onComplete) {\n\n                const partialErrors = Object.keys(errors).length === 0\n                    ? undefined\n                    : errors;\n\n                onComplete(model, partialErrors);\n\n            }\n\n            managerOnLoadDefault();\n\n        };\n\n        options = Object.assign({\n            workingPath,\n        }, options);\n\n        manager.itemStart(urdfPath);\n        fetch(urdfPath, options.fetchOptions)\n            .then(res => res.text())\n            .then(data => {\n\n                model = this.parse(data, options);\n                window.model = model;\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                console.error('URDFLoader: Error parsing file.', e);\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content, options = {}) {\n\n        const packages = options.packages || '';\n        const loadMeshCb = options.loadMeshCb || this.defaultMeshLoader.bind(this);\n        const workingPath = options.workingPath || '';\n        const parseVisual = ('parseVisual' in options) ? options.parseVisual : true;\n        const parseCollision = options.parseCollision || false;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${targetPkg} not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        const processUrdf = data => {\n\n            const parser = new DOMParser();\n            const urdf = parser.parseFromString(data, 'text/xml');\n            const children = [...urdf.children];\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot.call(this, robotNode);\n\n        };\n\n\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [...robot.children];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial.call(this, m);\n\n            });\n\n            // Create the <link> map\n            links.forEach(l => {\n\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${name}\"]`) === null;\n                linkMap[name] = processLink.call(this, l, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint.call(this, j);\n\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n\n            return obj;\n\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n\n            const children = [...joint.children];\n            const jointType = joint.getAttribute('type');\n            const obj = new URDFJoint();\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                } else if (type === 'child') {\n\n                    child = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'parent') {\n\n                    parent = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'limit') {\n\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n                }\n\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n\n            // Add AxesHelper\n            const jointAxesHelper = new AxesHelper(0.5); // Customize size as needed\n            obj.add(jointAxesHelper);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n\n            if (axisNode) {\n\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n\n            }\n\n            return obj;\n\n        }\n\n        // Process the <link> nodes\n        function processLink(link, target = null) {\n\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [...link.children];\n            target.name = link.getAttribute('name');\n            target.urdfNode = link;\n\n            if (parseVisual) {\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => processLinkElement.call(this, vn, target, materialMap));\n            }\n            if (parseCollision) {\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(vn => processLinkElement.call(this, vn, target));\n            }\n            // Add AxesHelper\n            const linkAxesHelper = new AxesHelper(0.5); // Customize size as needed\n            target.add(linkAxesHelper);\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [...node.children];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n\n                } else if (type === 'texture') {\n\n                    const loader = new THREE.TextureLoader(manager);\n                    const filename = n.getAttribute('filename');\n                    const filePath = resolvePath(filename);\n                    const onError = () => {\n                        this.retryMap[filePath] = () => loader.load(filePath, () => null, () => null, onError);\n                    };\n                    material.map = loader.load(filePath, () => null, () => null, onError);\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, linkObj, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n            let scale = [1, 1, 1];\n\n            const children = [...vn.children];\n            let material = null;\n            let primitiveModel = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial.call(this, materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) scale = processTuple(scaleAttr);\n\n                            const cb = (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n                                    this.retryMap[filePath] = () => loadMeshCb(filePath, manager, cb);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n                                        if (this.allowMeshBVH) {\n                                            obj.raycast = acceleratedRaycast;\n                                            obj.geometry.boundsTree = new MeshBVH(obj.geometry);\n                                        }\n                                    }\n\n                                    linkObj.add(obj);\n\n                                    obj.position.set(xyz[0], xyz[1], xyz[2]);\n                                    obj.rotation.set(0, 0, 0);\n\n                                    // multiply the existing scale by the scale components because\n                                    // the loaded model could have important scale values already applied\n                                    // to the root. Collada files, for example, can load in with a scale\n                                    // to convert the model units to meters.\n                                    obj.scale.x *= scale[0];\n                                    obj.scale.y *= scale[1];\n                                    obj.scale.z *= scale[2];\n\n                                    applyRotation(obj, rpy);\n\n                                    if (isCollisionNode) {\n\n                                        makeURDFCollider(obj);\n\n                                    }\n\n                                }\n\n                            };\n                            loadMeshCb(filePath, manager, cb);\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n\n                        linkObj.add(primitiveModel);\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'sphere') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'cylinder') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                }\n\n            });\n\n            // apply the position and rotation to the primitive geometry after\n            // the fact because it's guaranteed to have been scraped from the child\n            // nodes by this point\n            if (primitiveModel) {\n\n                applyRotation(primitiveModel, rpy, true);\n                primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\n\n            }\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl(?:\\?|$)/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae(?:\\?|$)/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${path}.\\nNo loader available`);\n\n        }\n\n    }\n\n};\n\nURDFLoader.prototype.parseFromString = function(urdfString, options) {\n    try {\n        const parser = new DOMParser();\n        const urdfDom = parser.parseFromString(urdfString, \"text/xml\");\n        \n        // Directly use the existing parse method if it can handle a DOM object\n        // Alternatively, convert the DOM to a string or another format as required by your parse method\n        const model = this.parse(urdfDom, options);\n        \n        if (options.onComplete) {\n            options.onComplete(model);\n        }\n    } catch (error) {\n        if (options.onError) {\n            options.onError(error);\n        }\n    }\n};\n\n\n// In URDFLoader.js\nURDFLoader.prototype.loadFromString = function(urdfString, onComplete) {\n    try {\n        // Assuming the existing parse method can handle XML DOM, convert the string to DOM first\n        const parser = new DOMParser();\n        const urdfDOM = parser.parseFromString(urdfString, \"text/xml\");\n        const model = this.parse(urdfDOM, {});\n        if (onComplete) {\n            onComplete(model);\n        }\n    } catch (error) {\n        console.error('Failed to parse URDF string:', error);\n    }\n};\n\n// Add or modify URDFJoint to handle updates more dynamically\nURDFJoint.prototype.updateProperties = function (params) {\n    if (params.origin) {\n        this.origin.set(...params.origin.xyz);\n        const euler = new THREE.Euler(...params.origin.rpy, 'XYZ');\n        this.origQuaternion.setFromEuler(euler);\n    }\n    if (params.axis) {\n        this.axis.set(...params.axis);\n    }\n    if (params.limit) {\n        this.limit.lower = params.limit.lower;\n        this.limit.upper = params.limit.upper;\n    }\n\n    // After updating properties, you might need to recalculate the joint's position in the world\n    this.updateTransform();\n}\n\nURDFJoint.prototype.updateTransform = function () {\n    // Apply new position and rotation\n    this.position.set(...this.origin.toArray());\n    this.quaternion.copy(this.origQuaternion);\n\n    // Ensure updates affect the visual representation\n    this.updateMatrix();\n    this.updateMatrixWorld(true);\n\n    // If part of a larger kinematic chain, inform parent or children to update as well\n    if (this.parent) {\n        this.parent.updateMatrixWorld(true);\n    }\n}\n\n// Call this method after changing joint parameters\nfunction refreshScene() {\n    if (viewer && viewer.robot) {\n        Object.values(viewer.robot.joints).forEach(joint => joint.updateTransform());\n        viewer.updateScene();  // Assuming this triggers a re-render\n    }\n}\n\n\n// Assuming URDFLoader, URDFRobot, and URDFJoint are already defined elsewhere in your script\n\n/* Add update joint functionality to URDFRobot */\nURDFRobot.prototype.updateJoint = function (jointName, params) {\n    const joint = this.joints[jointName];\n    if (joint) {\n        // Update joint parameters like origin, axis, limits, etc.\n        if (params.origin) {\n            joint.origin = params.origin;\n        }\n        if (params.axis) {\n            joint.axis.set(...params.axis);\n        }\n        if (params.limit) {\n            joint.limit.lower = params.limit.lower;\n            joint.limit.upper = params.limit.upper;\n        }\n        // Trigger a scene update or similar if needed\n        this.refreshScene(); // This method would need to be implemented based on your application's structure\n    }\n};\n\n/* Method to refresh the visual scene, to be defined based on how you're managing your THREE.js scene */\nURDFRobot.prototype.refreshScene = function () {\n    // Implementation depends on how the scene is managed, but you would typically mark the scene or object for update\n    // For example:\n    if (this.mesh) {\n        this.mesh.geometry.computeBoundingSphere();\n        this.mesh.geometry.computeVertexNormals();\n    }\n    // You might need to re-render the scene\n    render(); // This function would need to be defined in your global scope or passed in\n};\n\n// Extend URDFLoader to handle scene updates\nURDFLoader.prototype.applyUpdates = function () {\n    // This could be a method to apply pending updates or simply refresh parts of the model\n    if (window.model) {\n        window.model.refreshScene();\n    }\n};\nfunction render() {\n    renderer.render(scene, camera);\n    requestAnimationFrame(render);\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/js/controls/OrbitControls';\nimport URDFLoader from './URDFLoader.js';\n\n// urdf-viewer element\n// Loads and displays a 3D view of a URDF-formatted robot\n\n// Events\n// urdf-change: Fires when the URDF has finished loading and getting processed\n// urdf-processed: Fires when the URDF has finished loading and getting processed\n// geometry-loaded: Fires when all the geometry has been fully loaded\n// ignore-limits-change: Fires when the 'ignore-limits' attribute changes\n// angle-change: Fires when an angle changes\nexport default\nclass URDFViewer extends HTMLElement {\n\n    static get observedAttributes() {\n\n        return ['package', 'urdf', 'up', 'display-shadow', 'ambient-color', 'ignore-limits'];\n\n    }\n\n    get package() { return this.getAttribute('package') || ''; }\n    set package(val) { this.setAttribute('package', val); }\n\n    get urdf() { return this.getAttribute('urdf') || ''; }\n    set urdf(val) { this.setAttribute('urdf', val); }\n\n    get ignoreLimits() { return this.hasAttribute('ignore-limits') || false; }\n    set ignoreLimits(val) { val ? this.setAttribute('ignore-limits', val) : this.removeAttribute('ignore-limits'); }\n\n    get up() { return this.getAttribute('up') || '+Z'; }\n    set up(val) { this.setAttribute('up', val); }\n\n    get displayShadow() { return this.hasAttribute('display-shadow') || false; }\n    set displayShadow(val) { val ? this.setAttribute('display-shadow', '') : this.removeAttribute('display-shadow'); }\n\n    get ambientColor() { return this.getAttribute('ambient-color') || '#263238'; }\n    set ambientColor(val) { val ? this.setAttribute('ambient-color', val) : this.removeAttribute('ambient-color'); }\n\n    get autoRedraw() { return this.hasAttribute('auto-redraw') || false; }\n    set autoRedraw(val) { val ? this.setAttribute('auto-redraw', true) : this.removeAttribute('auto-redraw'); }\n\n    get noAutoRecenter() { return this.hasAttribute('no-auto-recenter') || false; }\n    set noAutoRecenter(val) { val ? this.setAttribute('no-auto-recenter', true) : this.removeAttribute('no-auto-recenter'); }\n\n    get angles() {\n\n        const angles = {};\n        if (this.robot) {\n\n            for (const name in this.robot.joints) angles[name] = this.robot.joints[name].angle;\n\n        }\n\n        return angles;\n\n    }\n    set angles(val) { this._setAngles(val); }\n\n    /* Lifecycle Functions */\n    constructor() {\n\n        super();\n\n        this._requestId = 0;\n        this._dirty = false;\n        this._loadScheduled = false;\n        this.robot = null;\n        this.loadMeshFunc = null;\n        this.urlModifierFunc = null;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n\n        const ambientLight = new THREE.HemisphereLight(this.ambientColor, '#000');\n        ambientLight.groundColor.lerp(ambientLight.color, 0.5);\n        ambientLight.intensity = 0.5;\n        ambientLight.position.set(0, 1, 0);\n        scene.add(ambientLight);\n\n        // Light setup\n        const dirLight = new THREE.DirectionalLight(0xffffff);\n        dirLight.position.set(4, 10, 1);\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.castShadow = true;\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setClearColor(0xffffff);\n        renderer.setClearAlpha(0);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.gammaOutput = true;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 2000);\n        camera.position.z = -10;\n\n        // World setup\n        const world = new THREE.Object3D();\n        scene.add(world);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(40, 40),\n            new THREE.ShadowMaterial({ side: THREE.DoubleSide, transparent: true, opacity: 0.5 })\n        );\n        plane.rotation.x = -Math.PI / 2;\n        plane.position.y = -0.5;\n        plane.receiveShadow = true;\n        plane.scale.set(10, 10, 10);\n        scene.add(plane);\n\n        // Controls setup\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.rotateSpeed = 2.0;\n        controls.zoomSpeed = 5;\n        controls.panSpeed = 2;\n        controls.enableZoom = true;\n        controls.enableDamping = false;\n        controls.maxDistance = 150;\n        controls.minDistance = 0.25;\n        controls.addEventListener('change', () => this.recenter());\n\n        this.scene = scene;\n        this.world = world;\n        this.renderer = renderer;\n        this.camera = camera;\n        this.controls = controls;\n        this.plane = plane;\n        this.directionalLight = dirLight;\n        this.ambientLight = ambientLight;\n\n        this._setUp(this.up);\n\n        const _renderLoop = () => {\n\n            if (this.parentNode) {\n\n                this.updateSize();\n\n                if (this._dirty || this.autoRedraw) {\n\n                    if (!this.noAutoRecenter) {\n\n                        this._updateEnvironment();\n                    }\n\n                    this.renderer.render(scene, camera);\n                    this._dirty = false;\n\n                }\n\n                // update controls after the environment in\n                // case the controls are retargeted\n                this.controls.update();\n\n            }\n            this._renderLoopId = requestAnimationFrame(_renderLoop);\n\n        };\n        _renderLoop();\n\n    }\n\n    connectedCallback() {\n\n        // Add our initialize styles for the element if they haven't\n        // been added yet\n        if (!this.constructor._styletag) {\n\n            const styletag = document.createElement('style');\n            styletag.innerHTML =\n            `\n                ${ this.tagName } { display: block; }\n                ${ this.tagName } canvas {\n                    width: 100%;\n                    height: 100%;\n                }\n            `;\n            document.head.appendChild(styletag);\n            this.constructor._styletag = styletag;\n\n        }\n\n        // add the renderer\n        if (this.childElementCount === 0) {\n\n            this.appendChild(this.renderer.domElement);\n\n        }\n\n        this.updateSize();\n        requestAnimationFrame(() => this.updateSize());\n\n    }\n\n    disconnectedCallback() {\n\n        cancelAnimationFrame(this._renderLoopId);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        this.recenter();\n\n        switch (attr) {\n\n            case 'package':\n            case 'urdf': {\n\n                this._scheduleLoad();\n                break;\n\n            }\n\n            case 'up': {\n\n                this._setUp(this.up);\n                break;\n\n            }\n\n            case 'ambient-color': {\n\n                this.ambientLight.color.set(this.ambientColor);\n                this.ambientLight.groundColor.set('#000').lerp(this.ambientLight.color, 0.5);\n                break;\n\n            }\n\n            case 'ignore-limits': {\n\n                this._setIgnoreLimits(this.ignoreLimits, true);\n                break;\n\n            }\n\n        }\n\n    }\n\n    /* Public API */\n    updateSize() {\n\n        const r = this.renderer;\n        const w = this.clientWidth;\n        const h = this.clientHeight;\n        const currsize = new THREE.Vector2();\n        r.getSize(currsize);\n\n        if (currsize.width !== w || currsize.height !== h) {\n\n            this.recenter();\n\n        }\n\n        r.setPixelRatio(window.devicePixelRatio);\n        r.setSize(w, h, false);\n\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n\n    }\n\n    redraw() {\n\n        this._dirty = true;\n    }\n\n    recenter() {\n\n        this._updateEnvironment();\n        this.redraw();\n\n    }\n\n    // Set the joint with jointName to\n    // angle in degrees\n    setAngle(jointName, angle) {\n\n        if (!this.robot) return;\n        if (!this.robot.joints[jointName]) return;\n\n        const origAngle = this.robot.joints[jointName].angle;\n        const newAngle = this.robot.setAngle(jointName, angle);\n        if (origAngle !== newAngle) {\n            this.redraw();\n        }\n\n        this.dispatchEvent(new CustomEvent('angle-change', { bubbles: true, cancelable: true, detail: jointName }));\n\n    }\n\n    setAngles(angles) {\n\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n    /* Private Functions */\n    // Updates the position of the plane to be at the\n    // lowest point below the robot and focuses the\n    // camera on the center of the scene\n    _updateEnvironment() {\n\n        if (!this.robot) return;\n\n        this.world.updateMatrixWorld();\n\n        const bbox = new THREE.Box3();\n        const temp = new THREE.Box3();\n\n        this.robot.traverse(c => {\n\n            const geometry = c.geometry;\n            if (geometry) {\n\n                if (geometry.boundingBox === null) {\n\n                    geometry.computeBoundingBox();\n\n                }\n\n                temp.copy(geometry.boundingBox);\n                temp.applyMatrix4(c.matrixWorld);\n\n                bbox.union(temp);\n\n            }\n\n        });\n\n        const center = bbox.getCenter(new THREE.Vector3());\n        this.controls.target.y = center.y;\n        this.plane.position.y = bbox.min.y - 1e-3;\n\n        const dirLight = this.directionalLight;\n        dirLight.castShadow = this.displayShadow;\n\n        if (this.displayShadow) {\n\n            // Update the shadow camera rendering bounds to encapsulate the\n            // model. We use the bounding sphere of the bounding box for\n            // simplicity -- this could be a tighter fit.\n            const sphere = bbox.getBoundingSphere(new THREE.Sphere());\n            const minmax = sphere.radius;\n            const cam = dirLight.shadow.camera;\n            cam.left = cam.bottom = -minmax;\n            cam.right = cam.top = minmax;\n\n            // Update the camera to focus on the center of the model so the\n            // shadow can encapsulate it\n            const offset = dirLight.position.clone().sub(dirLight.target.position);\n            dirLight.target.position.copy(center);\n            dirLight.position.copy(center).add(offset);\n\n            cam.updateProjectionMatrix();\n\n        }\n\n    }\n\n    _scheduleLoad() {\n\n        // if our current model is already what's being requested\n        // or has been loaded then early out\n        if (this._prevload === `${ this.package }|${ this.urdf }`) return;\n        this._prevload = `${ this.package }|${ this.urdf }`;\n\n        // if we're already waiting on a load then early out\n        if (this._loadScheduled) return;\n        this._loadScheduled = true;\n\n        if (this.robot) {\n\n            this.robot.traverse(c => c.dispose && c.dispose());\n            this.robot.parent.remove(this.robot);\n            this.robot = null;\n\n        }\n\n        requestAnimationFrame(() => {\n\n            this._loadUrdf(this.package, this.urdf);\n            this._loadScheduled = false;\n\n        });\n\n    }\n\n    // Watch the package and urdf field and load the robot model.\n    // This should _only_ be called from _scheduleLoad because that\n    // ensures the that current robot has been removed\n    _loadUrdf(pkg, urdf) {\n\n        this.dispatchEvent(new CustomEvent('urdf-change', { bubbles: true, cancelable: true, composed: true }));\n\n        if (urdf) {\n\n            // Keep track of this request and make\n            // sure it doesn't get overwritten by\n            // a subsequent one\n            this._requestId++;\n            const requestId = this._requestId;\n\n            const updateMaterials = mesh => {\n\n                mesh.traverse(c => {\n\n                    if (c.isMesh) {\n\n                        c.castShadow = true;\n                        c.receiveShadow = true;\n\n                        if (c.material) {\n\n                            const mats =\n                                (Array.isArray(c.material) ? c.material : [c.material])\n                                    .map(m => {\n\n                                        if (m instanceof THREE.MeshBasicMaterial) {\n\n                                            m = new THREE.MeshPhongMaterial();\n\n                                        }\n\n                                        if (m.map) {\n\n                                            m.map.encoding = THREE.GammaEncoding;\n\n                                        }\n\n                                        return m;\n\n                                    });\n                            c.material = mats.length === 1 ? mats[0] : mats;\n\n                        }\n\n                    }\n\n                });\n\n            };\n\n            if (pkg.includes(':') && (pkg.split(':')[1].substring(0, 2)) !== '//') {\n                // E.g. pkg = \"pkg_name: path/to/pkg_name, pk2: path2/to/pk2\"}\n\n                // Convert pkg(s) into a map. E.g.\n                // { \"pkg_name\": \"path/to/pkg_name\",\n                //   \"pk2\":      \"path2/to/pk2\"      }\n\n                pkg = pkg.split(',').reduce((map, value) => {\n\n                    const split = value.split(/:/).filter(x => !!x);\n                    const pkgName = split.shift().trim();\n                    const pkgPath = split.join(':').trim();\n                    map[pkgName] = pkgPath;\n\n                    return map;\n\n                }, {});\n            }\n\n            let robot = null;\n            const manager = new THREE.LoadingManager();\n            manager.onLoad = () => {\n\n                // If another request has come in to load a new\n                // robot, then ignore this one\n                if (this._requestId !== requestId) {\n\n                    robot.traverse(c => c.dispose && c.dispose());\n                    return;\n\n                }\n\n                this.robot = robot;\n                this.world.add(robot);\n                updateMaterials(robot);\n\n                this._setIgnoreLimits(this.ignoreLimits);\n\n                this.dispatchEvent(new CustomEvent('urdf-processed', { bubbles: true, cancelable: true, composed: true }));\n                this.dispatchEvent(new CustomEvent('geometry-loaded', { bubbles: true, cancelable: true, composed: true }));\n\n                this.recenter();\n\n            };\n\n            if (this.urlModifierFunc) {\n\n                manager.setURLModifier(this.urlModifierFunc);\n\n            }\n\n            new URDFLoader(manager).load(\n                urdf,\n\n                // onComplete\n                (model) => {\n                    robot = model;\n                },\n\n                // onProgress\n                (url, loaded, total) => {\n                    console.log(`${ url }; ${ loaded }/${ total }`);\n                },\n\n                // onError\n                (error) => {\n                    console.log(error);\n                },\n\n                // options\n                {\n\n                    packages: pkg,\n                    loadMeshCb: this.loadMeshFunc,\n                    fetchOptions: { mode: 'cors', credentials: 'same-origin' },\n\n                });\n\n        }\n\n    }\n\n    // Watch the coordinate frame and update the\n    // rotation of the scene to match\n    _setUp(up) {\n\n        if (!up) up = '+Z';\n        up = up.toUpperCase();\n        const sign = up.replace(/[^-+]/g, '')[0] || '+';\n        const axis = up.replace(/[^XYZ]/gi, '')[0] || 'Z';\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        if (axis === 'X') this.world.rotation.set(0, 0, sign === '+' ? HALFPI : -HALFPI);\n        if (axis === 'Z') this.world.rotation.set(sign === '+' ? -HALFPI : HALFPI, 0, 0);\n        if (axis === 'Y') this.world.rotation.set(sign === '+' ? 0 : PI, 0, 0);\n\n    }\n\n    // Updates the current robot's angles to ignore\n    // joint limits or not\n    _setIgnoreLimits(ignore, dispatch = false) {\n\n        if (this.robot) {\n\n            Object\n                .values(this.robot.joints)\n                .forEach(joint => {\n\n                    joint.ignoreLimits = ignore;\n                    joint.setAngle(joint.angle);\n\n                });\n\n        }\n\n        if (dispatch) {\n\n            this.dispatchEvent(new CustomEvent('ignore-limits-change', { bubbles: true, cancelable: true, composed: true }));\n\n        }\n\n    }\n\n};\n"],"names":["URDFColliderClone","_proto$clone","proto","Object","getPrototypeOf","_len","arguments","length","args","Array","_key","result","clone","call","apply","concat","isURDFCollider","makeURDFCollider","object","URDFLink","_Object3D","_this","_classCallCheck","_len2","_key2","_callSuper","isURDFLink","type","urdfNode","_inherits","_createClass","key","value","show","visible","hide","_delete","_this2","parent","remove","children","map","child","copy","source","recursive","_get","_getPrototypeOf","prototype","Object3D","URDFJoint","_Object3D2","_this3","_len3","_key3","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","get","_jointType","set","v","fill","isArray","_toConsumableArray","setAngle","setOffset","_len4","values","_key4","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","_URDFLink","_this4","_len5","_key5","isURDFRobot","urdfRobotNode","robotName","links","joints","_this5","traverse","c","name","jointName","joint","_len6","_key6","setAngles","angles","tempQuaternion","THREE","tempEuler","Euler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","undefined","rotation","setFromEuler","multiply","URDFLoader","manager","allowMeshBVH","DefaultLoadingManager","retryMap","load","urdf","onComplete","onProgress","onError","options","workingPath","LoaderUtils","extractUrlBase","urdfPath","resolveURL","errors","managerOnErrorDefault","managerOnProgressDefault","managerOnLoadDefault","model","bind","onLoad","that","url","retry","itemsLoaded","itemsTotal","partialErrors","keys","assign","itemStart","fetch","fetchOptions","then","res","text","data","parse","window","itemEnd","e","error","itemError","content","packages","loadMeshCb","defaultMeshLoader","parseVisual","parseCollision","linkMap","jointMap","materialMap","resolvePath","path","test","_path$replace$split","replace","_path$replace$split2","_slicedToArray","targetPkg","relPath","endsWith","_typeof","processUrdf","parser","DOMParser","parseFromString","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","forEach","m","processMaterial","l","isRoot","querySelector","processLink","j","processJoint","xyz","n","add","jointAxesHelper","AxesHelper","axisNode","axisXYZ","Vector3","normalize","link","target","visualNodes","vn","processLinkElement","collisionNodes","linkAxesHelper","node","matNodes","material","MeshPhongMaterial","rgba","color","setRGB","opacity","transparent","loader","TextureLoader","filename","filePath","linkObj","_this6","isCollisionNode","scale","primitiveModel","materialNode","geoType","scaleAttr","cb","err","Mesh","raycast","acceleratedRaycast","geometry","boundsTree","MeshBVH","x","y","z","BoxBufferGeometry","size","SphereBufferGeometry","radius","CylinderBufferGeometry","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene","urdfString","urdfDom","loadFromString","urdfDOM","updateProperties","params","origin","_this$origin","euler","_construct","_this$axis","updateTransform","_this$position","toArray","updateMatrix","updateMatrixWorld","refreshScene","viewer","updateScene","updateJoint","_joint$axis","computeBoundingSphere","computeVertexNormals","render","applyUpdates","renderer","camera","requestAnimationFrame","URDFViewer","_HTMLElement","_requestId","_dirty","_loadScheduled","loadMeshFunc","urlModifierFunc","Scene","ambientLight","HemisphereLight","ambientColor","groundColor","lerp","intensity","dirLight","DirectionalLight","shadow","mapSize","width","height","castShadow","WebGLRenderer","antialias","alpha","setClearColor","setClearAlpha","shadowMap","enabled","PCFSoftShadowMap","gammaOutput","PerspectiveCamera","world","plane","PlaneBufferGeometry","ShadowMaterial","side","DoubleSide","receiveShadow","controls","OrbitControls","domElement","rotateSpeed","zoomSpeed","panSpeed","enableZoom","enableDamping","maxDistance","minDistance","addEventListener","recenter","directionalLight","_setUp","up","_renderLoop","parentNode","updateSize","autoRedraw","noAutoRecenter","_updateEnvironment","update","_renderLoopId","setAttribute","hasAttribute","removeAttribute","_setAngles","connectedCallback","constructor","_styletag","styletag","document","createElement","innerHTML","tagName","head","appendChild","childElementCount","disconnectedCallback","cancelAnimationFrame","attributeChangedCallback","attr","oldval","newval","_scheduleLoad","_setIgnoreLimits","r","w","clientWidth","h","clientHeight","currsize","Vector2","getSize","setPixelRatio","devicePixelRatio","setSize","aspect","updateProjectionMatrix","redraw","origAngle","newAngle","dispatchEvent","CustomEvent","bubbles","cancelable","detail","bbox","Box3","temp","boundingBox","computeBoundingBox","applyMatrix4","matrixWorld","union","center","getCenter","displayShadow","sphere","getBoundingSphere","Sphere","minmax","cam","left","bottom","right","top","offset","sub","_prevload","dispose","_loadUrdf","pkg","composed","requestId","updateMaterials","isMesh","mats","MeshBasicMaterial","encoding","GammaEncoding","includes","substring","reduce","pkgName","shift","pkgPath","join","LoadingManager","setURLModifier","loaded","total","log","mode","credentials","toUpperCase","sign","HALFPI","ignore","dispatch","_wrapNativeSuper","HTMLElement"],"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"}