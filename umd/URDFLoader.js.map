{"version":3,"file":"URDFLoader.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js"],"sourcesContent":["import { Object3D, Vector3 } from 'three';\n\nconst _tempAxis = new Vector3();\n\nclass URDFBase extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.urdfNode = null;\n        this.urdfName = '';\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.urdfName = source.urdfName;\n\n        return this;\n\n    }\n\n}\n\nclass URDFCollider extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFCollider = true;\n        this.type = 'URDFCollider';\n\n    }\n\n}\n\nclass URDFVisual extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFVisual = true;\n        this.type = 'URDFVisual';\n\n    }\n\n}\n\nclass URDFLink extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n\n    }\n\n}\n\nclass URDFJoint extends URDFBase {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n        this.matrixWorldNeedsUpdate = true;\n        switch (v) {\n\n            case 'fixed':\n                this.jointValue = [];\n                break;\n\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = new Array(1).fill(0);\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue[0];\n\n    }\n\n    constructor(...args) {\n\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = new Vector3(1, 0, 0);\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n\n        this.mimicJoints = [];\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.jointType = source.jointType;\n        this.axis = source.axis.clone();\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = [...source.jointValue];\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        this.mimicJoints = [...source.mimicJoints];\n\n        return this;\n\n    }\n\n    /* Public Functions */\n    /**\n     * @param {...number|null} values The joint value components to set, optionally null for no-op\n     * @returns {boolean} Whether the invocation of this function resulted in an actual change to the joint value\n     */\n    setJointValue(...values) {\n\n        // Parse all incoming values into numbers except null, which we treat as a no-op for that value component.\n        values = values.map(v => v === null ? null : parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        let didUpdate = false;\n\n        this.mimicJoints.forEach(joint => {\n\n            didUpdate = joint.updateFromMimickedJoint(...values) || didUpdate;\n\n        });\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n\n                return didUpdate;\n\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) return didUpdate;\n                if (angle === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.quaternion\n                    .setFromAxisAngle(this.axis, angle)\n                    .premultiply(this.origQuaternion);\n\n                if (this.jointValue[0] !== angle) {\n\n                    this.jointValue[0] = angle;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'prismatic': {\n\n                let pos = values[0];\n                if (pos == null) return didUpdate;\n                if (pos === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits) {\n\n                    pos = Math.min(this.limit.upper, pos);\n                    pos = Math.max(this.limit.lower, pos);\n\n                }\n\n                this.position.copy(this.origPosition);\n                _tempAxis.copy(this.axis).applyEuler(this.rotation);\n                this.position.addScaledVector(_tempAxis, pos);\n\n                if (this.jointValue[0] !== pos) {\n\n                    this.jointValue[0] = pos;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return didUpdate;\n\n    }\n\n}\n\nclass URDFMimicJoint extends URDFJoint {\n\n    constructor(...args) {\n\n        super(...args);\n        this.type = 'URDFMimicJoint';\n        this.mimicJoint = null;\n        this.offset = 0;\n        this.multiplier = 1;\n\n    }\n\n    updateFromMimickedJoint(...values) {\n\n        const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n        return super.setJointValue(...modifiedValues);\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.mimicJoint = source.mimicJoint;\n        this.offset = source.offset;\n        this.multiplier = source.multiplier;\n\n        return this;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n        this.colliders = null;\n        this.visual = null;\n        this.frames = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n        this.colliders = {};\n        this.visual = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.urdfName in source.joints) {\n\n                this.joints[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFLink && c.urdfName in source.links) {\n\n                this.links[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFCollider && c.urdfName in source.colliders) {\n\n                this.colliders[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFVisual && c.urdfName in source.visual) {\n\n                this.visual[c.urdfName] = c;\n\n            }\n\n        });\n\n        // Repair mimic joint references once we've re-accumulated all our joint data\n        for (const joint in this.joints) {\n            this.joints[joint].mimicJoints = this.joints[joint].mimicJoints.map((mimicJoint) => this.joints[mimicJoint.name]);\n        }\n\n        this.frames = {\n            ...this.colliders,\n            ...this.visual,\n            ...this.links,\n            ...this.joints,\n        };\n\n        return this;\n\n    }\n\n    getFrame(name) {\n\n        return this.frames[name];\n\n    }\n\n    setJointValue(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setJointValue(...angle);\n\n        }\n\n        return false;\n    }\n\n    setJointValues(values) {\n\n        let didChange = false;\n        for (const name in values) {\n\n            const value = values[name];\n            if (Array.isArray(value)) {\n\n                didChange = this.setJointValue(name, ...value) || didChange;\n\n            } else {\n\n                didChange = this.setJointValue(name, value) || didChange;\n\n            }\n\n        }\n\n        return didChange;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };","import * as THREE from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, URDFCollider, URDFVisual, URDFMimicJoint } from './URDFClasses.js';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\nclass URDFLoader {\n\n    constructor(manager) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.loadMeshCb = this.defaultMeshLoader.bind(this);\n        this.parseVisual = true;\n        this.parseCollision = false;\n        this.packages = '';\n        this.workingPath = '';\n        this.fetchOptions = {};\n\n    }\n\n    /* Public API */\n    loadAsync(urdf) {\n\n        return new Promise((resolve, reject) => {\n\n            this.load(urdf, resolve, null, reject);\n\n        });\n\n    }\n\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        manager.itemStart(urdfPath);\n\n        fetch(urdfPath, this.fetchOptions)\n            .then(res => {\n\n                if (res.ok) {\n\n                    if (onProgress) {\n\n                        onProgress(null);\n\n                    }\n                    return res.text();\n\n                } else {\n\n                    throw new Error(`URDFLoader: Failed to load url '${ urdfPath }' with error code ${ res.status } : ${ res.statusText }.`);\n\n                }\n\n            })\n            .then(data => {\n\n                if (this.workingPath === '') {\n\n                    this.workingPath = workingPath;\n\n                }\n\n                const model = this.parse(data);\n                onComplete(model);\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                if (onError) {\n\n                    onError(e);\n\n                } else {\n\n                    console.error('URDFLoader: Error loading file.', e);\n\n                }\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content) {\n\n        const packages = this.packages;\n        const loadMeshCb = this.loadMeshCb;\n        const parseVisual = this.parseVisual;\n        const parseCollision = this.parseCollision;\n        const workingPath = this.workingPath;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (packages instanceof Function) {\n\n                return packages(targetPkg) + '/' + relPath;\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${ targetPkg } not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        function processUrdf(data) {\n\n            let children;\n            if (data instanceof Document) {\n\n                children = [ ...data.children ];\n\n            } else if (data instanceof Element) {\n\n                children = [ data ];\n\n            } else {\n\n                const parser = new DOMParser();\n                const urdf = parser.parseFromString(data, 'text/xml');\n                children = [ ...urdf.children ];\n\n            }\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot(robotNode);\n\n        }\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [ ...robot.children ];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial(m);\n\n            });\n\n            // Create the <link> map\n            const visualMap = {};\n            const colliderMap = {};\n            links.forEach(l => {\n\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${ name }\"]`) === null;\n                linkMap[name] = processLink(l, visualMap, colliderMap, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint(j);\n\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n            obj.colliders = colliderMap;\n            obj.visual = visualMap;\n\n            // Link up mimic joints\n            const jointList = Object.values(jointMap);\n            jointList.forEach(j => {\n\n                if (j instanceof URDFMimicJoint) {\n\n                    jointMap[j.mimicJoint].mimicJoints.push(j);\n\n                }\n\n            });\n\n            // Detect infinite loops of mimic joints\n            jointList.forEach(j => {\n\n                const uniqueJoints = new Set();\n                const iterFunction = joint => {\n\n                    if (uniqueJoints.has(joint)) {\n\n                        throw new Error('URDFLoader: Detected an infinite loop of mimic joints.');\n\n                    }\n\n                    uniqueJoints.add(joint);\n                    joint.mimicJoints.forEach(j => {\n\n                        iterFunction(j);\n\n                    });\n\n                };\n\n                iterFunction(j);\n            });\n\n            obj.frames = {\n                ...colliderMap,\n                ...visualMap,\n                ...linkMap,\n                ...jointMap,\n            };\n\n            return obj;\n\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n\n            const children = [ ...joint.children ];\n            const jointType = joint.getAttribute('type');\n\n            let obj;\n\n            const mimicTag = children.find(n => n.nodeName.toLowerCase() === 'mimic');\n            if (mimicTag) {\n\n                obj = new URDFMimicJoint();\n                obj.mimicJoint = mimicTag.getAttribute('joint');\n                obj.multiplier = parseFloat(mimicTag.getAttribute('multiplier') || 1.0);\n                obj.offset = parseFloat(mimicTag.getAttribute('offset') || 0.0);\n\n                console.log('MIMIC: ', obj);\n\n            } else {\n\n                obj = new URDFJoint();\n\n            }\n\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.urdfName = obj.name;\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                } else if (type === 'child') {\n\n                    child = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'parent') {\n\n                    parent = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'limit') {\n\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n                }\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n\n            if (axisNode) {\n\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n\n            }\n\n            return obj;\n\n        }\n\n        // Process the <link> nodes\n        function processLink(link, visualMap, colliderMap, target = null) {\n\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [ ...link.children ];\n            target.name = link.getAttribute('name');\n            target.urdfName = target.name;\n            target.urdfNode = link;\n\n            if (parseVisual) {\n\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => {\n\n                    const v = processLinkElement(vn, materialMap);\n                    target.add(v);\n\n                    if (vn.hasAttribute('name')) {\n\n                        const name = vn.getAttribute('name');\n                        v.name = name;\n                        v.urdfName = name;\n                        visualMap[name] = v;\n\n                    }\n\n                });\n\n            }\n\n            if (parseCollision) {\n\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(cn => {\n\n                    const c = processLinkElement(cn);\n                    target.add(c);\n\n                    if (cn.hasAttribute('name')) {\n\n                        const name = cn.getAttribute('name');\n                        c.name = name;\n                        c.urdfName = name;\n                        colliderMap[name] = c;\n\n                    }\n\n                });\n\n            }\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [ ...node.children ];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n                    material.depthWrite = !material.transparent;\n\n                } else if (type === 'texture') {\n\n                    // The URDF spec does not require that the <texture/> tag include\n                    // a filename attribute so skip loading the texture if not provided.\n                    const filename = n.getAttribute('filename');\n                    if (filename) {\n\n                        const loader = new THREE.TextureLoader(manager);\n                        const filePath = resolvePath(filename);\n                        material.map = loader.load(filePath);\n                        material.map.colorSpace = THREE.SRGBColorSpace;\n\n                    }\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            const children = [ ...vn.children ];\n            let material = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial(materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            const group = isCollisionNode ? new URDFCollider() : new URDFVisual();\n            group.urdfNode = vn;\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) {\n\n                                const scale = processTuple(scaleAttr);\n                                group.scale.set(scale[0], scale[1], scale[2]);\n\n                            }\n\n                            loadMeshCb(filePath, manager, (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n\n                                    }\n\n                                    // We don't expect non identity rotations or positions. In the case of\n                                    // COLLADA files the model might come in with a custom scale for unit\n                                    // conversion.\n                                    obj.position.set(0, 0, 0);\n                                    obj.quaternion._x = 0;\n                                    obj.quaternion._y = 0;\n                                    obj.quaternion._z = 0;\n                                    obj.quaternion._w = 0;\n                                    group.add(obj);\n\n                                }\n\n                            });\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'sphere') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'cylinder') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        group.add(primitiveModel);\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    const xyz = processTuple(n.getAttribute('xyz'));\n                    const rpy = processTuple(n.getAttribute('rpy'));\n\n                    group.position.set(xyz[0], xyz[1], xyz[2]);\n                    group.rotation.set(0, 0, 0);\n                    applyRotation(group, rpy);\n\n                }\n\n            });\n\n            return group;\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl$/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae$/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\n\n        }\n\n    }\n\n};"],"names":["_tempAxis","Vector3","URDFBase","_Object3D","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","urdfNode","urdfName","_inherits","_createClass","key","value","copy","source","recursive","_get","_getPrototypeOf","prototype","call","Object3D","URDFCollider","_URDFBase","_this2","_len2","_key2","isURDFCollider","type","URDFVisual","_URDFBase2","_this3","_len3","_key3","isURDFVisual","URDFLink","_URDFBase3","_this4","_len4","_key4","isURDFLink","URDFJoint","_URDFBase4","_this5","_len5","_key5","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","mimicJoints","get","_jointType","set","v","matrixWorldNeedsUpdate","fill","clone","_toConsumableArray","setJointValue","_len6","values","_key6","map","parseFloat","position","quaternion","didUpdate","forEach","joint","updateFromMimickedJoint","apply","angle","Math","min","max","setFromAxisAngle","premultiply","pos","applyEuler","rotation","addScaledVector","console","warn","URDFMimicJoint","_URDFJoint","_this6","_len7","_key7","mimicJoint","offset","multiplier","_this7","_get2","_len8","_key8","modifiedValues","x","URDFRobot","_URDFLink","_this8","_len9","_key9","isURDFRobot","urdfRobotNode","robotName","links","joints","colliders","visual","frames","_this9","traverse","c","name","_objectSpread","getFrame","jointName","_len10","_key10","setJointValues","didChange","isArray","tempQuaternion","THREE","Quaternion","tempEuler","Euler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","undefined","setFromEuler","multiply","URDFLoader","manager","DefaultLoadingManager","loadMeshCb","defaultMeshLoader","bind","parseVisual","parseCollision","packages","workingPath","fetchOptions","loadAsync","urdf","Promise","resolve","reject","load","onComplete","onProgress","onError","LoaderUtils","extractUrlBase","urdfPath","resolveURL","itemStart","fetch","then","res","ok","text","Error","status","statusText","data","model","parse","itemEnd","e","error","itemError","content","linkMap","jointMap","materialMap","resolvePath","path","test","_path$replace$split","replace","_path$replace$split2","_slicedToArray","targetPkg","relPath","endsWith","Function","_typeof","processUrdf","children","Document","Element","parser","DOMParser","parseFromString","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","m","processMaterial","visualMap","colliderMap","l","isRoot","querySelector","processLink","j","processJoint","jointList","Object","push","uniqueJoints","Set","iterFunction","has","add","mimicTag","find","n","log","parent","child","xyz","axisNode","axisXYZ","normalize","link","target","visualNodes","vn","processLinkElement","hasAttribute","collisionNodes","cn","node","matNodes","material","MeshPhongMaterial","rgba","color","setRGB","opacity","transparent","depthWrite","filename","loader","TextureLoader","filePath","colorSpace","SRGBColorSpace","isCollisionNode","materialNode","group","geoType","scaleAttr","scale","err","Mesh","_x","_y","_z","_w","primitiveModel","geometry","BoxGeometry","size","SphereGeometry","radius","CylinderGeometry","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene"],"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"}