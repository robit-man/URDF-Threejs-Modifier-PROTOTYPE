{"version":3,"file":"URDFLoader.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    show() {\n        this.visible = true;\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    delete() {\n        this.parent.remove(this);\n        this.children.map(child => {\n            this.remove(child);\n        });\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n","import * as THREE from 'three';\nimport { AxesHelper } from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, makeURDFCollider } from './URDFClasses.js';\nimport { MeshBVH, acceleratedRaycast } from 'three-mesh-bvh';\nimport Ammo from 'ammojs3';\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\nfunction processTuple(val) {\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n}\n\nfunction applyRotation(obj, rpy, additive = false) {\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n}\n\nclass URDFLoader {\n    constructor(manager, allowMeshBVH = false) {\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.allowMeshBVH = allowMeshBVH;\n        this.retryMap = {};\n        this.physicsWorld = null;\n        this.physicsObjects = [];\n        this.tempTransform = null;\n        this.Ammo = null;\n    }\n\n    load(urdf, onComplete, onProgress, onError, options) {\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n        const errors = {};\n        let managerOnErrorDefault = function () {};\n        let managerOnProgressDefault = function () {};\n        let managerOnLoadDefault = function () {};\n        let model;\n\n        if (manager.onError) {\n            managerOnErrorDefault = manager.onProgress.bind(manager);\n        }\n\n        if (manager.onProgress) {\n            managerOnProgressDefault = manager.onProgress.bind(manager);\n        }\n\n        if (manager.onLoad) {\n            managerOnLoadDefault = manager.onLoad.bind(manager);\n        }\n\n        const that = this;\n        manager.onError = function (url) {\n            errors[url] = 'Error in loading resource';\n            if (onError) {\n                onError({\n                    url,\n                    retry: that.retryMap[url],\n                });\n            }\n            managerOnErrorDefault(url);\n        };\n\n        manager.onProgress = function (url, itemsLoaded, itemsTotal) {\n            if (onProgress) {\n                onProgress(url, itemsLoaded, itemsTotal);\n            }\n            managerOnProgressDefault(url, itemsLoaded, itemsTotal);\n        };\n\n        manager.onLoad = function () {\n            if (onComplete) {\n                const partialErrors = Object.keys(errors).length === 0 ? undefined : errors;\n                onComplete(model, partialErrors);\n            }\n            managerOnLoadDefault();\n        };\n\n        options = Object.assign({\n            workingPath,\n        }, options);\n\n        manager.itemStart(urdfPath);\n        fetch(urdfPath, options.fetchOptions)\n            .then(res => res.text())\n            .then(data => {\n                model = this.parse(data, options);\n                window.model = model;\n                manager.itemEnd(urdfPath);\n            })\n            .catch(e => {\n                console.error('URDFLoader: Error parsing file.', e);\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n            });\n    }\n\n    parse(content, options = {}) {\n        const packages = options.packages || '';\n        const loadMeshCb = options.loadMeshCb || this.defaultMeshLoader.bind(this);\n        const workingPath = options.workingPath || '';\n        const parseVisual = ('parseVisual' in options) ? options.parseVisual : true;\n        const parseCollision = options.parseCollision || false;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        function resolvePath(path) {\n            if (!/^package:\\/\\//.test(path)) {\n                return workingPath ? workingPath + path : path;\n            }\n\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n            if (typeof packages === 'string') {\n                if (packages.endsWith(targetPkg)) {\n                    return packages + '/' + relPath;\n                } else {\n                    return packages + '/' + targetPkg + '/' + relPath;\n                }\n            } else if (typeof packages === 'object') {\n                if (targetPkg in packages) {\n                    return packages[targetPkg] + '/' + relPath;\n                } else {\n                    console.error(`URDFLoader : ${targetPkg} not found in provided package list.`);\n                    return null;\n                }\n            }\n        }\n\n        const processUrdf = data => {\n            const parser = new DOMParser();\n            const urdf = parser.parseFromString(data, 'text/xml');\n            const children = [...urdf.children];\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot.call(this, robotNode);\n        };\n\n        function processRobot(robot) {\n            const robotNodes = [...robot.children];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            materials.forEach(m => {\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial.call(this, m);\n            });\n\n            links.forEach(l => {\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${name}\"]`) === null;\n                linkMap[name] = processLink.call(this, l, isRoot ? obj : null);\n            });\n\n            joints.forEach(j => {\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint.call(this, j);\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n\n            return obj;\n        }\n\n        function processJoint(joint) {\n            const children = [...joint.children];\n            const jointType = joint.getAttribute('type');\n            const obj = new URDFJoint();\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            children.forEach(n => {\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n                } else if (type === 'child') {\n                    child = linkMap[n.getAttribute('link')];\n                } else if (type === 'parent') {\n                    parent = linkMap[n.getAttribute('link')];\n                } else if (type === 'limit') {\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n                }\n            });\n\n            if (parent && parent instanceof THREE.Object3D) {\n                parent.add(obj);\n            }\n            if (child && child instanceof THREE.Object3D) {\n                obj.add(child);\n            }\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n            const jointAxesHelper = new AxesHelper(0.5);\n            obj.add(jointAxesHelper);\n\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n            if (axisNode) {\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n            }\n\n            return obj;\n        }\n\n        function processLink(link, target = null) {\n            if (target === null) {\n                target = new URDFLink();\n            }\n\n            const children = [...link.children];\n            target.name = link.getAttribute('name');\n            target.urdfNode = link;\n\n            if (parseVisual) {\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => processLinkElement.call(this, vn, target, materialMap));\n            }\n            if (parseCollision) {\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(vn => processLinkElement.call(this, vn, target));\n            }\n\n            const linkAxesHelper = new AxesHelper(0.5);\n            target.add(linkAxesHelper);\n\n            this.addPhysicsToLink(target);\n\n            return target;\n        }\n\n        function processMaterial(node) {\n            const matNodes = [...node.children];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n                    const rgba = n.getAttribute('rgba').split(/\\s/g).map(v => parseFloat(v));\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n                } else if (type === 'texture') {\n                    const loader = new THREE.TextureLoader(manager);\n                    const filename = n.getAttribute('filename');\n                    const filePath = resolvePath(filename);\n                    const onError = () => {\n                        this.retryMap[filePath] = () => loader.load(filePath, () => null, () => null, onError);\n                    };\n                    material.map = loader.load(filePath, () => null, () => null, onError);\n                }\n            });\n\n            return material;\n        }\n\n        function processLinkElement(vn, linkObj, materialMap = {}) {\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n            let scale = [1, 1, 1];\n\n            const children = [...vn.children];\n            let material = null;\n            let primitiveModel = null;\n\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n                    material = materialMap[name];\n                } else {\n                    material = processMaterial.call(this, materialNode);\n                }\n            } else {\n                material = new THREE.MeshPhongMaterial();\n            }\n\n            children.forEach(n => {\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        if (filePath !== null) {\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) scale = processTuple(scaleAttr);\n\n                            const cb = (obj, err) => {\n                                if (err) {\n                                    console.error('URDFLoader: Error loading mesh.', err);\n                                    this.retryMap[filePath] = () => loadMeshCb(filePath, manager, cb);\n                                } else if (obj) {\n                                    if (obj instanceof THREE.Mesh) {\n                                        obj.material = material;\n                                        if (this.allowMeshBVH) {\n                                            obj.raycast = acceleratedRaycast;\n                                            obj.geometry.boundsTree = new MeshBVH(obj.geometry);\n                                        }\n                                    }\n\n                                    linkObj.add(obj);\n                                    obj.position.set(xyz[0], xyz[1], xyz[2]);\n                                    obj.rotation.set(0, 0, 0);\n\n                                    obj.scale.x *= scale[0];\n                                    obj.scale.y *= scale[1];\n                                    obj.scale.z *= scale[2];\n\n                                    applyRotation(obj, rpy);\n\n                                    if (isCollisionNode) {\n                                        makeURDFCollider(obj);\n                                    }\n                                }\n                            };\n                            loadMeshCb(filePath, manager, cb);\n                        }\n                    } else if (geoType === 'box') {\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n                        linkObj.add(primitiveModel);\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        if (isCollisionNode) {\n                            makeURDFCollider(primitiveModel);\n                        }\n                    } else if (geoType === 'sphere') {\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n                            makeURDFCollider(primitiveModel);\n                        }\n                    } else if (geoType === 'cylinder') {\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n                            makeURDFCollider(primitiveModel);\n                        }\n                    }\n                } else if (type === 'origin') {\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n                }\n            });\n\n            if (primitiveModel) {\n                applyRotation(primitiveModel, rpy, true);\n                primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\n            }\n        }\n\n        return processUrdf(content);\n    }\n\n    defaultMeshLoader(path, manager, done) {\n        if (/\\.stl(?:\\?|$)/i.test(path)) {\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n        } else if (/\\.dae(?:\\?|$)/i.test(path)) {\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n        } else {\n            console.warn(`URDFLoader: Could not load model at ${path}.\\nNo loader available`);\n        }\n    }\n\n    addPhysicsToLink(link) {\n        if (!this.Ammo) return;\n\n        const shape = new this.Ammo.btBoxShape(new this.Ammo.btVector3(0.5, 0.5, 0.5));\n        const transform = new this.Ammo.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new this.Ammo.btVector3(link.position.x, link.position.y, link.position.z));\n\n        const mass = 1;\n        const localInertia = new this.Ammo.btVector3(0, 0, 0);\n        shape.calculateLocalInertia(mass, localInertia);\n\n        const motionState = new this.Ammo.btDefaultMotionState(transform);\n        const rbInfo = new this.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n        const body = new this.Ammo.btRigidBody(rbInfo);\n\n        this.physicsWorld.addRigidBody(body);\n        this.physicsObjects.push({ threeObject: link, body });\n    }\n\n    initPhysics() {\n        Ammo().then((AmmoLib) => {\n            this.Ammo = AmmoLib;\n\n            const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n            const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n            const overlappingPairCache = new AmmoLib.btDbvtBroadphase();\n            const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n            this.physicsWorld = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);\n            this.physicsWorld.setGravity(new AmmoLib.btVector3(0, -9.82, 0));\n\n            this.physicsObjects = [];\n            this.tempTransform = new AmmoLib.btTransform();\n\n            this.initGround();\n        });\n    }\n\n    initGround() {\n        if (!this.Ammo) return;\n\n        const groundShape = new this.Ammo.btBoxShape(new this.Ammo.btVector3(50, 1, 50));\n        const groundTransform = new this.Ammo.btTransform();\n        groundTransform.setIdentity();\n        groundTransform.setOrigin(new this.Ammo.btVector3(0, -1, 0));\n\n        const mass = 0;\n        const localInertia = new this.Ammo.btVector3(0, 0, 0);\n        const myMotionState = new this.Ammo.btDefaultMotionState(groundTransform);\n        const rbInfo = new this.Ammo.btRigidBodyConstructionInfo(mass, myMotionState, groundShape, localInertia);\n        const body = new this.Ammo.btRigidBody(rbInfo);\n\n        this.physicsWorld.addRigidBody(body);\n    }\n\n    updatePhysics() {\n        if (!this.physicsWorld) return;\n\n        const deltaTime = 1 / 60;\n        this.physicsWorld.stepSimulation(deltaTime, 10);\n\n        this.physicsObjects.forEach(obj => {\n            const { threeObject, body } = obj;\n            const ms = body.getMotionState();\n            if (ms) {\n                ms.getWorldTransform(this.tempTransform);\n                const p = this.tempTransform.getOrigin();\n                const q = this.tempTransform.getRotation();\n                threeObject.position.set(p.x(), p.y(), p.z());\n                threeObject.quaternion.set(q.x(), q.y(), q.z(), q.w());\n            }\n        });\n    }\n}\n\nURDFLoader.prototype.parseFromString = function(urdfString, options) {\n    try {\n        const parser = new DOMParser();\n        const urdfDom = parser.parseFromString(urdfString, \"text/xml\");\n\n        const model = this.parse(urdfDom, options);\n\n        if (options.onComplete) {\n            options.onComplete(model);\n        }\n    } catch (error) {\n        if (options.onError) {\n            options.onError(error);\n        }\n    }\n};\n\nURDFLoader.prototype.loadFromString = function(urdfString, onComplete) {\n    try {\n        const parser = new DOMParser();\n        const urdfDOM = parser.parseFromString(urdfString, \"text/xml\");\n        const model = this.parse(urdfDOM, {});\n        if (onComplete) {\n            onComplete(model);\n        }\n    } catch (error) {\n        console.error('Failed to parse URDF string:', error);\n    }\n};\n\nURDFLoader.prototype.applyUpdates = function () {\n    if (window.model) {\n        window.model.refreshScene();\n    }\n};\n\nfunction animate(loader, renderer, scene, camera) {\n    requestAnimationFrame(() => animate(loader, renderer, scene, camera));\n\n    loader.updatePhysics();\n    renderer.render(scene, camera);\n}\n\nconst loader = new URDFLoader();\nloader.initPhysics();\n\nconst urdfPath = '/urdf/dropbear/urdf/dropbear.urdf';  // Update this with the actual path to your URDF file\nloader.load(urdfPath, (robot) => {\n    if (!robot) {\n        console.error('Failed to load URDF model.');\n        return;\n    }\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    scene.add(robot);\n    robot.traverse(link => {\n        if (link.isURDFLink) {\n            loader.addPhysicsToLink(link);\n        }\n    });\n\n    camera.position.z = 5;\n\n    const ballGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n    const ballMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n    const ballMesh = new THREE.Mesh(ballGeometry, ballMaterial);\n    ballMesh.position.set(0, 5, 0);\n    scene.add(ballMesh);\n\n    const ballShape = new loader.Ammo.btSphereShape(0.5);\n    const ballTransform = new loader.Ammo.btTransform();\n    ballTransform.setIdentity();\n    ballTransform.setOrigin(new loader.Ammo.btVector3(ballMesh.position.x, ballMesh.position.y, ballMesh.position.z));\n\n    const ballMass = 1;\n    const ballLocalInertia = new loader.Ammo.btVector3(0, 0, 0);\n    ballShape.calculateLocalInertia(ballMass, ballLocalInertia);\n\n    const ballMotionState = new loader.Ammo.btDefaultMotionState(ballTransform);\n    const ballRbInfo = new loader.Ammo.btRigidBodyConstructionInfo(ballMass, ballMotionState, ballShape, ballLocalInertia);\n    const ballBody = new loader.Ammo.btRigidBody(ballRbInfo);\n\n    loader.physicsWorld.addRigidBody(ballBody);\n    loader.physicsObjects.push({ threeObject: ballMesh, body: ballBody });\n\n    animate(loader, renderer, scene, camera);\n});\n"],"names":["URDFColliderClone","_proto$clone","proto","Object","getPrototypeOf","_len","arguments","length","args","Array","_key","result","clone","call","apply","concat","isURDFCollider","makeURDFCollider","object","URDFLink","_Object3D","_this","_classCallCheck","_len2","_key2","_callSuper","isURDFLink","type","urdfNode","_inherits","_createClass","key","value","show","visible","hide","_delete","_this2","parent","remove","children","map","child","copy","source","recursive","_get","_getPrototypeOf","prototype","Object3D","URDFJoint","_Object3D2","_this3","_len3","_key3","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","get","_jointType","set","v","fill","isArray","_toConsumableArray","setAngle","setOffset","_len4","values","_key4","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","_URDFLink","_this4","_len5","_key5","isURDFRobot","urdfRobotNode","robotName","links","joints","_this5","traverse","c","name","jointName","joint","_len6","_key6","setAngles","angles","tempQuaternion","THREE","tempEuler","Euler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","undefined","rotation","setFromEuler","multiply","URDFLoader","manager","allowMeshBVH","DefaultLoadingManager","retryMap","physicsWorld","physicsObjects","tempTransform","Ammo","load","urdf","onComplete","onProgress","onError","options","workingPath","LoaderUtils","extractUrlBase","urdfPath","resolveURL","errors","managerOnErrorDefault","managerOnProgressDefault","managerOnLoadDefault","model","bind","onLoad","that","url","retry","itemsLoaded","itemsTotal","partialErrors","keys","assign","itemStart","fetch","fetchOptions","then","res","text","data","parse","window","itemEnd","e","error","itemError","content","packages","loadMeshCb","defaultMeshLoader","parseVisual","parseCollision","linkMap","jointMap","materialMap","resolvePath","path","test","_path$replace$split","replace","_path$replace$split2","_slicedToArray","targetPkg","relPath","endsWith","_typeof","processUrdf","parser","DOMParser","parseFromString","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","forEach","m","processMaterial","l","isRoot","querySelector","processLink","j","processJoint","xyz","n","add","jointAxesHelper","AxesHelper","axisNode","axisXYZ","Vector3","normalize","link","target","visualNodes","vn","processLinkElement","collisionNodes","linkAxesHelper","addPhysicsToLink","node","matNodes","material","MeshPhongMaterial","rgba","color","setRGB","opacity","transparent","loader","TextureLoader","filename","filePath","linkObj","_this6","isCollisionNode","scale","primitiveModel","materialNode","geoType","scaleAttr","cb","err","Mesh","raycast","acceleratedRaycast","geometry","boundsTree","MeshBVH","x","y","z","BoxBufferGeometry","size","SphereBufferGeometry","radius","CylinderBufferGeometry","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene","shape","btBoxShape","btVector3","transform","btTransform","setIdentity","setOrigin","mass","localInertia","calculateLocalInertia","motionState","btDefaultMotionState","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","push","threeObject","initPhysics","_this7","AmmoLib","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","overlappingPairCache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","setGravity","initGround","groundShape","groundTransform","myMotionState","updatePhysics","_this8","deltaTime","stepSimulation","ms","getMotionState","getWorldTransform","p","getOrigin","q","getRotation","w","urdfString","urdfDom","loadFromString","urdfDOM","applyUpdates","refreshScene","animate","renderer","camera","requestAnimationFrame","render","Scene","PerspectiveCamera","innerWidth","innerHeight","WebGLRenderer","setSize","document","appendChild","domElement","ballGeometry","SphereGeometry","ballMaterial","ballMesh","ballShape","btSphereShape","ballTransform","ballMass","ballLocalInertia","ballMotionState","ballRbInfo","ballBody"],"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"}