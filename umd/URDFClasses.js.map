{"version":3,"file":"URDFClasses.js","sources":["../src/URDFClasses.js"],"sourcesContent":["import { Object3D, Vector3 } from 'three';\n\nconst _tempAxis = new Vector3();\n\nclass URDFBase extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.urdfNode = null;\n        this.urdfName = '';\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.urdfName = source.urdfName;\n\n        return this;\n\n    }\n\n}\n\nclass URDFCollider extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFCollider = true;\n        this.type = 'URDFCollider';\n\n    }\n\n}\n\nclass URDFVisual extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFVisual = true;\n        this.type = 'URDFVisual';\n\n    }\n\n}\n\nclass URDFLink extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n\n    }\n\n}\n\nclass URDFJoint extends URDFBase {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n        this.matrixWorldNeedsUpdate = true;\n        switch (v) {\n\n            case 'fixed':\n                this.jointValue = [];\n                break;\n\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = new Array(1).fill(0);\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue[0];\n\n    }\n\n    constructor(...args) {\n\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = new Vector3(1, 0, 0);\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n\n        this.mimicJoints = [];\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.jointType = source.jointType;\n        this.axis = source.axis.clone();\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = [...source.jointValue];\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        this.mimicJoints = [...source.mimicJoints];\n\n        return this;\n\n    }\n\n    /* Public Functions */\n    /**\n     * @param {...number|null} values The joint value components to set, optionally null for no-op\n     * @returns {boolean} Whether the invocation of this function resulted in an actual change to the joint value\n     */\n    setJointValue(...values) {\n\n        // Parse all incoming values into numbers except null, which we treat as a no-op for that value component.\n        values = values.map(v => v === null ? null : parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        let didUpdate = false;\n\n        this.mimicJoints.forEach(joint => {\n\n            didUpdate = joint.updateFromMimickedJoint(...values) || didUpdate;\n\n        });\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n\n                return didUpdate;\n\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) return didUpdate;\n                if (angle === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.quaternion\n                    .setFromAxisAngle(this.axis, angle)\n                    .premultiply(this.origQuaternion);\n\n                if (this.jointValue[0] !== angle) {\n\n                    this.jointValue[0] = angle;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'prismatic': {\n\n                let pos = values[0];\n                if (pos == null) return didUpdate;\n                if (pos === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits) {\n\n                    pos = Math.min(this.limit.upper, pos);\n                    pos = Math.max(this.limit.lower, pos);\n\n                }\n\n                this.position.copy(this.origPosition);\n                _tempAxis.copy(this.axis).applyEuler(this.rotation);\n                this.position.addScaledVector(_tempAxis, pos);\n\n                if (this.jointValue[0] !== pos) {\n\n                    this.jointValue[0] = pos;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return didUpdate;\n\n    }\n\n}\n\nclass URDFMimicJoint extends URDFJoint {\n\n    constructor(...args) {\n\n        super(...args);\n        this.type = 'URDFMimicJoint';\n        this.mimicJoint = null;\n        this.offset = 0;\n        this.multiplier = 1;\n\n    }\n\n    updateFromMimickedJoint(...values) {\n\n        const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n        return super.setJointValue(...modifiedValues);\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.mimicJoint = source.mimicJoint;\n        this.offset = source.offset;\n        this.multiplier = source.multiplier;\n\n        return this;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n        this.colliders = null;\n        this.visual = null;\n        this.frames = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n        this.colliders = {};\n        this.visual = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.urdfName in source.joints) {\n\n                this.joints[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFLink && c.urdfName in source.links) {\n\n                this.links[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFCollider && c.urdfName in source.colliders) {\n\n                this.colliders[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFVisual && c.urdfName in source.visual) {\n\n                this.visual[c.urdfName] = c;\n\n            }\n\n        });\n\n        // Repair mimic joint references once we've re-accumulated all our joint data\n        for (const joint in this.joints) {\n            this.joints[joint].mimicJoints = this.joints[joint].mimicJoints.map((mimicJoint) => this.joints[mimicJoint.name]);\n        }\n\n        this.frames = {\n            ...this.colliders,\n            ...this.visual,\n            ...this.links,\n            ...this.joints,\n        };\n\n        return this;\n\n    }\n\n    getFrame(name) {\n\n        return this.frames[name];\n\n    }\n\n    setJointValue(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setJointValue(...angle);\n\n        }\n\n        return false;\n    }\n\n    setJointValues(values) {\n\n        let didChange = false;\n        for (const name in values) {\n\n            const value = values[name];\n            if (Array.isArray(value)) {\n\n                didChange = this.setJointValue(name, ...value) || didChange;\n\n            } else {\n\n                didChange = this.setJointValue(name, value) || didChange;\n\n            }\n\n        }\n\n        return didChange;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };"],"names":["_tempAxis","Vector3","URDFBase","_Object3D","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","urdfNode","urdfName","_inherits","_createClass","key","value","copy","source","recursive","_get","_getPrototypeOf","prototype","call","Object3D","URDFCollider","_URDFBase","_this2","_len2","_key2","isURDFCollider","type","URDFVisual","_URDFBase2","_this3","_len3","_key3","isURDFVisual","URDFLink","_URDFBase3","_this4","_len4","_key4","isURDFLink","URDFJoint","_URDFBase4","_this5","_len5","_key5","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","mimicJoints","get","_jointType","set","v","matrixWorldNeedsUpdate","fill","clone","_toConsumableArray","setJointValue","_len6","values","_key6","map","parseFloat","position","quaternion","didUpdate","forEach","joint","updateFromMimickedJoint","apply","angle","Math","min","max","setFromAxisAngle","premultiply","pos","applyEuler","rotation","addScaledVector","console","warn","URDFMimicJoint","_URDFJoint","_this6","_len7","_key7","mimicJoint","offset","multiplier","_this7","_get2","_len8","_key8","modifiedValues","x","URDFRobot","_URDFLink","_this8","_len9","_key9","isURDFRobot","urdfRobotNode","robotName","links","joints","colliders","visual","frames","_this9","traverse","c","name","_objectSpread","getFrame","jointName","_len10","_key10","setJointValues","didChange","isArray"],"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"}