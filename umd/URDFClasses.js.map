{"version":3,"file":"URDFClasses.js","sources":["../src/URDFClasses.js"],"sourcesContent":["\nimport { Object3D, Vector3, Quaternion } from 'three';\n\nconst _tempAxis = new Vector3();\n\nclass URDFBase extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.urdfNode = null;\n        this.urdfName = '';\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.urdfName = source.urdfName;\n\n        return this;\n\n    }\n\n}\n\nclass URDFCollider extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFCollider = true;\n        this.type = 'URDFCollider';\n\n    }\n\n}\n\nclass URDFVisual extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFVisual = true;\n        this.type = 'URDFVisual';\n\n    }\n\n}\n\nclass URDFLink extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n\n    }\n\n}\n\nclass URDFJoint extends URDFBase {\n\n\n\n    get jointType() {\n        //console.log('Accessing jointType:', this._jointType);\n        return this._jointType;\n    }\n\n    set jointType(v) {\n        //console.log('Setting jointType from', this.jointType, 'to', v);\n        if (this.jointType === v) return;\n        this._jointType = v;\n        this.matrixWorldNeedsUpdate = true;\n        switch (v) {\n            case 'fixed':\n                this.jointValue = [];\n                break;\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = new Array(1).fill(0);\n                break;\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n        }\n    }\n\n    get angle() {\n        //console.log('Getting angle:', this.jointValue[0]);\n        return this.jointValue[0];\n    }\n\n    constructor(...args) {\n        super(...args);\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = new Vector3(1, 0, 0);\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n        this.origPosition = null;\n        this.origQuaternion = null;\n        this.mimicJoints = [];\n        this.dependentMimicJoints = [];\n        const gpu = new GPU.GPU();\n        this.calculateQuaternions = gpu.createKernel(function(angle, x, y, z) {\n            const cosHalfAngle = Math.cos(angle / 2);\n            const sinHalfAngle = Math.sin(angle / 2);\n            return [cosHalfAngle, sinHalfAngle * x, sinHalfAngle * y, sinHalfAngle * z];\n        }, {\n            output: [4],\n            returnType: 'Array(4)'\n        });\n    }\n    \n    copy(source, recursive) {\n        super.copy(source, recursive);\n        //console.log('Copying properties from source', source);\n        this.jointType = source.jointType;\n        this.axis = source.axis.clone();\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = source.ignoreLimits;\n        this.jointValue = [...source.jointValue];\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n        this.mimicJoints = [...source.mimicJoints];\n        this.dependentMimicJoints = source.dependentMimicJoints.map(joint => joint.clone());\n    }\n\n    setJointValue(...values) {\n        //console.log('Initial values received:', values);\n        values = values.map(v => v === null ? null : parseFloat(v));\n        //console.log('Parsed values:', values);\n        if (!this.origPosition || !this.origQuaternion) {\n            //console.log('Initializing original position and quaternion');\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n        }\n        //console.log(this.dependentMimicJoints[0]);\n        let didUpdate = false;\n        this.dependentMimicJoints.forEach(mimicJoint => {\n            const mimicValues = values.map(value => value * mimicJoint.multiplier + mimicJoint.offset);\n            const angle = mimicValues[0]; // the angle in radians\n            // Determine which axis is dominant for the rotation\n            const axis = mimicJoint.axis;\n            let axisVector = new THREE.Vector3();\n            if (axis.x !== 0) axisVector.set(1, 0, 0);\n            else if (axis.y !== 0) axisVector.set(0, 1, 0);\n            else if (axis.z !== 0) axisVector.set(0, 0, 1);\n            // Convert the angle to a quaternion based on the dominant axis\n            const quaternion = new THREE.Quaternion().setFromAxisAngle(axisVector, angle);\n            // Assign the computed quaternion to the mimic joint\n            mimicJoint.quaternion.copy(quaternion);\n            //console.log('Updated Quaternion:', mimicJoint.quaternion);\n            // Assuming setJointValue should now simply accept the quaternion for direct manipulation\n            didUpdate = mimicJoint.setJointValue(mimicJoint.quaternion) || didUpdate;\n\n        });\n\n        switch (this.jointType) {\n            case 'fixed':\n                break;\n            case 'continuous':\n            case 'revolute':\n                let angle = values[0];\n                //console.log('Current angle:', angle);\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n                    //console.log('Angle adjusted within limits:', angle);\n                }\n                this.quaternion.setFromAxisAngle(this.axis, angle).premultiply(this.origQuaternion);\n                if (this.jointValue[0] !== angle) {\n                    this.jointValue[0] = angle;\n                    this.matrixWorldNeedsUpdate = true;\n                    didUpdate = true;\n                    //console.log('Angle updated to:', angle);\n                }\n                break;\n            case 'prismatic':\n                let pos = values[0];\n                //console.log('Current position:', pos);\n                if (!this.ignoreLimits) {\n                    pos = Math.min(this.limit.upper, pos);\n                    pos = Math.max(this.limit.lower, pos);\n                    //console.log('Position adjusted within limits:', pos);\n                }\n                this.position.copy(this.origPosition);\n                _tempAxis.copy(this.axis).applyEuler(this.rotation);\n                this.position.addScaledVector(_tempAxis, pos);\n                if (this.jointValue[0] !== pos) {\n                    this.jointValue[0] = pos;\n                    this.matrixWorldNeedsUpdate = true;\n                    didUpdate = true;\n                    //console.log('Position updated to:', pos);\n                }\n                break;\n            case 'floating':\n            case 'planar':\n                //console.warn(`'${this.jointType}' joint not yet supported`);\n        }\n\n        //console.log('Did update:', didUpdate);\n\n        //console.log(this.urdfName);\n        //console.log(this.rotation);\n\n        return didUpdate;\n    }\n\n    addDependentMimicJoint(mimicJoint) {\n        //console.log('Adding dependent mimic joint:', mimicJoint);\n        if (!this.dependentMimicJoints.includes(mimicJoint)) {\n            this.dependentMimicJoints.push(mimicJoint);\n        }\n    }\n}\n\nclass URDFMimicJoint extends URDFJoint {\n\n    constructor(...args) {\n\n        super(...args);\n        this.type = 'URDFMimicJoint';\n        this.mimicJoint = null;\n        this.offset = 0;\n        this.multiplier = 1;\n\n    }\n\n    updateFromMimickedJoint(...values) {\n\n        const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n        return super.setJointValue(...modifiedValues);\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.mimicJoint = source.mimicJoint;\n        this.offset = source.offset;\n        this.multiplier = source.multiplier;\n\n        return this;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n        this.colliders = null;\n        this.visual = null;\n        this.frames = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n        this.colliders = {};\n        this.visual = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.urdfName in source.joints) {\n\n                this.joints[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFLink && c.urdfName in source.links) {\n\n                this.links[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFCollider && c.urdfName in source.colliders) {\n\n                this.colliders[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFVisual && c.urdfName in source.visual) {\n\n                this.visual[c.urdfName] = c;\n\n            }\n\n        });\n\n        // Repair mimic joint references once we've re-accumulated all our joint data\n        for (const joint in this.joints) {\n            this.joints[joint].mimicJoints = this.joints[joint].mimicJoints.map((mimicJoint) => this.joints[mimicJoint.name]);\n        }\n\n        this.frames = {\n            ...this.colliders,\n            ...this.visual,\n            ...this.links,\n            ...this.joints,\n        };\n\n        return this;\n\n    }\n\n    getFrame(name) {\n\n        return this.frames[name];\n\n    }\n\n    setJointValue(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setJointValue(...angle);\n\n        }\n\n        return false;\n    }\n\n    setJointValues(values) {\n\n        let didChange = false;\n        for (const name in values) {\n\n            const value = values[name];\n            if (Array.isArray(value)) {\n\n                didChange = this.setJointValue(name, ...value) || didChange;\n\n            } else {\n\n                didChange = this.setJointValue(name, value) || didChange;\n\n            }\n\n        }\n\n        return didChange;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };"],"names":["_tempAxis","Vector3","URDFBase","_Object3D","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","urdfNode","urdfName","_inherits","_createClass","key","value","copy","source","recursive","_get","_getPrototypeOf","prototype","call","Object3D","URDFCollider","_URDFBase","_this2","_len2","_key2","isURDFCollider","type","URDFVisual","_URDFBase2","_this3","_len3","_key3","isURDFVisual","URDFLink","_URDFBase3","_this4","_len4","_key4","isURDFLink","URDFJoint","_URDFBase4","_this5","_len5","_key5","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","mimicJoints","dependentMimicJoints","gpu","GPU","calculateQuaternions","createKernel","angle","x","y","z","cosHalfAngle","Math","cos","sinHalfAngle","sin","output","returnType","get","_jointType","set","v","matrixWorldNeedsUpdate","fill","clone","_toConsumableArray","map","joint","setJointValue","_len6","values","_key6","parseFloat","position","quaternion","didUpdate","forEach","mimicJoint","mimicValues","multiplier","offset","axisVector","THREE","Quaternion","setFromAxisAngle","min","max","premultiply","pos","applyEuler","rotation","addScaledVector","addDependentMimicJoint","includes","push","URDFMimicJoint","_URDFJoint","_this6","_len7","_key7","updateFromMimickedJoint","_this7","_get2","_len8","_key8","modifiedValues","apply","URDFRobot","_URDFLink","_this8","_len9","_key9","isURDFRobot","urdfRobotNode","robotName","links","joints","colliders","visual","frames","_this9","traverse","c","name","_objectSpread","getFrame","jointName","_len10","_key10","setJointValues","didChange","isArray"],"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"}