{"version":3,"file":"URDFClasses.js","sources":["../src/URDFClasses.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    show() {\n        this.visible = true;\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    delete() {\n        this.parent.remove(this);\n        this.children.map(child => {\n            this.remove(child);\n        });\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n"],"names":["URDFColliderClone","proto","Object","getPrototypeOf","args","result","clone","call","isURDFCollider","makeURDFCollider","object","URDFLink","isURDFLink","type","urdfNode","visible","parent","remove","children","map","child","source","recursive","Object3D","URDFJoint","_jointType","v","jointType","jointValue","Array","fill","isURDFJoint","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","isArray","setOffset","values","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","copy","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","isURDFRobot","urdfRobotNode","robotName","links","joints","traverse","c","name","jointName","joint","setAngle","angles"],"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"}