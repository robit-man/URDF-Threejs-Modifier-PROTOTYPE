{"version":3,"file":"URDFClasses.js","sources":["../src/URDFClasses.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    show() {\n        this.visible = true;\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    delete() {\n        this.parent.remove(this);\n        this.children.map(child => {\n            this.remove(child);\n        });\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n"],"names":["URDFColliderClone","proto","Object","getPrototypeOf","args","result","clone","call","isURDFCollider","makeURDFCollider","object","URDFLink","isURDFLink","type","urdfNode","visible","parent","remove","children","map","child","source","recursive","Object3D","URDFJoint","_jointType","v","jointType","jointValue","Array","fill","isURDFJoint","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","isArray","setOffset","values","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","copy","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","isURDFRobot","urdfRobotNode","robotName","links","joints","traverse","c","name","jointName","joint","setAngle","angles"],"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"}