{"version":3,"file":"URDFClasses.js","sources":["../src/URDFClasses.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    show() {\n        this.visible = true;\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    delete() {\n        this.parent.remove(this);\n        this.children.map(child => {\n            this.remove(child);\n        });\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n"],"names":["URDFColliderClone","_proto$clone","proto","Object","getPrototypeOf","_len","arguments","length","args","Array","_key","result","clone","call","apply","concat","isURDFCollider","makeURDFCollider","object","URDFLink","_Object3D","_this","_classCallCheck","_len2","_key2","_callSuper","isURDFLink","type","urdfNode","_inherits","_createClass","key","value","show","visible","hide","_delete","_this2","parent","remove","children","map","child","copy","source","recursive","_get","_getPrototypeOf","prototype","Object3D","URDFJoint","_Object3D2","_this3","_len3","_key3","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","get","_jointType","set","v","fill","isArray","_toConsumableArray","setAngle","setOffset","_len4","values","_key4","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","_URDFLink","_this4","_len5","_key5","isURDFRobot","urdfRobotNode","robotName","links","joints","_this5","traverse","c","name","jointName","joint","_len6","_key6","setAngles","angles"],"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"}