{"version":3,"file":"URDFClasses.js","sources":["../src/URDFClasses.js"],"sourcesContent":["import { Object3D, Vector3 } from 'three';\n\nconst _tempAxis = new Vector3();\n\nclass URDFBase extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.urdfNode = null;\n        this.urdfName = '';\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.urdfName = source.urdfName;\n\n        return this;\n\n    }\n\n}\n\nclass URDFCollider extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFCollider = true;\n        this.type = 'URDFCollider';\n\n    }\n\n}\n\nclass URDFVisual extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFVisual = true;\n        this.type = 'URDFVisual';\n\n    }\n\n}\n\nclass URDFLink extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n\n    }\n\n}\n\nclass URDFJoint extends URDFBase {\n\n\n\n    get jointType() {\n        console.log('Accessing jointType:', this._jointType);\n        return this._jointType;\n    }\n\n    set jointType(v) {\n        console.log('Setting jointType from', this.jointType, 'to', v);\n        if (this.jointType === v) return;\n        this._jointType = v;\n        this.matrixWorldNeedsUpdate = true;\n        switch (v) {\n            case 'fixed':\n                this.jointValue = [];\n                break;\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = new Array(1).fill(0);\n                break;\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n        }\n    }\n\n    get angle() {\n        console.log('Getting angle:', this.jointValue[0]);\n        return this.jointValue[0];\n    }\n\n    constructor(...args) {\n        super(...args);\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = new Vector3(1, 0, 0);\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n        this.origPosition = null;\n        this.origQuaternion = null;\n        this.mimicJoints = [];\n        this.dependentMimicJoints = [];\n    }\n\n    copy(source, recursive) {\n        super.copy(source, recursive);\n        console.log('Copying properties from source', source);\n        this.jointType = source.jointType;\n        this.axis = source.axis.clone();\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = source.ignoreLimits;\n        this.jointValue = [...source.jointValue];\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n        this.mimicJoints = [...source.mimicJoints];\n        this.dependentMimicJoints = source.dependentMimicJoints.map(joint => joint.clone());\n    }\n\n    setJointValue(...values) {\n        console.log('Initial values received:', values);\n        values = values.map(v => v === null ? null : parseFloat(v));\n        console.log('Parsed values:', values);\n        if (!this.origPosition || !this.origQuaternion) {\n            console.log('Initializing original position and quaternion');\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n        }\n\n        //console.log(this.dependentMimicJoints[0]);\n        let didUpdate = false;\n        this.dependentMimicJoints.forEach(mimicJoint => {\n            const mimicValues = values.map(value => value * mimicJoint.multiplier + mimicJoint.offset);\n\n            const angle = mimicValues[0]; // the angle in radians\n\n            // Determine which axis is dominant for the rotation\n            const axis = mimicJoint.axis;\n            let axisVector = new THREE.Vector3();\n            if (axis.x !== 0) axisVector.set(1, 0, 0);\n            else if (axis.y !== 0) axisVector.set(0, 1, 0);\n            else if (axis.z !== 0) axisVector.set(0, 0, 1);\n\n            // Convert the angle to a quaternion based on the dominant axis\n            const quaternion = new THREE.Quaternion().setFromAxisAngle(axisVector, angle);\n\n            // Assign the computed quaternion to the mimic joint\n            mimicJoint.quaternion.copy(quaternion);\n\n            console.log('Updated Quaternion:', mimicJoint.quaternion);\n\n            // Assuming setJointValue should now simply accept the quaternion for direct manipulation\n            didUpdate = mimicJoint.setJointValue(mimicJoint.quaternion) || didUpdate;\n        });\n\n\n        switch (this.jointType) {\n            case 'fixed':\n                break;\n            case 'continuous':\n            case 'revolute':\n                let angle = values[0];\n                console.log('Current angle:', angle);\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n                    console.log('Angle adjusted within limits:', angle);\n                }\n                this.quaternion.setFromAxisAngle(this.axis, angle).premultiply(this.origQuaternion);\n                if (this.jointValue[0] !== angle) {\n                    this.jointValue[0] = angle;\n                    this.matrixWorldNeedsUpdate = true;\n                    didUpdate = true;\n                    console.log('Angle updated to:', angle);\n                }\n                break;\n            case 'prismatic':\n                let pos = values[0];\n                console.log('Current position:', pos);\n                if (!this.ignoreLimits) {\n                    pos = Math.min(this.limit.upper, pos);\n                    pos = Math.max(this.limit.lower, pos);\n                    console.log('Position adjusted within limits:', pos);\n                }\n                this.position.copy(this.origPosition);\n                _tempAxis.copy(this.axis).applyEuler(this.rotation);\n                this.position.addScaledVector(_tempAxis, pos);\n                if (this.jointValue[0] !== pos) {\n                    this.jointValue[0] = pos;\n                    this.matrixWorldNeedsUpdate = true;\n                    didUpdate = true;\n                    console.log('Position updated to:', pos);\n                }\n                break;\n            case 'floating':\n            case 'planar':\n                console.warn(`'${this.jointType}' joint not yet supported`);\n        }\n\n        console.log('Did update:', didUpdate);\n\n        console.log(this.urdfName);\n        console.log(this.rotation);\n\n        return didUpdate;\n    }\n\n    addDependentMimicJoint(mimicJoint) {\n        console.log('Adding dependent mimic joint:', mimicJoint);\n        if (!this.dependentMimicJoints.includes(mimicJoint)) {\n            this.dependentMimicJoints.push(mimicJoint);\n        }\n    }\n}\n\nclass URDFMimicJoint extends URDFJoint {\n\n    constructor(...args) {\n\n        super(...args);\n        this.type = 'URDFMimicJoint';\n        this.mimicJoint = null;\n        this.offset = 0;\n        this.multiplier = 1;\n\n    }\n\n    updateFromMimickedJoint(...values) {\n\n        const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n        return super.setJointValue(...modifiedValues);\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.mimicJoint = source.mimicJoint;\n        this.offset = source.offset;\n        this.multiplier = source.multiplier;\n\n        return this;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n        this.colliders = null;\n        this.visual = null;\n        this.frames = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n        this.colliders = {};\n        this.visual = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.urdfName in source.joints) {\n\n                this.joints[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFLink && c.urdfName in source.links) {\n\n                this.links[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFCollider && c.urdfName in source.colliders) {\n\n                this.colliders[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFVisual && c.urdfName in source.visual) {\n\n                this.visual[c.urdfName] = c;\n\n            }\n\n        });\n\n        // Repair mimic joint references once we've re-accumulated all our joint data\n        for (const joint in this.joints) {\n            this.joints[joint].mimicJoints = this.joints[joint].mimicJoints.map((mimicJoint) => this.joints[mimicJoint.name]);\n        }\n\n        this.frames = {\n            ...this.colliders,\n            ...this.visual,\n            ...this.links,\n            ...this.joints,\n        };\n\n        return this;\n\n    }\n\n    getFrame(name) {\n\n        return this.frames[name];\n\n    }\n\n    setJointValue(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setJointValue(...angle);\n\n        }\n\n        return false;\n    }\n\n    setJointValues(values) {\n\n        let didChange = false;\n        for (const name in values) {\n\n            const value = values[name];\n            if (Array.isArray(value)) {\n\n                didChange = this.setJointValue(name, ...value) || didChange;\n\n            } else {\n\n                didChange = this.setJointValue(name, value) || didChange;\n\n            }\n\n        }\n\n        return didChange;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };"],"names":["_tempAxis","Vector3","URDFBase","_Object3D","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","urdfNode","urdfName","_inherits","_createClass","key","value","copy","source","recursive","_get","_getPrototypeOf","prototype","call","Object3D","URDFCollider","_URDFBase","_this2","_len2","_key2","isURDFCollider","type","URDFVisual","_URDFBase2","_this3","_len3","_key3","isURDFVisual","URDFLink","_URDFBase3","_this4","_len4","_key4","isURDFLink","URDFJoint","_URDFBase4","_this5","_len5","_key5","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","mimicJoints","dependentMimicJoints","get","console","log","_jointType","set","v","matrixWorldNeedsUpdate","fill","clone","_toConsumableArray","map","joint","setJointValue","_len6","values","_key6","parseFloat","position","quaternion","didUpdate","forEach","mimicJoint","mimicValues","multiplier","offset","angle","axisVector","THREE","x","y","z","Quaternion","setFromAxisAngle","Math","min","max","premultiply","pos","applyEuler","rotation","addScaledVector","warn","addDependentMimicJoint","includes","push","URDFMimicJoint","_URDFJoint","_this6","_len7","_key7","updateFromMimickedJoint","_this7","_get2","_len8","_key8","modifiedValues","apply","URDFRobot","_URDFLink","_this8","_len9","_key9","isURDFRobot","urdfRobotNode","robotName","links","joints","colliders","visual","frames","_this9","traverse","c","name","_objectSpread","getFrame","jointName","_len10","_key10","setJointValues","didChange","isArray"],"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"}