{"version":3,"file":"urdf-manipulator-element.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js","../src/urdf-viewer-element.js","../src/urdf-manipulator-element.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    show() {\n        this.visible = true;\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    delete() {\n        this.parent.remove(this);\n        this.children.map(child => {\n            this.remove(child);\n        });\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n","import * as THREE from 'three';\nimport { AxesHelper } from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, makeURDFCollider } from './URDFClasses.js';\nimport { MeshBVH, acceleratedRaycast } from 'three-mesh-bvh';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\n    class URDFLoader {\n\n    constructor(manager, allowMeshBVH = false) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.allowMeshBVH = allowMeshBVH;\n        this.retryMap = {};\n\n    }\n\n    /* Public API */\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError, options) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        const errors = {};\n\n        let managerOnErrorDefault = function () { };\n        let managerOnProgressDefault = function () { };\n        let managerOnLoadDefault = function () { };\n        let model;\n\n        if (manager.onError) {\n\n            managerOnErrorDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onProgress) {\n\n            managerOnProgressDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onLoad) {\n\n            managerOnLoadDefault = manager.onLoad.bind(manager);\n\n        }\n\n        const that = this;\n        manager.onError = function (url) {\n\n            errors[url] = 'Error in loading resource';\n\n            if (onError) {\n\n                onError({\n                    url,\n                    retry: that.retryMap[url],\n                });\n\n            }\n\n            managerOnErrorDefault(url);\n\n        };\n\n        manager.onProgress = function (url, itemsLoaded, itemsTotal) {\n\n            if (onProgress) {\n\n                onProgress(url, itemsLoaded, itemsTotal);\n\n            }\n\n            managerOnProgressDefault(url, itemsLoaded, itemsTotal);\n\n        };\n\n        manager.onLoad = function () {\n\n            if (onComplete) {\n\n                const partialErrors = Object.keys(errors).length === 0\n                    ? undefined\n                    : errors;\n\n                onComplete(model, partialErrors);\n\n            }\n\n            managerOnLoadDefault();\n\n        };\n\n        options = Object.assign({\n            workingPath,\n        }, options);\n\n        manager.itemStart(urdfPath);\n        fetch(urdfPath, options.fetchOptions)\n            .then(res => res.text())\n            .then(data => {\n\n                model = this.parse(data, options);\n                window.model = model;\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                console.error('URDFLoader: Error parsing file.', e);\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content, options = {}) {\n\n        const packages = options.packages || '';\n        const loadMeshCb = options.loadMeshCb || this.defaultMeshLoader.bind(this);\n        const workingPath = options.workingPath || '';\n        const parseVisual = ('parseVisual' in options) ? options.parseVisual : true;\n        const parseCollision = options.parseCollision || false;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${targetPkg} not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        const processUrdf = data => {\n\n            const parser = new DOMParser();\n            const urdf = parser.parseFromString(data, 'text/xml');\n            const children = [...urdf.children];\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot.call(this, robotNode);\n\n        };\n\n\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [...robot.children];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial.call(this, m);\n\n            });\n\n            // Create the <link> map\n            links.forEach(l => {\n\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${name}\"]`) === null;\n                linkMap[name] = processLink.call(this, l, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint.call(this, j);\n\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n\n            return obj;\n\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n\n            const children = [...joint.children];\n            const jointType = joint.getAttribute('type');\n            const obj = new URDFJoint();\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                } else if (type === 'child') {\n\n                    child = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'parent') {\n\n                    parent = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'limit') {\n\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n                }\n\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n\n            // Add AxesHelper\n            const jointAxesHelper = new AxesHelper(0.5); // Customize size as needed\n            obj.add(jointAxesHelper);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n\n            if (axisNode) {\n\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n\n            }\n\n            return obj;\n\n        }\n\n        // Process the <link> nodes\n        function processLink(link, target = null) {\n\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [...link.children];\n            target.name = link.getAttribute('name');\n            target.urdfNode = link;\n\n            if (parseVisual) {\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => processLinkElement.call(this, vn, target, materialMap));\n            }\n            if (parseCollision) {\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(vn => processLinkElement.call(this, vn, target));\n            }\n            // Add AxesHelper\n            const linkAxesHelper = new AxesHelper(0.5); // Customize size as needed\n            target.add(linkAxesHelper);\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [...node.children];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n\n                } else if (type === 'texture') {\n\n                    const loader = new THREE.TextureLoader(manager);\n                    const filename = n.getAttribute('filename');\n                    const filePath = resolvePath(filename);\n                    const onError = () => {\n                        this.retryMap[filePath] = () => loader.load(filePath, () => null, () => null, onError);\n                    };\n                    material.map = loader.load(filePath, () => null, () => null, onError);\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, linkObj, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n            let scale = [1, 1, 1];\n\n            const children = [...vn.children];\n            let material = null;\n            let primitiveModel = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial.call(this, materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) scale = processTuple(scaleAttr);\n\n                            const cb = (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n                                    this.retryMap[filePath] = () => loadMeshCb(filePath, manager, cb);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n                                        if (this.allowMeshBVH) {\n                                            obj.raycast = acceleratedRaycast;\n                                            obj.geometry.boundsTree = new MeshBVH(obj.geometry);\n                                        }\n                                    }\n\n                                    linkObj.add(obj);\n\n                                    obj.position.set(xyz[0], xyz[1], xyz[2]);\n                                    obj.rotation.set(0, 0, 0);\n\n                                    // multiply the existing scale by the scale components because\n                                    // the loaded model could have important scale values already applied\n                                    // to the root. Collada files, for example, can load in with a scale\n                                    // to convert the model units to meters.\n                                    obj.scale.x *= scale[0];\n                                    obj.scale.y *= scale[1];\n                                    obj.scale.z *= scale[2];\n\n                                    applyRotation(obj, rpy);\n\n                                    if (isCollisionNode) {\n\n                                        makeURDFCollider(obj);\n\n                                    }\n\n                                }\n\n                            };\n                            loadMeshCb(filePath, manager, cb);\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n\n                        linkObj.add(primitiveModel);\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'sphere') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'cylinder') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                }\n\n            });\n\n            // apply the position and rotation to the primitive geometry after\n            // the fact because it's guaranteed to have been scraped from the child\n            // nodes by this point\n            if (primitiveModel) {\n\n                applyRotation(primitiveModel, rpy, true);\n                primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\n\n            }\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl(?:\\?|$)/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae(?:\\?|$)/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${path}.\\nNo loader available`);\n\n        }\n\n    }\n\n};\n\nURDFLoader.prototype.parseFromString = function(urdfString, options) {\n    try {\n        const parser = new DOMParser();\n        const urdfDom = parser.parseFromString(urdfString, \"text/xml\");\n        \n        // Directly use the existing parse method if it can handle a DOM object\n        // Alternatively, convert the DOM to a string or another format as required by your parse method\n        const model = this.parse(urdfDom, options);\n        \n        if (options.onComplete) {\n            options.onComplete(model);\n        }\n    } catch (error) {\n        if (options.onError) {\n            options.onError(error);\n        }\n    }\n};\n\n\n// In URDFLoader.js\nURDFLoader.prototype.loadFromString = function(urdfString, onComplete) {\n    try {\n        // Assuming the existing parse method can handle XML DOM, convert the string to DOM first\n        const parser = new DOMParser();\n        const urdfDOM = parser.parseFromString(urdfString, \"text/xml\");\n        const model = this.parse(urdfDOM, {});\n        if (onComplete) {\n            onComplete(model);\n        }\n    } catch (error) {\n        console.error('Failed to parse URDF string:', error);\n    }\n};\n\n// Add or modify URDFJoint to handle updates more dynamically\nURDFJoint.prototype.updateProperties = function (params) {\n    if (params.origin) {\n        this.origin.set(...params.origin.xyz);\n        const euler = new THREE.Euler(...params.origin.rpy, 'XYZ');\n        this.origQuaternion.setFromEuler(euler);\n    }\n    if (params.axis) {\n        this.axis.set(...params.axis);\n    }\n    if (params.limit) {\n        this.limit.lower = params.limit.lower;\n        this.limit.upper = params.limit.upper;\n    }\n\n    // After updating properties, you might need to recalculate the joint's position in the world\n    this.updateTransform();\n}\n\nURDFJoint.prototype.updateTransform = function () {\n    // Apply new position and rotation\n    this.position.set(...this.origin.toArray());\n    this.quaternion.copy(this.origQuaternion);\n\n    // Ensure updates affect the visual representation\n    this.updateMatrix();\n    this.updateMatrixWorld(true);\n\n    // If part of a larger kinematic chain, inform parent or children to update as well\n    if (this.parent) {\n        this.parent.updateMatrixWorld(true);\n    }\n}\n\n// Call this method after changing joint parameters\nfunction refreshScene() {\n    if (viewer && viewer.robot) {\n        Object.values(viewer.robot.joints).forEach(joint => joint.updateTransform());\n        viewer.updateScene();  // Assuming this triggers a re-render\n    }\n}\n\n\n// Assuming URDFLoader, URDFRobot, and URDFJoint are already defined elsewhere in your script\n\n/* Add update joint functionality to URDFRobot */\nURDFRobot.prototype.updateJoint = function (jointName, params) {\n    const joint = this.joints[jointName];\n    if (joint) {\n        // Update joint parameters like origin, axis, limits, etc.\n        if (params.origin) {\n            joint.origin = params.origin;\n        }\n        if (params.axis) {\n            joint.axis.set(...params.axis);\n        }\n        if (params.limit) {\n            joint.limit.lower = params.limit.lower;\n            joint.limit.upper = params.limit.upper;\n        }\n        // Trigger a scene update or similar if needed\n        this.refreshScene(); // This method would need to be implemented based on your application's structure\n    }\n};\n\n/* Method to refresh the visual scene, to be defined based on how you're managing your THREE.js scene */\nURDFRobot.prototype.refreshScene = function () {\n    // Implementation depends on how the scene is managed, but you would typically mark the scene or object for update\n    // For example:\n    if (this.mesh) {\n        this.mesh.geometry.computeBoundingSphere();\n        this.mesh.geometry.computeVertexNormals();\n    }\n    // You might need to re-render the scene\n    render(); // This function would need to be defined in your global scope or passed in\n};\n\n// Extend URDFLoader to handle scene updates\nURDFLoader.prototype.applyUpdates = function () {\n    // This could be a method to apply pending updates or simply refresh parts of the model\n    if (window.model) {\n        window.model.refreshScene();\n    }\n};\nfunction render() {\n    renderer.render(scene, camera);\n    requestAnimationFrame(render);\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/js/controls/OrbitControls';\nimport URDFLoader from './URDFLoader.js';\n\n// urdf-viewer element\n// Loads and displays a 3D view of a URDF-formatted robot\n\n// Events\n// urdf-change: Fires when the URDF has finished loading and getting processed\n// urdf-processed: Fires when the URDF has finished loading and getting processed\n// geometry-loaded: Fires when all the geometry has been fully loaded\n// ignore-limits-change: Fires when the 'ignore-limits' attribute changes\n// angle-change: Fires when an angle changes\nexport default\nclass URDFViewer extends HTMLElement {\n\n    static get observedAttributes() {\n\n        return ['package', 'urdf', 'up', 'display-shadow', 'ambient-color', 'ignore-limits'];\n\n    }\n\n    get package() { return this.getAttribute('package') || ''; }\n    set package(val) { this.setAttribute('package', val); }\n\n    get urdf() { return this.getAttribute('urdf') || ''; }\n    set urdf(val) { this.setAttribute('urdf', val); }\n\n    get ignoreLimits() { return this.hasAttribute('ignore-limits') || false; }\n    set ignoreLimits(val) { val ? this.setAttribute('ignore-limits', val) : this.removeAttribute('ignore-limits'); }\n\n    get up() { return this.getAttribute('up') || '+Z'; }\n    set up(val) { this.setAttribute('up', val); }\n\n    get displayShadow() { return this.hasAttribute('display-shadow') || false; }\n    set displayShadow(val) { val ? this.setAttribute('display-shadow', '') : this.removeAttribute('display-shadow'); }\n\n    get ambientColor() { return this.getAttribute('ambient-color') || '#263238'; }\n    set ambientColor(val) { val ? this.setAttribute('ambient-color', val) : this.removeAttribute('ambient-color'); }\n\n    get autoRedraw() { return this.hasAttribute('auto-redraw') || false; }\n    set autoRedraw(val) { val ? this.setAttribute('auto-redraw', true) : this.removeAttribute('auto-redraw'); }\n\n    get noAutoRecenter() { return this.hasAttribute('no-auto-recenter') || false; }\n    set noAutoRecenter(val) { val ? this.setAttribute('no-auto-recenter', true) : this.removeAttribute('no-auto-recenter'); }\n\n    get angles() {\n\n        const angles = {};\n        if (this.robot) {\n\n            for (const name in this.robot.joints) angles[name] = this.robot.joints[name].angle;\n\n        }\n\n        return angles;\n\n    }\n    set angles(val) { this._setAngles(val); }\n\n    /* Lifecycle Functions */\n    constructor() {\n\n        super();\n\n        this._requestId = 0;\n        this._dirty = false;\n        this._loadScheduled = false;\n        this.robot = null;\n        this.loadMeshFunc = null;\n        this.urlModifierFunc = null;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n\n        const ambientLight = new THREE.HemisphereLight(this.ambientColor, '#000');\n        ambientLight.groundColor.lerp(ambientLight.color, 0.5);\n        ambientLight.intensity = 0.5;\n        ambientLight.position.set(0, 1, 0);\n        scene.add(ambientLight);\n\n        // Light setup\n        const dirLight = new THREE.DirectionalLight(0xffffff);\n        dirLight.position.set(4, 10, 1);\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.castShadow = true;\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setClearColor(0xffffff);\n        renderer.setClearAlpha(0);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.gammaOutput = true;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 2000);\n        camera.position.z = -10;\n\n        // World setup\n        const world = new THREE.Object3D();\n        scene.add(world);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(40, 40),\n            new THREE.ShadowMaterial({ side: THREE.DoubleSide, transparent: true, opacity: 0.5 })\n        );\n        plane.rotation.x = -Math.PI / 2;\n        plane.position.y = -0.5;\n        plane.receiveShadow = true;\n        plane.scale.set(10, 10, 10);\n        scene.add(plane);\n\n        // Controls setup\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.rotateSpeed = 2.0;\n        controls.zoomSpeed = 5;\n        controls.panSpeed = 2;\n        controls.enableZoom = true;\n        controls.enableDamping = false;\n        controls.maxDistance = 150;\n        controls.minDistance = 0.25;\n        controls.addEventListener('change', () => this.recenter());\n\n        this.scene = scene;\n        this.world = world;\n        this.renderer = renderer;\n        this.camera = camera;\n        this.controls = controls;\n        this.plane = plane;\n        this.directionalLight = dirLight;\n        this.ambientLight = ambientLight;\n\n        this._setUp(this.up);\n\n        const _renderLoop = () => {\n\n            if (this.parentNode) {\n\n                this.updateSize();\n\n                if (this._dirty || this.autoRedraw) {\n\n                    if (!this.noAutoRecenter) {\n\n                        this._updateEnvironment();\n                    }\n\n                    this.renderer.render(scene, camera);\n                    this._dirty = false;\n\n                }\n\n                // update controls after the environment in\n                // case the controls are retargeted\n                this.controls.update();\n\n            }\n            this._renderLoopId = requestAnimationFrame(_renderLoop);\n\n        };\n        _renderLoop();\n\n    }\n\n    connectedCallback() {\n\n        // Add our initialize styles for the element if they haven't\n        // been added yet\n        if (!this.constructor._styletag) {\n\n            const styletag = document.createElement('style');\n            styletag.innerHTML =\n            `\n                ${ this.tagName } { display: block; }\n                ${ this.tagName } canvas {\n                    width: 100%;\n                    height: 100%;\n                }\n            `;\n            document.head.appendChild(styletag);\n            this.constructor._styletag = styletag;\n\n        }\n\n        // add the renderer\n        if (this.childElementCount === 0) {\n\n            this.appendChild(this.renderer.domElement);\n\n        }\n\n        this.updateSize();\n        requestAnimationFrame(() => this.updateSize());\n\n    }\n\n    disconnectedCallback() {\n\n        cancelAnimationFrame(this._renderLoopId);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        this.recenter();\n\n        switch (attr) {\n\n            case 'package':\n            case 'urdf': {\n\n                this._scheduleLoad();\n                break;\n\n            }\n\n            case 'up': {\n\n                this._setUp(this.up);\n                break;\n\n            }\n\n            case 'ambient-color': {\n\n                this.ambientLight.color.set(this.ambientColor);\n                this.ambientLight.groundColor.set('#000').lerp(this.ambientLight.color, 0.5);\n                break;\n\n            }\n\n            case 'ignore-limits': {\n\n                this._setIgnoreLimits(this.ignoreLimits, true);\n                break;\n\n            }\n\n        }\n\n    }\n\n    /* Public API */\n    updateSize() {\n\n        const r = this.renderer;\n        const w = this.clientWidth;\n        const h = this.clientHeight;\n        const currsize = new THREE.Vector2();\n        r.getSize(currsize);\n\n        if (currsize.width !== w || currsize.height !== h) {\n\n            this.recenter();\n\n        }\n\n        r.setPixelRatio(window.devicePixelRatio);\n        r.setSize(w, h, false);\n\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n\n    }\n\n    redraw() {\n\n        this._dirty = true;\n    }\n\n    recenter() {\n\n        this._updateEnvironment();\n        this.redraw();\n\n    }\n\n    // Set the joint with jointName to\n    // angle in degrees\n    setAngle(jointName, angle) {\n\n        if (!this.robot) return;\n        if (!this.robot.joints[jointName]) return;\n\n        const origAngle = this.robot.joints[jointName].angle;\n        const newAngle = this.robot.setAngle(jointName, angle);\n        if (origAngle !== newAngle) {\n            this.redraw();\n        }\n\n        this.dispatchEvent(new CustomEvent('angle-change', { bubbles: true, cancelable: true, detail: jointName }));\n\n    }\n\n    setAngles(angles) {\n\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n    /* Private Functions */\n    // Updates the position of the plane to be at the\n    // lowest point below the robot and focuses the\n    // camera on the center of the scene\n    _updateEnvironment() {\n\n        if (!this.robot) return;\n\n        this.world.updateMatrixWorld();\n\n        const bbox = new THREE.Box3();\n        const temp = new THREE.Box3();\n\n        this.robot.traverse(c => {\n\n            const geometry = c.geometry;\n            if (geometry) {\n\n                if (geometry.boundingBox === null) {\n\n                    geometry.computeBoundingBox();\n\n                }\n\n                temp.copy(geometry.boundingBox);\n                temp.applyMatrix4(c.matrixWorld);\n\n                bbox.union(temp);\n\n            }\n\n        });\n\n        const center = bbox.getCenter(new THREE.Vector3());\n        this.controls.target.y = center.y;\n        this.plane.position.y = bbox.min.y - 1e-3;\n\n        const dirLight = this.directionalLight;\n        dirLight.castShadow = this.displayShadow;\n\n        if (this.displayShadow) {\n\n            // Update the shadow camera rendering bounds to encapsulate the\n            // model. We use the bounding sphere of the bounding box for\n            // simplicity -- this could be a tighter fit.\n            const sphere = bbox.getBoundingSphere(new THREE.Sphere());\n            const minmax = sphere.radius;\n            const cam = dirLight.shadow.camera;\n            cam.left = cam.bottom = -minmax;\n            cam.right = cam.top = minmax;\n\n            // Update the camera to focus on the center of the model so the\n            // shadow can encapsulate it\n            const offset = dirLight.position.clone().sub(dirLight.target.position);\n            dirLight.target.position.copy(center);\n            dirLight.position.copy(center).add(offset);\n\n            cam.updateProjectionMatrix();\n\n        }\n\n    }\n\n    _scheduleLoad() {\n\n        // if our current model is already what's being requested\n        // or has been loaded then early out\n        if (this._prevload === `${ this.package }|${ this.urdf }`) return;\n        this._prevload = `${ this.package }|${ this.urdf }`;\n\n        // if we're already waiting on a load then early out\n        if (this._loadScheduled) return;\n        this._loadScheduled = true;\n\n        if (this.robot) {\n\n            this.robot.traverse(c => c.dispose && c.dispose());\n            this.robot.parent.remove(this.robot);\n            this.robot = null;\n\n        }\n\n        requestAnimationFrame(() => {\n\n            this._loadUrdf(this.package, this.urdf);\n            this._loadScheduled = false;\n\n        });\n\n    }\n\n    // Watch the package and urdf field and load the robot model.\n    // This should _only_ be called from _scheduleLoad because that\n    // ensures the that current robot has been removed\n    _loadUrdf(pkg, urdf) {\n\n        this.dispatchEvent(new CustomEvent('urdf-change', { bubbles: true, cancelable: true, composed: true }));\n\n        if (urdf) {\n\n            // Keep track of this request and make\n            // sure it doesn't get overwritten by\n            // a subsequent one\n            this._requestId++;\n            const requestId = this._requestId;\n\n            const updateMaterials = mesh => {\n\n                mesh.traverse(c => {\n\n                    if (c.isMesh) {\n\n                        c.castShadow = true;\n                        c.receiveShadow = true;\n\n                        if (c.material) {\n\n                            const mats =\n                                (Array.isArray(c.material) ? c.material : [c.material])\n                                    .map(m => {\n\n                                        if (m instanceof THREE.MeshBasicMaterial) {\n\n                                            m = new THREE.MeshPhongMaterial();\n\n                                        }\n\n                                        if (m.map) {\n\n                                            m.map.encoding = THREE.GammaEncoding;\n\n                                        }\n\n                                        return m;\n\n                                    });\n                            c.material = mats.length === 1 ? mats[0] : mats;\n\n                        }\n\n                    }\n\n                });\n\n            };\n\n            if (pkg.includes(':') && (pkg.split(':')[1].substring(0, 2)) !== '//') {\n                // E.g. pkg = \"pkg_name: path/to/pkg_name, pk2: path2/to/pk2\"}\n\n                // Convert pkg(s) into a map. E.g.\n                // { \"pkg_name\": \"path/to/pkg_name\",\n                //   \"pk2\":      \"path2/to/pk2\"      }\n\n                pkg = pkg.split(',').reduce((map, value) => {\n\n                    const split = value.split(/:/).filter(x => !!x);\n                    const pkgName = split.shift().trim();\n                    const pkgPath = split.join(':').trim();\n                    map[pkgName] = pkgPath;\n\n                    return map;\n\n                }, {});\n            }\n\n            let robot = null;\n            const manager = new THREE.LoadingManager();\n            manager.onLoad = () => {\n\n                // If another request has come in to load a new\n                // robot, then ignore this one\n                if (this._requestId !== requestId) {\n\n                    robot.traverse(c => c.dispose && c.dispose());\n                    return;\n\n                }\n\n                this.robot = robot;\n                this.world.add(robot);\n                updateMaterials(robot);\n\n                this._setIgnoreLimits(this.ignoreLimits);\n\n                this.dispatchEvent(new CustomEvent('urdf-processed', { bubbles: true, cancelable: true, composed: true }));\n                this.dispatchEvent(new CustomEvent('geometry-loaded', { bubbles: true, cancelable: true, composed: true }));\n\n                this.recenter();\n\n            };\n\n            if (this.urlModifierFunc) {\n\n                manager.setURLModifier(this.urlModifierFunc);\n\n            }\n\n            new URDFLoader(manager).load(\n                urdf,\n\n                // onComplete\n                (model) => {\n                    robot = model;\n                },\n\n                // onProgress\n                (url, loaded, total) => {\n                    console.log(`${ url }; ${ loaded }/${ total }`);\n                },\n\n                // onError\n                (error) => {\n                    console.log(error);\n                },\n\n                // options\n                {\n\n                    packages: pkg,\n                    loadMeshCb: this.loadMeshFunc,\n                    fetchOptions: { mode: 'cors', credentials: 'same-origin' },\n\n                });\n\n        }\n\n    }\n\n    // Watch the coordinate frame and update the\n    // rotation of the scene to match\n    _setUp(up) {\n\n        if (!up) up = '+Z';\n        up = up.toUpperCase();\n        const sign = up.replace(/[^-+]/g, '')[0] || '+';\n        const axis = up.replace(/[^XYZ]/gi, '')[0] || 'Z';\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        if (axis === 'X') this.world.rotation.set(0, 0, sign === '+' ? HALFPI : -HALFPI);\n        if (axis === 'Z') this.world.rotation.set(sign === '+' ? -HALFPI : HALFPI, 0, 0);\n        if (axis === 'Y') this.world.rotation.set(sign === '+' ? 0 : PI, 0, 0);\n\n    }\n\n    // Updates the current robot's angles to ignore\n    // joint limits or not\n    _setIgnoreLimits(ignore, dispatch = false) {\n\n        if (this.robot) {\n\n            Object\n                .values(this.robot.joints)\n                .forEach(joint => {\n\n                    joint.ignoreLimits = ignore;\n                    joint.setAngle(joint.angle);\n\n                });\n\n        }\n\n        if (dispatch) {\n\n            this.dispatchEvent(new CustomEvent('ignore-limits-change', { bubbles: true, cancelable: true, composed: true }));\n\n        }\n\n    }\n\n};\n","import * as THREE from 'three';\nimport URDFViewer from './urdf-viewer-element.js';\n\n// urdf-manipulator element\n// Displays a URDF model that can be manipulated with the mouse\n\n// Events\n// joint-mouseover: Fired when a joint is hovered over\n// joint-mouseout: Fired when a joint is no longer hovered over\n// manipulate-start: Fires when a joint is manipulated\n// manipulate-end: Fires when a joint is done being manipulated\nexport default\nclass URDFManipulator extends URDFViewer {\n\n    static get observedAttributes() {\n\n        return ['highlight-color', ...super.observedAttributes];\n\n    }\n\n    get disableDragging() { return this.hasAttribute('disable-dragging'); }\n    set disableDragging(val) { val ? this.setAttribute('disable-dragging', !!val) : this.removeAttribute('disable-dragging'); }\n\n    get highlightColor() { return this.getAttribute('highlight-color') || '#FFFFFF'; }\n    set highlightColor(val) { val ? this.setAttribute('highlight-color', val) : this.removeAttribute('highlight-color'); }\n\n    constructor(...args) {\n\n        super(...args);\n\n        // The highlight material\n        this.highlightMaterial =\n            new THREE.MeshPhongMaterial({\n                shininess: 10,\n                color: this.highlightColor,\n                emissive: this.highlightColor,\n                emissiveIntensity: 0.25,\n            });\n\n        const el = this.renderer.domElement;\n\n        // Saved mouse data between frames and initial\n        // click point in space\n        const mouse = new THREE.Vector2();\n        const lastMouse = new THREE.Vector2();\n        const clickPoint = new THREE.Vector3();\n\n        // Reuseable variables\n        const raycaster = new THREE.Raycaster();\n        const delta = new THREE.Vector2();\n        const plane = new THREE.Plane();\n        const line = new THREE.Line3();\n\n        // The joint being manipulated\n        let dragging = null;\n\n        const toMouseCoord = (e, v) => {\n\n            v.x = ((e.pageX - el.offsetLeft) / el.offsetWidth) * 2 - 1;\n            v.y = -((e.pageY - el.offsetTop) / el.offsetHeight) * 2 + 1;\n\n        };\n\n        // Get which part of the robot is hit by the mouse click\n        const getCollisions = m => {\n\n            if (!this.robot) return [];\n\n            raycaster.setFromCamera(m, this.camera);\n\n            const meshes = [];\n            this.robot.traverse(c => c.type === 'Mesh' && meshes.push(c));\n\n            return raycaster.intersectObjects(meshes);\n\n        };\n\n        const isJoint = j => {\n\n            return j.isURDFJoint && j.jointType !== 'fixed';\n\n        };\n\n        // Find the nearest parent that is a joint\n        const findNearestJoint = m => {\n\n            let curr = m;\n            while (curr) {\n\n                if (isJoint(curr)) {\n\n                    break;\n\n                }\n\n                curr = curr.parent;\n\n            }\n\n            return curr;\n\n        };\n\n        // Highlight the link geometry under a joint\n        const highlightLinkGeometry = (m, revert) => {\n\n            const traverse = c => {\n\n                // Set or revert the highlight color\n                if (c.type === 'Mesh') {\n\n                    if (revert) {\n\n                        c.material = c.__origMaterial;\n                        delete c.__origMaterial;\n\n                    } else {\n\n                        c.__origMaterial = c.material;\n                        c.material = this.highlightMaterial;\n\n                    }\n\n                }\n\n                // Look into the children and stop if the next child is\n                // another joint\n                if (c === m || !isJoint(c)) {\n\n                    for (let i = 0; i < c.children.length; i++) {\n\n                        traverse(c.children[i]);\n\n                    }\n\n                }\n\n            };\n\n            traverse(m);\n\n        };\n\n        const temp = new THREE.Vector3();\n        const intersect1 = new THREE.Vector3();\n        const intersect2 = new THREE.Vector3();\n\n        // Get the changed angle between mouse position 1 and 2\n        // when manipulating target\n        const getAngle = (tg, m1, m2) => {\n\n            // TODO: Why is the constant negated?\n            plane.normal.copy(tg.axis).transformDirection(tg.matrixWorld).normalize();\n            plane.constant = -plane.normal.dot(clickPoint);\n\n            // If the camera is looking at the rotation axis at a skewed angle\n            temp.copy(this.camera.position).sub(clickPoint).normalize();\n            if (Math.abs(temp.dot(plane.normal)) < 0.2) {\n\n                // distance to the clicked point\n                const dist = temp.copy(clickPoint).sub(this.camera.position).length() * 0.9;\n\n                // Get the point closest to the original clicked point\n                // and use that as center of the rotation axis\n                temp.set(0, 0, 0).applyMatrix4(tg.matrixWorld);\n                temp.addScaledVector(plane.normal, -plane.distanceToPoint(temp));\n\n                // Project out from the camera\n                raycaster.setFromCamera(m1, this.camera);\n                intersect1.copy(raycaster.ray.origin).add(\n                    raycaster.ray.direction.normalize().multiplyScalar(dist)\n                );\n                intersect1.sub(temp);\n\n                raycaster.setFromCamera(m2, this.camera);\n                intersect2.copy(raycaster.ray.origin).add(\n                    raycaster.ray.direction.normalize().multiplyScalar(dist)\n                );\n                intersect2.sub(temp);\n\n                temp.crossVectors(intersect2, intersect1).normalize();\n\n                // Multiply by a magic number to make it feel good\n                return temp.dot(plane.normal) * intersect2.angleTo(intersect1) * 2;\n\n            } else {\n\n                // Get the point closest to the original clicked point\n                // and use that as center of the rotation axis\n                temp.set(0, 0, 0).applyMatrix4(tg.matrixWorld);\n                temp.addScaledVector(plane.normal, -plane.distanceToPoint(temp));\n\n                // project onto the plane of rotation\n                raycaster.setFromCamera(m1, this.camera);\n                line.start.copy(raycaster.ray.origin);\n                line.end.copy(raycaster.ray.origin).add(raycaster.ray.direction.normalize().multiplyScalar(1e5));\n                plane.intersectLine(line, intersect1);\n                intersect1.sub(temp);\n\n                raycaster.setFromCamera(m2, this.camera);\n                line.start.copy(raycaster.ray.origin);\n                line.end.copy(raycaster.ray.origin).add(raycaster.ray.direction.normalize().multiplyScalar(1e5));\n                plane.intersectLine(line, intersect2);\n                intersect2.sub(temp);\n\n                temp.crossVectors(intersect2, intersect1);\n\n                return Math.sign(temp.dot(plane.normal)) * intersect2.angleTo(intersect1);\n\n            }\n\n        };\n\n        // Get the amount to move the prismatic joint based on the mouse move\n        const getMove = (tg, m1, m2) => {\n\n            const dist = temp.copy(clickPoint).sub(this.camera.position).length();\n\n            raycaster.setFromCamera(m1, this.camera);\n            raycaster.ray.direction.normalize().multiplyScalar(dist);\n            intersect1.copy(raycaster.ray.origin).add(raycaster.ray.direction);\n\n            raycaster.setFromCamera(m2, this.camera);\n            raycaster.ray.direction.normalize().multiplyScalar(dist);\n            intersect2.copy(raycaster.ray.origin).add(raycaster.ray.direction);\n\n            temp.copy(intersect2).sub(intersect1);\n\n            plane.normal.copy(tg.axis).transformDirection(tg.parent.matrixWorld).normalize();\n\n            return temp.length() * -Math.sign(temp.dot(plane.normal));\n\n        };\n\n        el.addEventListener('mousedown', e => {\n\n            if (this.disableDragging) return;\n\n            toMouseCoord(e, mouse);\n            lastMouse.copy(mouse);\n\n            // get the information on the clicked item\n            // and set the dragged joint\n            const target = getCollisions(mouse).shift();\n            if (target) {\n\n                dragging = findNearestJoint(target.object);\n\n                if (dragging) {\n\n                    clickPoint.copy(target.point);\n                    this.dispatchEvent(new CustomEvent('manipulate-start', { bubbles: true, cancelable: true, detail: dragging.name }));\n                    this.controls.enabled = false;\n\n                }\n\n            }\n\n        }, true);\n\n        let hovered = null;\n        this._mouseMoveFunc = e => {\n\n            toMouseCoord(e, mouse);\n            delta.copy(mouse).sub(lastMouse);\n\n            // Keep track of the hovered item. If an item is being\n            // dragged, then it is considered hovered\n            const wasHovered = hovered;\n            if (hovered) {\n\n                hovered = null;\n            }\n\n            if (dragging == null && this.disableDragging === false) {\n\n                const collision = getCollisions(mouse).shift() || null;\n                const joint = collision && findNearestJoint(collision.object);\n                if (joint) {\n\n                    hovered = joint;\n\n                }\n\n            } else if (dragging) {\n\n                hovered = dragging;\n\n            }\n\n            // Highlight the meshes and broadcast events if the hovered item changed\n            if (hovered !== wasHovered) {\n\n                if (wasHovered) {\n\n                    highlightLinkGeometry(wasHovered, true);\n                    this.dispatchEvent(new CustomEvent('joint-mouseout', { bubbles: true, cancelable: true, detail: wasHovered.name }));\n\n                }\n\n                if (hovered) {\n\n                    highlightLinkGeometry(hovered, false);\n                    this.dispatchEvent(new CustomEvent('joint-mouseover', { bubbles: true, cancelable: true, detail: hovered.name }));\n\n                }\n\n                this.redraw();\n\n            }\n\n            // Apply the manipulation\n            if (dragging !== null) {\n\n                let delta = null;\n                if (dragging.jointType === 'revolute' || dragging.jointType === 'continuous') {\n\n                    delta = getAngle(dragging, mouse, lastMouse);\n\n                } else if (dragging.jointType === 'prismatic') {\n\n                    delta = getMove(dragging, mouse, lastMouse);\n\n                } else {\n\n                    // Not supported\n\n                }\n\n                if (delta) {\n\n                    this.setAngle(dragging.name, dragging.angle + delta);\n\n                }\n\n            }\n\n            lastMouse.copy(mouse);\n\n        };\n\n        // Clean up\n        this._mouseUpFunc = e => {\n\n            if (dragging) {\n\n                this.dispatchEvent(new CustomEvent('manipulate-end', { bubbles: true, cancelable: true, detail: dragging.name }));\n                dragging = null;\n                this.controls.enabled = true;\n\n            }\n\n        };\n\n    }\n\n    connectedCallback() {\n\n        super.connectedCallback();\n        window.addEventListener('mousemove', this._mouseMoveFunc, true);\n        window.addEventListener('mouseup', this._mouseUpFunc, true);\n\n    }\n\n    disconnectedCallback() {\n\n        super.disconnectedCallback();\n        window.removeEventListener('mousemove', this._mouseMoveFunc, true);\n        window.removeEventListener('mouseup', this._mouseUpFunc, true);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        super.attributeChangedCallback(attr, oldval, newval);\n\n        switch (attr) {\n\n            case 'highlight-color':\n                this.highlightMaterial.color.set(this.highlightColor);\n                this.highlightMaterial.emissive.set(this.highlightColor);\n                break;\n\n        }\n\n    }\n\n};\n"],"names":["URDFColliderClone","proto","Object","getPrototypeOf","args","result","clone","call","isURDFCollider","makeURDFCollider","object","URDFLink","isURDFLink","type","urdfNode","visible","parent","remove","children","map","child","source","recursive","Object3D","URDFJoint","_jointType","v","jointType","jointValue","Array","fill","isURDFJoint","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","isArray","setOffset","values","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","copy","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","isURDFRobot","urdfRobotNode","robotName","links","joints","traverse","c","name","jointName","joint","setAngle","angles","tempQuaternion","THREE","tempEuler","Euler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","rotation","set","setFromEuler","multiply","URDFLoader","manager","allowMeshBVH","DefaultLoadingManager","retryMap","urdf","onComplete","onProgress","onError","options","workingPath","LoaderUtils","extractUrlBase","urdfPath","resolveURL","errors","managerOnErrorDefault","managerOnProgressDefault","managerOnLoadDefault","model","bind","onLoad","that","url","retry","itemsLoaded","itemsTotal","partialErrors","keys","length","undefined","assign","itemStart","fetch","fetchOptions","then","res","text","data","parse","window","itemEnd","e","error","itemError","content","packages","loadMeshCb","defaultMeshLoader","parseVisual","parseCollision","linkMap","jointMap","materialMap","resolvePath","path","test","replace","targetPkg","relPath","endsWith","processUrdf","parser","DOMParser","parseFromString","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","forEach","m","processMaterial","l","isRoot","querySelector","processLink","j","processJoint","xyz","n","add","jointAxesHelper","AxesHelper","axisNode","axisXYZ","Vector3","normalize","link","target","visualNodes","vn","processLinkElement","collisionNodes","linkAxesHelper","node","matNodes","material","MeshPhongMaterial","rgba","color","setRGB","opacity","transparent","loader","TextureLoader","filename","filePath","load","linkObj","isCollisionNode","scale","primitiveModel","materialNode","geoType","scaleAttr","cb","err","Mesh","raycast","acceleratedRaycast","geometry","boundsTree","MeshBVH","x","y","z","BoxBufferGeometry","size","SphereBufferGeometry","radius","CylinderBufferGeometry","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene","prototype","urdfString","urdfDom","loadFromString","urdfDOM","updateProperties","params","origin","euler","updateTransform","toArray","updateMatrix","updateMatrixWorld","refreshScene","viewer","updateScene","updateJoint","computeBoundingSphere","computeVertexNormals","render","applyUpdates","renderer","camera","requestAnimationFrame","URDFViewer","setAttribute","hasAttribute","removeAttribute","_setAngles","_requestId","_dirty","_loadScheduled","loadMeshFunc","urlModifierFunc","Scene","ambientLight","HemisphereLight","ambientColor","groundColor","lerp","intensity","dirLight","DirectionalLight","shadow","mapSize","width","height","castShadow","WebGLRenderer","antialias","alpha","setClearColor","setClearAlpha","shadowMap","enabled","PCFSoftShadowMap","gammaOutput","PerspectiveCamera","world","plane","PlaneBufferGeometry","ShadowMaterial","side","DoubleSide","receiveShadow","controls","OrbitControls","domElement","rotateSpeed","zoomSpeed","panSpeed","enableZoom","enableDamping","maxDistance","minDistance","addEventListener","recenter","directionalLight","_setUp","up","_renderLoop","parentNode","updateSize","autoRedraw","noAutoRecenter","_updateEnvironment","update","_renderLoopId","constructor","_styletag","styletag","document","createElement","innerHTML","tagName","head","appendChild","childElementCount","cancelAnimationFrame","attr","oldval","newval","_scheduleLoad","_setIgnoreLimits","r","w","clientWidth","h","clientHeight","currsize","Vector2","getSize","setPixelRatio","devicePixelRatio","setSize","aspect","updateProjectionMatrix","redraw","origAngle","newAngle","dispatchEvent","CustomEvent","bubbles","cancelable","detail","bbox","Box3","temp","boundingBox","computeBoundingBox","applyMatrix4","matrixWorld","union","center","getCenter","displayShadow","sphere","getBoundingSphere","Sphere","minmax","cam","left","bottom","right","top","offset","sub","_prevload","dispose","_loadUrdf","pkg","composed","requestId","updateMaterials","isMesh","mats","MeshBasicMaterial","encoding","GammaEncoding","includes","substring","reduce","value","pkgName","shift","pkgPath","join","LoadingManager","setURLModifier","loaded","total","log","mode","credentials","toUpperCase","sign","HALFPI","ignore","dispatch","HTMLElement","URDFManipulator","highlightMaterial","shininess","highlightColor","emissive","emissiveIntensity","el","mouse","lastMouse","clickPoint","raycaster","Raycaster","Plane","line","Line3","dragging","toMouseCoord","pageX","offsetLeft","offsetWidth","pageY","offsetTop","offsetHeight","getCollisions","setFromCamera","meshes","push","intersectObjects","isJoint","findNearestJoint","curr","highlightLinkGeometry","revert","__origMaterial","i","intersect1","intersect2","getAngle","tg","m1","m2","normal","transformDirection","constant","dot","abs","dist","distanceToPoint","ray","direction","multiplyScalar","crossVectors","angleTo","start","end","intersectLine","getMove","disableDragging","point","hovered","_mouseMoveFunc","wasHovered","collision","_mouseUpFunc","removeEventListener"],"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"}