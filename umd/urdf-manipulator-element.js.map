{"version":3,"file":"urdf-manipulator-element.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js","../src/urdf-viewer-element.js","../src/URDFDragControls.js","../src/urdf-manipulator-element.js"],"sourcesContent":["\nimport { Object3D, Vector3, Quaternion } from 'three';\n\nconst _tempAxis = new Vector3();\n\nclass URDFBase extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.urdfNode = null;\n        this.urdfName = '';\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.urdfName = source.urdfName;\n\n        return this;\n\n    }\n\n}\n\nclass URDFCollider extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFCollider = true;\n        this.type = 'URDFCollider';\n\n    }\n\n}\n\nclass URDFVisual extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFVisual = true;\n        this.type = 'URDFVisual';\n\n    }\n\n}\n\nclass URDFLink extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n\n    }\n\n}\n\nclass URDFJoint extends URDFBase {\n\n\n\n    get jointType() {\n        //console.log('Accessing jointType:', this._jointType);\n        return this._jointType;\n    }\n\n    set jointType(v) {\n        //console.log('Setting jointType from', this.jointType, 'to', v);\n        if (this.jointType === v) return;\n        this._jointType = v;\n        this.matrixWorldNeedsUpdate = true;\n        switch (v) {\n            case 'fixed':\n                this.jointValue = [];\n                break;\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = new Array(1).fill(0);\n                break;\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n        }\n    }\n\n    get angle() {\n        //console.log('Getting angle:', this.jointValue[0]);\n        return this.jointValue[0];\n    }\n\n    constructor(...args) {\n        super(...args);\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = new Vector3(1, 0, 0);\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n        this.origPosition = null;\n        this.origQuaternion = null;\n        this.mimicJoints = [];\n        this.dependentMimicJoints = [];\n        const gpu = new GPU.GPU();\n        this.calculateQuaternions = gpu.createKernel(function(angle, x, y, z) {\n            const cosHalfAngle = Math.cos(angle / 2);\n            const sinHalfAngle = Math.sin(angle / 2);\n            return [cosHalfAngle, sinHalfAngle * x, sinHalfAngle * y, sinHalfAngle * z];\n        }, {\n            output: [4],\n            returnType: 'Array(4)'\n        });\n    }\n    \n    copy(source, recursive) {\n        super.copy(source, recursive);\n        //console.log('Copying properties from source', source);\n        this.jointType = source.jointType;\n        this.axis = source.axis.clone();\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = source.ignoreLimits;\n        this.jointValue = [...source.jointValue];\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n        this.mimicJoints = [...source.mimicJoints];\n        this.dependentMimicJoints = source.dependentMimicJoints.map(joint => joint.clone());\n    }\n\n    setJointValue(...values) {\n        //console.log('Initial values received:', values);\n        values = values.map(v => v === null ? null : parseFloat(v));\n        //console.log('Parsed values:', values);\n        if (!this.origPosition || !this.origQuaternion) {\n            //console.log('Initializing original position and quaternion');\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n        }\n        //console.log(this.dependentMimicJoints[0]);\n        let didUpdate = false;\n        this.dependentMimicJoints.forEach(mimicJoint => {\n            const mimicValues = values.map(value => value * mimicJoint.multiplier + mimicJoint.offset);\n            const angle = mimicValues[0]; // the angle in radians\n            // Determine which axis is dominant for the rotation\n            const axis = mimicJoint.axis;\n            let axisVector = new THREE.Vector3();\n            if (axis.x !== 0) axisVector.set(1, 0, 0);\n            else if (axis.y !== 0) axisVector.set(0, 1, 0);\n            else if (axis.z !== 0) axisVector.set(0, 0, 1);\n            // Convert the angle to a quaternion based on the dominant axis\n            const quaternion = new THREE.Quaternion().setFromAxisAngle(axisVector, angle);\n            // Assign the computed quaternion to the mimic joint\n            mimicJoint.quaternion.copy(quaternion);\n            //console.log('Updated Quaternion:', mimicJoint.quaternion);\n            // Assuming setJointValue should now simply accept the quaternion for direct manipulation\n            didUpdate = mimicJoint.setJointValue(mimicJoint.quaternion) || didUpdate;\n\n        });\n\n        switch (this.jointType) {\n            case 'fixed':\n                break;\n            case 'continuous':\n            case 'revolute':\n                let angle = values[0];\n                //console.log('Current angle:', angle);\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n                    //console.log('Angle adjusted within limits:', angle);\n                }\n                this.quaternion.setFromAxisAngle(this.axis, angle).premultiply(this.origQuaternion);\n                if (this.jointValue[0] !== angle) {\n                    this.jointValue[0] = angle;\n                    this.matrixWorldNeedsUpdate = true;\n                    didUpdate = true;\n                    //console.log('Angle updated to:', angle);\n                }\n                break;\n            case 'prismatic':\n                let pos = values[0];\n                //console.log('Current position:', pos);\n                if (!this.ignoreLimits) {\n                    pos = Math.min(this.limit.upper, pos);\n                    pos = Math.max(this.limit.lower, pos);\n                    //console.log('Position adjusted within limits:', pos);\n                }\n                this.position.copy(this.origPosition);\n                _tempAxis.copy(this.axis).applyEuler(this.rotation);\n                this.position.addScaledVector(_tempAxis, pos);\n                if (this.jointValue[0] !== pos) {\n                    this.jointValue[0] = pos;\n                    this.matrixWorldNeedsUpdate = true;\n                    didUpdate = true;\n                    //console.log('Position updated to:', pos);\n                }\n                break;\n            case 'floating':\n            case 'planar':\n                //console.warn(`'${this.jointType}' joint not yet supported`);\n        }\n\n        //console.log('Did update:', didUpdate);\n\n        //console.log(this.urdfName);\n        //console.log(this.rotation);\n\n        return didUpdate;\n    }\n\n    addDependentMimicJoint(mimicJoint) {\n        //console.log('Adding dependent mimic joint:', mimicJoint);\n        if (!this.dependentMimicJoints.includes(mimicJoint)) {\n            this.dependentMimicJoints.push(mimicJoint);\n        }\n    }\n}\n\nclass URDFMimicJoint extends URDFJoint {\n\n    constructor(...args) {\n\n        super(...args);\n        this.type = 'URDFMimicJoint';\n        this.mimicJoint = null;\n        this.offset = 0;\n        this.multiplier = 1;\n\n    }\n\n    updateFromMimickedJoint(...values) {\n\n        const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n        return super.setJointValue(...modifiedValues);\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.mimicJoint = source.mimicJoint;\n        this.offset = source.offset;\n        this.multiplier = source.multiplier;\n\n        return this;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n        this.colliders = null;\n        this.visual = null;\n        this.frames = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n        this.colliders = {};\n        this.visual = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.urdfName in source.joints) {\n\n                this.joints[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFLink && c.urdfName in source.links) {\n\n                this.links[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFCollider && c.urdfName in source.colliders) {\n\n                this.colliders[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFVisual && c.urdfName in source.visual) {\n\n                this.visual[c.urdfName] = c;\n\n            }\n\n        });\n\n        // Repair mimic joint references once we've re-accumulated all our joint data\n        for (const joint in this.joints) {\n            this.joints[joint].mimicJoints = this.joints[joint].mimicJoints.map((mimicJoint) => this.joints[mimicJoint.name]);\n        }\n\n        this.frames = {\n            ...this.colliders,\n            ...this.visual,\n            ...this.links,\n            ...this.joints,\n        };\n\n        return this;\n\n    }\n\n    getFrame(name) {\n\n        return this.frames[name];\n\n    }\n\n    setJointValue(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setJointValue(...angle);\n\n        }\n\n        return false;\n    }\n\n    setJointValues(values) {\n\n        let didChange = false;\n        for (const name in values) {\n\n            const value = values[name];\n            if (Array.isArray(value)) {\n\n                didChange = this.setJointValue(name, ...value) || didChange;\n\n            } else {\n\n                didChange = this.setJointValue(name, value) || didChange;\n\n            }\n\n        }\n\n        return didChange;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };","import * as THREE from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, URDFCollider, URDFVisual, URDFMimicJoint } from './URDFClasses.js';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\n    class URDFLoader {\n\n    constructor(manager) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.loadMeshCb = this.defaultMeshLoader.bind(this);\n        this.parseVisual = true;\n        this.parseCollision = false;\n        this.packages = '';\n        this.workingPath = '';\n        this.fetchOptions = {};\n\n    }\n\n    /* Public API */\n    loadAsync(urdf) {\n\n        return new Promise((resolve, reject) => {\n\n            this.load(urdf, resolve, null, reject);\n\n        });\n\n    }\n\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        manager.itemStart(urdfPath);\n\n        fetch(urdfPath, this.fetchOptions)\n            .then(res => {\n\n                if (res.ok) {\n\n                    if (onProgress) {\n\n                        onProgress(null);\n\n                    }\n                    return res.text();\n\n                } else {\n\n                    throw new Error(`URDFLoader: Failed to load url '${urdfPath}' with error code ${res.status} : ${res.statusText}.`);\n\n                }\n\n            })\n            .then(data => {\n\n                if (this.workingPath === '') {\n\n                    this.workingPath = workingPath;\n\n                }\n\n                const model = this.parse(data);\n                onComplete(model);\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                if (onError) {\n\n                    onError(e);\n\n                } else {\n\n                    console.error('URDFLoader: Error loading file.', e);\n\n                }\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content) {\n\n        const packages = this.packages;\n        const loadMeshCb = this.loadMeshCb;\n        const parseVisual = this.parseVisual;\n        const parseCollision = this.parseCollision;\n        const workingPath = this.workingPath;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (packages instanceof Function) {\n\n                return packages(targetPkg) + '/' + relPath;\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${targetPkg} not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        function processUrdf(data) {\n\n            let children;\n            if (data instanceof Document) {\n\n                children = [...data.children];\n\n            } else if (data instanceof Element) {\n\n                children = [data];\n\n            } else {\n\n                const parser = new DOMParser();\n                const urdf = parser.parseFromString(data, 'text/xml');\n                children = [...urdf.children];\n\n            }\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot(robotNode);\n\n        }\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [...robot.children];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial(m);\n\n            });\n\n            // Create the <link> map\n            const visualMap = {};\n            const colliderMap = {};\n            links.forEach(l => {\n\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${name}\"]`) === null;\n                linkMap[name] = processLink(l, visualMap, colliderMap, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint(j);\n\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n            obj.colliders = colliderMap;\n            obj.visual = visualMap;\n\n            // Link up mimic joints\n            const jointList = Object.values(jointMap);\n            jointList.forEach(j => {\n\n                if (j instanceof URDFMimicJoint) {\n\n                    jointMap[j.mimicJoint].mimicJoints.push(j);\n\n                }\n\n            });\n\n            // Detect infinite loops of mimic joints\n            jointList.forEach(j => {\n\n                const uniqueJoints = new Set();\n                const iterFunction = joint => {\n\n                    if (uniqueJoints.has(joint)) {\n\n                        throw new Error('URDFLoader: Detected an infinite loop of mimic joints.');\n\n                    }\n\n                    uniqueJoints.add(joint);\n                    joint.mimicJoints.forEach(j => {\n\n                        iterFunction(j);\n\n                    });\n\n                };\n\n                iterFunction(j);\n            });\n\n            obj.frames = {\n                ...colliderMap,\n                ...visualMap,\n                ...linkMap,\n                ...jointMap,\n            };\n\n            return obj;\n\n        }// Process joint nodes and parent them\n        function processJoint(joint) {\n            const children = [...joint.children];\n            const jointType = joint.getAttribute('type');\n            let obj;\n\n            const mimicTag = children.find(n => n.nodeName.toLowerCase() === 'mimic');\n            if (mimicTag) {\n                obj = new URDFMimicJoint();\n                obj.mimicJoint = mimicTag.getAttribute('joint');\n                obj.multiplier = parseFloat(mimicTag.getAttribute('multiplier') || 1.0);\n                obj.offset = parseFloat(mimicTag.getAttribute('offset') || 0.0);\n\n                //console.log('MIMIC: ', obj);\n            } else {\n                obj = new URDFJoint();\n            }\n\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.urdfName = obj.name;\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n                } else if (type === 'child') {\n                    child = linkMap[n.getAttribute('link')];\n                } else if (type === 'parent') {\n                    parent = linkMap[n.getAttribute('link')];\n                } else if (type === 'limit') {\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n                }\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n            if (axisNode) {\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n            }\n\n            // If it's a mimic joint, find its master joint and link them\n            if (mimicTag) {\n                const masterJointName = mimicTag.getAttribute('joint');\n                const masterJoint = jointMap[masterJointName]; // Assuming jointMap is a map from names to joint objects\n                if (masterJoint) {\n                    masterJoint.addDependentMimicJoint(obj);\n                }\n            }\n\n            return obj;\n        }\n\n        // Process the <link> nodes\n        function processLink(link, visualMap, colliderMap, target = null) {\n\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [...link.children];\n            target.name = link.getAttribute('name');\n            target.urdfName = target.name;\n            target.urdfNode = link;\n\n            if (parseVisual) {\n\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => {\n\n                    const v = processLinkElement(vn, materialMap);\n                    target.add(v);\n\n                    if (vn.hasAttribute('name')) {\n\n                        const name = vn.getAttribute('name');\n                        v.name = name;\n                        v.urdfName = name;\n                        visualMap[name] = v;\n\n                    }\n\n                });\n\n            }\n\n            if (parseCollision) {\n\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(cn => {\n\n                    const c = processLinkElement(cn);\n                    target.add(c);\n\n                    if (cn.hasAttribute('name')) {\n\n                        const name = cn.getAttribute('name');\n                        c.name = name;\n                        c.urdfName = name;\n                        colliderMap[name] = c;\n\n                    }\n\n                });\n\n            }\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [...node.children];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n                    material.depthWrite = !material.transparent;\n\n                } else if (type === 'texture') {\n\n                    // The URDF spec does not require that the <texture/> tag include\n                    // a filename attribute so skip loading the texture if not provided.\n                    const filename = n.getAttribute('filename');\n                    if (filename) {\n\n                        const loader = new THREE.TextureLoader(manager);\n                        const filePath = resolvePath(filename);\n                        material.map = loader.load(filePath);\n                        material.map.colorSpace = THREE.SRGBColorSpace;\n\n                    }\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            const children = [...vn.children];\n            let material = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial(materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            const group = isCollisionNode ? new URDFCollider() : new URDFVisual();\n            group.urdfNode = vn;\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) {\n\n                                const scale = processTuple(scaleAttr);\n                                group.scale.set(scale[0], scale[1], scale[2]);\n\n                            }\n\n                            loadMeshCb(filePath, manager, (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n\n                                    }\n\n                                    // We don't expect non identity rotations or positions. In the case of\n                                    // COLLADA files the model might come in with a custom scale for unit\n                                    // conversion.\n                                    obj.position.set(0, 0, 0);\n                                    obj.quaternion._x = 0;\n                                    obj.quaternion._y = 0;\n                                    obj.quaternion._z = 0;\n                                    obj.quaternion._w = 0;\n                                    group.add(obj);\n\n                                }\n\n                            });\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'sphere') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'cylinder') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        group.add(primitiveModel);\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    const xyz = processTuple(n.getAttribute('xyz'));\n                    const rpy = processTuple(n.getAttribute('rpy'));\n\n                    group.position.set(xyz[0], xyz[1], xyz[2]);\n                    group.rotation.set(0, 0, 0);\n                    applyRotation(group, rpy);\n\n                }\n\n            });\n\n            return group;\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl$/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae$/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${path}.\\nNo loader available`);\n\n        }\n\n    }\n\n};","import * as THREE from 'three';\nimport { MeshPhongMaterial } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport URDFLoader from './URDFLoader.js';\n\nconst tempVec2 = new THREE.Vector2();\nconst emptyRaycast = () => {};\n\n// urdf-viewer element\n// Loads and displays a 3D view of a URDF-formatted robot\n\n// Events\n// urdf-change: Fires when the URDF has finished loading and getting processed\n// urdf-processed: Fires when the URDF has finished loading and getting processed\n// geometry-loaded: Fires when all the geometry has been fully loaded\n// ignore-limits-change: Fires when the 'ignore-limits' attribute changes\n// angle-change: Fires when an angle changes\nexport default\nclass URDFViewer extends HTMLElement {\n\n    static get observedAttributes() {\n\n        return ['package', 'urdf', 'up', 'display-shadow', 'ambient-color', 'ignore-limits', 'show-collision'];\n\n    }\n\n    get package() { return this.getAttribute('package') || ''; }\n    set package(val) { this.setAttribute('package', val); }\n\n    get urdf() { return this.getAttribute('urdf') || ''; }\n    set urdf(val) { this.setAttribute('urdf', val); }\n\n    get ignoreLimits() { return this.hasAttribute('ignore-limits') || false; }\n    set ignoreLimits(val) { val ? this.setAttribute('ignore-limits', val) : this.removeAttribute('ignore-limits'); }\n\n    get up() { return this.getAttribute('up') || '+Z'; }\n    set up(val) { this.setAttribute('up', val); }\n\n    get displayShadow() { return this.hasAttribute('display-shadow') || false; }\n    set displayShadow(val) { val ? this.setAttribute('display-shadow', '') : this.removeAttribute('display-shadow'); }\n\n    get ambientColor() { return this.getAttribute('ambient-color') || '#8ea0a8'; }\n    set ambientColor(val) { val ? this.setAttribute('ambient-color', val) : this.removeAttribute('ambient-color'); }\n\n    get autoRedraw() { return this.hasAttribute('auto-redraw') || false; }\n    set autoRedraw(val) { val ? this.setAttribute('auto-redraw', true) : this.removeAttribute('auto-redraw'); }\n\n    get noAutoRecenter() { return this.hasAttribute('no-auto-recenter') || false; }\n    set noAutoRecenter(val) { val ? this.setAttribute('no-auto-recenter', true) : this.removeAttribute('no-auto-recenter'); }\n\n    get showCollision() { return this.hasAttribute('show-collision') || false; }\n    set showCollision(val) { val ? this.setAttribute('show-collision', true) : this.removeAttribute('show-collision'); }\n\n    get jointValues() {\n\n        const values = {};\n        if (this.robot) {\n\n            for (const name in this.robot.joints) {\n\n                const joint = this.robot.joints[name];\n                values[name] = joint.jointValue.length === 1 ? joint.angle : [...joint.jointValue];\n\n            }\n\n        }\n\n        return values;\n\n    }\n    set jointValues(val) { this.setJointValues(val); }\n\n    get angles() {\n\n        return this.jointValues;\n\n    }\n    set angles(v) {\n\n        this.jointValues = v;\n\n    }\n\n    /* Lifecycle Functions */\n    constructor() {\n\n        super();\n\n        this._requestId = 0;\n        this._dirty = false;\n        this._loadScheduled = false;\n        this.robot = null;\n        this.loadMeshFunc = null;\n        this.urlModifierFunc = null;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n\n        const ambientLight = new THREE.HemisphereLight(this.ambientColor, '#000');\n        ambientLight.groundColor.lerp(ambientLight.color, 0.5 * Math.PI);\n        ambientLight.intensity = 0.5;\n        ambientLight.position.set(0, 1, 0);\n        scene.add(ambientLight);\n\n        // Light setup\n        const dirLight = new THREE.DirectionalLight(0xffffff, Math.PI);\n        dirLight.position.set(4, 10, 1);\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.shadow.normalBias = 0.001;\n        dirLight.castShadow = true;\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setClearColor(0xffffff);\n        renderer.setClearAlpha(0);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.outputColorSpace = THREE.SRGBColorSpace;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n        camera.position.z = -10;\n\n        // World setup\n        const world = new THREE.Object3D();\n        scene.add(world);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneGeometry(40, 40),\n            new THREE.ShadowMaterial({ side: THREE.DoubleSide, transparent: true, opacity: 0.25 }),\n        );\n        plane.rotation.x = -Math.PI / 2;\n        plane.position.y = -0.5;\n        plane.receiveShadow = true;\n        plane.scale.set(10, 10, 10);\n        scene.add(plane);\n\n        // Controls setup\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.rotateSpeed = 2.0;\n        controls.zoomSpeed = 5;\n        controls.panSpeed = 2;\n        controls.enableZoom = true;\n        controls.enableDamping = false;\n        controls.maxDistance = 50;\n        controls.minDistance = 0.25;\n        controls.addEventListener('change', () => this.recenter());\n\n        this.scene = scene;\n        this.world = world;\n        this.renderer = renderer;\n        this.camera = camera;\n        this.controls = controls;\n        this.plane = plane;\n        this.directionalLight = dirLight;\n        this.ambientLight = ambientLight;\n\n        this._setUp(this.up);\n\n        this._collisionMaterial = new MeshPhongMaterial({\n            transparent: true,\n            opacity: 0.35,\n            shininess: 2.5,\n            premultipliedAlpha: true,\n            color: 0xffbe38,\n            polygonOffset: true,\n            polygonOffsetFactor: -1,\n            polygonOffsetUnits: -1,\n        });\n\n        const _renderLoop = () => {\n\n            if (this.parentNode) {\n\n                this.updateSize();\n\n                if (this._dirty || this.autoRedraw) {\n\n                    if (!this.noAutoRecenter) {\n\n                        this._updateEnvironment();\n                    }\n\n                    this.renderer.render(scene, camera);\n                    this._dirty = false;\n\n                }\n\n                // update controls after the environment in\n                // case the controls are retargeted\n                this.controls.update();\n\n            }\n            this._renderLoopId = requestAnimationFrame(_renderLoop);\n\n        };\n        _renderLoop();\n\n    }\n\n    connectedCallback() {\n\n        // Add our initialize styles for the element if they haven't\n        // been added yet\n        if (!this.constructor._styletag) {\n\n            const styletag = document.createElement('style');\n            styletag.innerHTML =\n            `\n                ${ this.tagName } { display: block; }\n                ${ this.tagName } canvas {\n                    width: 100%;\n                    height: 100%;\n                }\n            `;\n            document.head.appendChild(styletag);\n            this.constructor._styletag = styletag;\n\n        }\n\n        // add the renderer\n        if (this.childElementCount === 0) {\n\n            this.appendChild(this.renderer.domElement);\n\n        }\n\n        this.updateSize();\n        requestAnimationFrame(() => this.updateSize());\n\n    }\n\n    disconnectedCallback() {\n\n        cancelAnimationFrame(this._renderLoopId);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        this._updateCollisionVisibility();\n        if (!this.noAutoRecenter) {\n            this.recenter();\n        }\n\n        switch (attr) {\n\n            case 'package':\n            case 'urdf': {\n\n                this._scheduleLoad();\n                break;\n\n            }\n\n            case 'up': {\n\n                this._setUp(this.up);\n                break;\n\n            }\n\n            case 'ambient-color': {\n\n                this.ambientLight.color.set(this.ambientColor);\n                this.ambientLight.groundColor.set('#000').lerp(this.ambientLight.color, 0.5);\n                break;\n\n            }\n\n            case 'ignore-limits': {\n\n                this._setIgnoreLimits(this.ignoreLimits, true);\n                break;\n\n            }\n\n        }\n\n    }\n\n    /* Public API */\n    updateSize() {\n\n        const r = this.renderer;\n        const w = this.clientWidth;\n        const h = this.clientHeight;\n        const currSize = r.getSize(tempVec2);\n\n        if (currSize.width !== w || currSize.height !== h) {\n\n            this.recenter();\n\n        }\n\n        r.setPixelRatio(window.devicePixelRatio);\n        r.setSize(w, h, false);\n\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n\n    }\n\n    redraw() {\n\n        this._dirty = true;\n    }\n\n    recenter() {\n\n        this._updateEnvironment();\n        this.redraw();\n\n    }\n\n    // Set the joint with jointName to\n    // angle in degrees\n    setJointValue(jointName, ...values) {\n\n        if (!this.robot) return;\n        if (!this.robot.joints[jointName]) return;\n\n        if (this.robot.joints[jointName].setJointValue(...values)) {\n\n            this.redraw();\n            this.dispatchEvent(new CustomEvent('angle-change', { bubbles: true, cancelable: true, detail: jointName }));\n\n        }\n\n    }\n\n    setJointValues(values) {\n\n        for (const name in values) this.setJointValue(name, values[name]);\n\n    }\n\n    /* Private Functions */\n    // Updates the position of the plane to be at the\n    // lowest point below the robot and focuses the\n    // camera on the center of the scene\n    _updateEnvironment() {\n\n        const robot = this.robot;\n        if (!robot) return;\n\n        this.world.updateMatrixWorld();\n\n        const bbox = new THREE.Box3();\n        bbox.makeEmpty();\n        robot.traverse(c => {\n            if (c.isURDFVisual) {\n                bbox.expandByObject(c);\n            }\n        });\n\n        const center = bbox.getCenter(new THREE.Vector3());\n        this.controls.target.y = center.y;\n        this.plane.position.y = bbox.min.y - 1e-3;\n\n        const dirLight = this.directionalLight;\n        dirLight.castShadow = this.displayShadow;\n\n        if (this.displayShadow) {\n\n            // Update the shadow camera rendering bounds to encapsulate the\n            // model. We use the bounding sphere of the bounding box for\n            // simplicity -- this could be a tighter fit.\n            const sphere = bbox.getBoundingSphere(new THREE.Sphere());\n            const minmax = sphere.radius;\n            const cam = dirLight.shadow.camera;\n            cam.left = cam.bottom = -minmax;\n            cam.right = cam.top = minmax;\n\n            // Update the camera to focus on the center of the model so the\n            // shadow can encapsulate it\n            const offset = dirLight.position.clone().sub(dirLight.target.position);\n            dirLight.target.position.copy(center);\n            dirLight.position.copy(center).add(offset);\n\n            cam.updateProjectionMatrix();\n\n        }\n\n    }\n\n    _scheduleLoad() {\n\n        // if our current model is already what's being requested\n        // or has been loaded then early out\n        if (this._prevload === `${ this.package }|${ this.urdf }`) return;\n        this._prevload = `${ this.package }|${ this.urdf }`;\n\n        // if we're already waiting on a load then early out\n        if (this._loadScheduled) return;\n        this._loadScheduled = true;\n\n        if (this.robot) {\n\n            this.robot.traverse(c => c.dispose && c.dispose());\n            this.robot.parent.remove(this.robot);\n            this.robot = null;\n\n        }\n\n        requestAnimationFrame(() => {\n\n            this._loadUrdf(this.package, this.urdf);\n            this._loadScheduled = false;\n\n        });\n\n    }\n\n    // Watch the package and urdf field and load the robot model.\n    // This should _only_ be called from _scheduleLoad because that\n    // ensures the that current robot has been removed\n    _loadUrdf(pkg, urdf) {\n\n        this.dispatchEvent(new CustomEvent('urdf-change', { bubbles: true, cancelable: true, composed: true }));\n\n        if (urdf) {\n\n            // Keep track of this request and make\n            // sure it doesn't get overwritten by\n            // a subsequent one\n            this._requestId++;\n            const requestId = this._requestId;\n\n            const updateMaterials = mesh => {\n\n                mesh.traverse(c => {\n\n                    if (c.isMesh) {\n\n                        c.castShadow = true;\n                        c.receiveShadow = true;\n\n                        if (c.material) {\n\n                            const mats =\n                                (Array.isArray(c.material) ? c.material : [c.material])\n                                    .map(m => {\n\n                                        if (m instanceof THREE.MeshBasicMaterial) {\n\n                                            m = new THREE.MeshPhongMaterial();\n\n                                        }\n\n                                        if (m.map) {\n\n                                            m.map.colorSpace = THREE.SRGBColorSpace;\n\n                                        }\n\n                                        return m;\n\n                                    });\n                            c.material = mats.length === 1 ? mats[0] : mats;\n\n                        }\n\n                    }\n\n                });\n\n            };\n\n            if (pkg.includes(':') && (pkg.split(':')[1].substring(0, 2)) !== '//') {\n                // E.g. pkg = \"pkg_name: path/to/pkg_name, pk2: path2/to/pk2\"}\n\n                // Convert pkg(s) into a map. E.g.\n                // { \"pkg_name\": \"path/to/pkg_name\",\n                //   \"pk2\":      \"path2/to/pk2\"      }\n\n                pkg = pkg.split(',').reduce((map, value) => {\n\n                    const split = value.split(/:/).filter(x => !!x);\n                    const pkgName = split.shift().trim();\n                    const pkgPath = split.join(':').trim();\n                    map[pkgName] = pkgPath;\n\n                    return map;\n\n                }, {});\n            }\n\n            let robot = null;\n            const manager = new THREE.LoadingManager();\n            manager.onLoad = () => {\n\n                // If another request has come in to load a new\n                // robot, then ignore this one\n                if (this._requestId !== requestId) {\n\n                    robot.traverse(c => c.dispose && c.dispose());\n                    return;\n\n                }\n\n                this.robot = robot;\n                this.world.add(robot);\n                updateMaterials(robot);\n\n                this._setIgnoreLimits(this.ignoreLimits);\n                this._updateCollisionVisibility();\n\n                this.dispatchEvent(new CustomEvent('urdf-processed', { bubbles: true, cancelable: true, composed: true }));\n                this.dispatchEvent(new CustomEvent('geometry-loaded', { bubbles: true, cancelable: true, composed: true }));\n\n                this.recenter();\n\n            };\n\n            if (this.urlModifierFunc) {\n\n                manager.setURLModifier(this.urlModifierFunc);\n\n            }\n\n            const loader = new URDFLoader(manager);\n            loader.packages = pkg;\n            loader.loadMeshCb = this.loadMeshFunc;\n            loader.fetchOptions = { mode: 'cors', credentials: 'same-origin' };\n            loader.parseCollision = true;\n            loader.load(urdf, model => robot = model);\n\n        }\n\n    }\n\n    _updateCollisionVisibility() {\n\n        const showCollision = this.showCollision;\n        const collisionMaterial = this._collisionMaterial;\n        const robot = this.robot;\n\n        if (robot === null) return;\n\n        const colliders = [];\n        robot.traverse(c => {\n\n            if (c.isURDFCollider) {\n\n                c.visible = showCollision;\n                colliders.push(c);\n\n            }\n\n        });\n\n        colliders.forEach(coll => {\n\n            coll.traverse(c => {\n\n                if (c.isMesh) {\n\n                    c.raycast = emptyRaycast;\n                    c.material = collisionMaterial;\n                    c.castShadow = false;\n\n                }\n\n            });\n\n        });\n\n    }\n\n    // Watch the coordinate frame and update the\n    // rotation of the scene to match\n    _setUp(up) {\n\n        if (!up) up = '+Z';\n        up = up.toUpperCase();\n        const sign = up.replace(/[^-+]/g, '')[0] || '+';\n        const axis = up.replace(/[^XYZ]/gi, '')[0] || 'Z';\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        if (axis === 'X') this.world.rotation.set(0, 0, sign === '+' ? HALFPI : -HALFPI);\n        if (axis === 'Z') this.world.rotation.set(sign === '+' ? -HALFPI : HALFPI, 0, 0);\n        if (axis === 'Y') this.world.rotation.set(sign === '+' ? 0 : PI, 0, 0);\n\n    }\n\n    // Updates the current robot's angles to ignore\n    // joint limits or not\n    _setIgnoreLimits(ignore, dispatch = false) {\n\n        if (this.robot) {\n\n            Object\n                .values(this.robot.joints)\n                .forEach(joint => {\n\n                    joint.ignoreLimits = ignore;\n                    joint.setJointValue(...joint.jointValue);\n\n                });\n\n        }\n\n        if (dispatch) {\n\n            this.dispatchEvent(new CustomEvent('ignore-limits-change', { bubbles: true, cancelable: true, composed: true }));\n\n        }\n\n    }\n\n};","import { Raycaster, Vector3, Plane, Vector2 } from 'three';\n\n// Find the nearest parent that is a joint\nfunction isJoint(j) {\n\n    return j.isURDFJoint && j.jointType !== 'fixed';\n\n};\n\nfunction findNearestJoint(child) {\n\n    let curr = child;\n    while (curr) {\n\n        if (isJoint(curr)) {\n\n            return curr;\n\n        }\n\n        curr = curr.parent;\n\n    }\n\n    return curr;\n\n};\n\nconst prevHitPoint = new Vector3();\nconst newHitPoint = new Vector3();\nconst pivotPoint = new Vector3();\nconst tempVector = new Vector3();\nconst tempVector2 = new Vector3();\nconst projectedStartPoint = new Vector3();\nconst projectedEndPoint = new Vector3();\nconst plane = new Plane();\nexport class URDFDragControls {\n\n    constructor(scene) {\n\n        this.enabled = true;\n        this.scene = scene;\n        this.raycaster = new Raycaster();\n        this.initialGrabPoint = new Vector3();\n\n        this.hitDistance = -1;\n        this.hovered = null;\n        this.manipulating = null;\n\n    }\n\n    update() {\n\n        const {\n            raycaster,\n            hovered,\n            manipulating,\n            scene,\n        } = this;\n\n        if (manipulating) {\n\n            return;\n\n        }\n\n        let hoveredJoint = null;\n        const intersections = raycaster.intersectObject(scene, true);\n        if (intersections.length !== 0) {\n\n            const hit = intersections[0];\n            this.hitDistance = hit.distance;\n            hoveredJoint = findNearestJoint(hit.object);\n            this.initialGrabPoint.copy(hit.point);\n\n        }\n\n        if (hoveredJoint !== hovered) {\n\n            if (hovered) {\n\n                this.onUnhover(hovered);\n\n            }\n\n            this.hovered = hoveredJoint;\n\n            if (hoveredJoint) {\n\n                this.onHover(hoveredJoint);\n\n            }\n\n        }\n\n    }\n\n    updateJoint(joint, angle) {\n\n        joint.setJointValue(angle);\n\n    }\n\n    onDragStart(joint) {\n\n    }\n\n    onDragEnd(joint) {\n\n    }\n\n    onHover(joint) {\n\n    }\n\n    onUnhover(joint) {\n\n    }\n\n    getRevoluteDelta(joint, startPoint, endPoint) {\n\n        // set up the plane\n        tempVector\n            .copy(joint.axis)\n            .transformDirection(joint.matrixWorld)\n            .normalize();\n        pivotPoint\n            .set(0, 0, 0)\n            .applyMatrix4(joint.matrixWorld);\n        plane\n            .setFromNormalAndCoplanarPoint(tempVector, pivotPoint);\n\n        // project the drag points onto the plane\n        plane.projectPoint(startPoint, projectedStartPoint);\n        plane.projectPoint(endPoint, projectedEndPoint);\n\n        // get the directions relative to the pivot\n        projectedStartPoint.sub(pivotPoint);\n        projectedEndPoint.sub(pivotPoint);\n\n        tempVector.crossVectors(projectedStartPoint, projectedEndPoint);\n\n        const direction = Math.sign(tempVector.dot(plane.normal));\n        return direction * projectedEndPoint.angleTo(projectedStartPoint);\n\n    }\n\n    getPrismaticDelta(joint, startPoint, endPoint) {\n\n        tempVector.subVectors(endPoint, startPoint);\n        plane\n            .normal\n            .copy(joint.axis)\n            .transformDirection(joint.parent.matrixWorld)\n            .normalize();\n\n        return tempVector.dot(plane.normal);\n\n    }\n\n    moveRay(toRay) {\n\n        const { raycaster, hitDistance, manipulating } = this;\n        const { ray } = raycaster;\n\n        if (manipulating) {\n\n            ray.at(hitDistance, prevHitPoint);\n            toRay.at(hitDistance, newHitPoint);\n\n            let delta = 0;\n            if (manipulating.jointType === 'revolute' || manipulating.jointType === 'continuous') {\n\n                delta = this.getRevoluteDelta(manipulating, prevHitPoint, newHitPoint);\n\n            } else if (manipulating.jointType === 'prismatic') {\n\n                delta = this.getPrismaticDelta(manipulating, prevHitPoint, newHitPoint);\n\n            }\n\n            if (delta) {\n\n                this.updateJoint(manipulating, manipulating.angle + delta);\n\n            }\n\n        }\n\n        this.raycaster.ray.copy(toRay);\n        this.update();\n\n    }\n\n    setGrabbed(grabbed) {\n\n        const { hovered, manipulating } = this;\n\n        if (grabbed) {\n\n            if (manipulating !== null || hovered === null) {\n\n                return;\n\n            }\n\n            this.manipulating = hovered;\n            this.onDragStart(hovered);\n\n        } else {\n\n            if (this.manipulating === null) {\n                return;\n            }\n\n            this.onDragEnd(this.manipulating);\n            this.manipulating = null;\n            this.update();\n\n        }\n\n    }\n\n}\n\nexport class PointerURDFDragControls extends URDFDragControls {\n\n    constructor(scene, camera, domElement) {\n\n        super(scene);\n        this.camera = camera;\n        this.domElement = domElement;\n\n        const raycaster = new Raycaster();\n        const mouse = new Vector2();\n\n        function updateMouse(e) {\n\n            mouse.x = ((e.pageX - domElement.offsetLeft) / domElement.offsetWidth) * 2 - 1;\n            mouse.y = -((e.pageY - domElement.offsetTop) / domElement.offsetHeight) * 2 + 1;\n\n        }\n\n        this._mouseDown = e => {\n\n            updateMouse(e);\n            raycaster.setFromCamera(mouse, this.camera);\n            this.moveRay(raycaster.ray);\n            this.setGrabbed(true);\n\n        };\n\n        this._mouseMove = e => {\n\n            updateMouse(e);\n            raycaster.setFromCamera(mouse, this.camera);\n            this.moveRay(raycaster.ray);\n\n        };\n\n        this._mouseUp = e => {\n\n            updateMouse(e);\n            raycaster.setFromCamera(mouse, this.camera);\n            this.moveRay(raycaster.ray);\n            this.setGrabbed(false);\n\n        };\n\n        domElement.addEventListener('mousedown', this._mouseDown);\n        domElement.addEventListener('mousemove', this._mouseMove);\n        domElement.addEventListener('mouseup', this._mouseUp);\n\n    }\n\n    getRevoluteDelta(joint, startPoint, endPoint) {\n\n        const { camera, initialGrabPoint } = this;\n\n        // set up the plane\n        tempVector\n            .copy(joint.axis)\n            .transformDirection(joint.matrixWorld)\n            .normalize();\n        pivotPoint\n            .set(0, 0, 0)\n            .applyMatrix4(joint.matrixWorld);\n        plane\n            .setFromNormalAndCoplanarPoint(tempVector, pivotPoint);\n\n        tempVector\n            .copy(camera.position)\n            .sub(initialGrabPoint)\n            .normalize();\n\n        // if looking into the plane of rotation\n        if (Math.abs(tempVector.dot(plane.normal)) > 0.3) {\n\n            return super.getRevoluteDelta(joint, startPoint, endPoint);\n\n        } else {\n\n            // get the up direction\n            tempVector.set(0, 1, 0).transformDirection(camera.matrixWorld);\n\n            // get points projected onto the plane of rotation\n            plane.projectPoint(startPoint, projectedStartPoint);\n            plane.projectPoint(endPoint, projectedEndPoint);\n\n            tempVector.set(0, 0, -1).transformDirection(camera.matrixWorld);\n            tempVector.cross(plane.normal);\n            tempVector2.subVectors(endPoint, startPoint);\n\n            return tempVector.dot(tempVector2);\n\n        }\n\n    }\n\n    dispose() {\n\n        const { domElement } = this;\n        domElement.removeEventListener('mousedown', this._mouseDown);\n        domElement.removeEventListener('mousemove', this._mouseMove);\n        domElement.removeEventListener('mouseup', this._mouseUp);\n\n    }\n\n}","import * as THREE from 'three';\nimport URDFViewer from './urdf-viewer-element.js';\nimport { PointerURDFDragControls } from './URDFDragControls.js';\n\n// urdf-manipulator element\n// Displays a URDF model that can be manipulated with the mouse\n\n// Events\n// joint-mouseover: Fired when a joint is hovered over\n// joint-mouseout: Fired when a joint is no longer hovered over\n// manipulate-start: Fires when a joint is manipulated\n// manipulate-end: Fires when a joint is done being manipulated\nexport default\nclass URDFManipulator extends URDFViewer {\n\n    static get observedAttributes() {\n\n        return ['highlight-color', ...super.observedAttributes];\n\n    }\n\n    get disableDragging() { return this.hasAttribute('disable-dragging'); }\n    set disableDragging(val) { val ? this.setAttribute('disable-dragging', !!val) : this.removeAttribute('disable-dragging'); }\n\n    get highlightColor() { return this.getAttribute('highlight-color') || '#FFFFFF'; }\n    set highlightColor(val) { val ? this.setAttribute('highlight-color', val) : this.removeAttribute('highlight-color'); }\n\n    constructor(...args) {\n\n        super(...args);\n\n        // The highlight material\n        this.highlightMaterial =\n            new THREE.MeshPhongMaterial({\n                shininess: 10,\n                color: this.highlightColor,\n                emissive: this.highlightColor,\n                emissiveIntensity: 0.25,\n            });\n\n        const isJoint = j => {\n\n            return j.isURDFJoint && j.jointType !== 'fixed';\n\n        };\n\n        // Highlight the link geometry under a joint\n        const highlightLinkGeometry = (m, revert) => {\n\n            const traverse = c => {\n\n                // Set or revert the highlight color\n                if (c.type === 'Mesh') {\n\n                    if (revert) {\n\n                        c.material = c.__origMaterial;\n                        delete c.__origMaterial;\n\n                    } else {\n\n                        c.__origMaterial = c.material;\n                        c.material = this.highlightMaterial;\n\n                    }\n\n                }\n\n                // Look into the children and stop if the next child is\n                // another joint\n                if (c === m || !isJoint(c)) {\n\n                    for (let i = 0; i < c.children.length; i++) {\n\n                        const child = c.children[i];\n                        if (!child.isURDFCollider) {\n\n                            traverse(c.children[i]);\n\n                        }\n\n                    }\n\n                }\n\n            };\n\n            traverse(m);\n\n        };\n\n        const el = this.renderer.domElement;\n\n        const dragControls = new PointerURDFDragControls(this.scene, this.camera, el);\n        dragControls.onDragStart = joint => {\n\n            this.dispatchEvent(new CustomEvent('manipulate-start', { bubbles: true, cancelable: true, detail: joint.name }));\n            this.controls.enabled = false;\n            this.redraw();\n\n        };\n        dragControls.onDragEnd = joint => {\n\n            this.dispatchEvent(new CustomEvent('manipulate-end', { bubbles: true, cancelable: true, detail: joint.name }));\n            this.controls.enabled = true;\n            this.redraw();\n\n        };\n        dragControls.updateJoint = (joint, angle) => {\n\n            this.setJointValue(joint.name, angle);\n\n        };\n        dragControls.onHover = joint => {\n\n            highlightLinkGeometry(joint, false);\n            this.dispatchEvent(new CustomEvent('joint-mouseover', { bubbles: true, cancelable: true, detail: joint.name }));\n            this.redraw();\n\n        };\n        dragControls.onUnhover = joint => {\n\n            highlightLinkGeometry(joint, true);\n            this.dispatchEvent(new CustomEvent('joint-mouseout', { bubbles: true, cancelable: true, detail: joint.name }));\n            this.redraw();\n\n        };\n\n        this.dragControls = dragControls;\n\n    }\n\n    disconnectedCallback() {\n\n        super.disconnectedCallback();\n        this.dragControls.dispose();\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        super.attributeChangedCallback(attr, oldval, newval);\n\n        switch (attr) {\n\n            case 'highlight-color':\n                this.highlightMaterial.color.set(this.highlightColor);\n                this.highlightMaterial.emissive.set(this.highlightColor);\n                break;\n\n        }\n\n    }\n\n};"],"names":["_tempAxis","Vector3","URDFBase","_Object3D","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","urdfNode","urdfName","_inherits","_createClass","key","value","copy","source","recursive","_get","_getPrototypeOf","prototype","call","Object3D","URDFCollider","_URDFBase","_this2","_len2","_key2","isURDFCollider","type","URDFVisual","_URDFBase2","_this3","_len3","_key3","isURDFVisual","URDFLink","_URDFBase3","_this4","_len4","_key4","isURDFLink","URDFJoint","_URDFBase4","_this5","_len5","_key5","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","mimicJoints","dependentMimicJoints","gpu","GPU","calculateQuaternions","createKernel","angle","x","y","z","cosHalfAngle","Math","cos","sinHalfAngle","sin","output","returnType","get","_jointType","set","v","matrixWorldNeedsUpdate","fill","clone","_toConsumableArray","map","joint","setJointValue","_len6","values","_key6","parseFloat","position","quaternion","didUpdate","forEach","mimicJoint","mimicValues","multiplier","offset","axisVector","THREE","Quaternion","setFromAxisAngle","min","max","premultiply","pos","applyEuler","rotation","addScaledVector","addDependentMimicJoint","includes","push","URDFMimicJoint","_URDFJoint","_this6","_len7","_key7","updateFromMimickedJoint","_this7","_get2","_len8","_key8","modifiedValues","apply","URDFRobot","_URDFLink","_this8","_len9","_key9","isURDFRobot","urdfRobotNode","robotName","links","joints","colliders","visual","frames","_this9","traverse","c","name","_objectSpread","getFrame","jointName","_len10","_key10","setJointValues","didChange","isArray","tempQuaternion","tempEuler","Euler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","undefined","setFromEuler","multiply","URDFLoader","manager","DefaultLoadingManager","loadMeshCb","defaultMeshLoader","bind","parseVisual","parseCollision","packages","workingPath","fetchOptions","loadAsync","urdf","Promise","resolve","reject","load","onComplete","onProgress","onError","LoaderUtils","extractUrlBase","urdfPath","resolveURL","itemStart","fetch","then","res","ok","text","Error","status","statusText","data","model","parse","itemEnd","e","console","error","itemError","content","linkMap","jointMap","materialMap","resolvePath","path","test","_path$replace$split","replace","_path$replace$split2","_slicedToArray","targetPkg","relPath","endsWith","Function","_typeof","processUrdf","children","Document","Element","parser","DOMParser","parseFromString","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","m","processMaterial","visualMap","colliderMap","l","isRoot","querySelector","processLink","j","processJoint","jointList","Object","uniqueJoints","Set","iterFunction","has","add","mimicTag","find","n","parent","child","xyz","axisNode","axisXYZ","normalize","masterJointName","masterJoint","link","target","visualNodes","vn","processLinkElement","hasAttribute","collisionNodes","cn","node","matNodes","material","MeshPhongMaterial","rgba","color","setRGB","opacity","transparent","depthWrite","filename","loader","TextureLoader","filePath","colorSpace","SRGBColorSpace","isCollisionNode","materialNode","group","geoType","scaleAttr","scale","err","Mesh","_x","_y","_z","_w","primitiveModel","geometry","BoxGeometry","size","SphereGeometry","radius","CylinderGeometry","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene","warn","tempVec2","Vector2","emptyRaycast","URDFViewer","_HTMLElement","_requestId","_dirty","_loadScheduled","loadMeshFunc","urlModifierFunc","Scene","ambientLight","HemisphereLight","ambientColor","groundColor","lerp","intensity","dirLight","DirectionalLight","shadow","mapSize","width","height","normalBias","castShadow","renderer","WebGLRenderer","antialias","alpha","setClearColor","setClearAlpha","shadowMap","enabled","PCFSoftShadowMap","outputColorSpace","camera","PerspectiveCamera","world","plane","PlaneGeometry","ShadowMaterial","side","DoubleSide","receiveShadow","controls","OrbitControls","domElement","rotateSpeed","zoomSpeed","panSpeed","enableZoom","enableDamping","maxDistance","minDistance","addEventListener","recenter","directionalLight","_setUp","up","_collisionMaterial","shininess","premultipliedAlpha","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","_renderLoop","parentNode","updateSize","autoRedraw","noAutoRecenter","_updateEnvironment","render","update","_renderLoopId","requestAnimationFrame","setAttribute","removeAttribute","jointValues","connectedCallback","constructor","_styletag","styletag","document","createElement","innerHTML","tagName","head","appendChild","childElementCount","disconnectedCallback","cancelAnimationFrame","attributeChangedCallback","attr","oldval","newval","_updateCollisionVisibility","_scheduleLoad","_setIgnoreLimits","r","w","clientWidth","h","clientHeight","currSize","getSize","setPixelRatio","window","devicePixelRatio","setSize","aspect","updateProjectionMatrix","redraw","_this$robot$joints$jo","dispatchEvent","CustomEvent","bubbles","cancelable","detail","updateMatrixWorld","bbox","Box3","makeEmpty","expandByObject","center","getCenter","displayShadow","sphere","getBoundingSphere","Sphere","minmax","cam","left","bottom","right","top","sub","_prevload","dispose","remove","_loadUrdf","pkg","composed","requestId","updateMaterials","isMesh","mats","MeshBasicMaterial","substring","reduce","pkgName","shift","pkgPath","join","LoadingManager","onLoad","setURLModifier","mode","credentials","showCollision","collisionMaterial","visible","coll","raycast","toUpperCase","sign","HALFPI","ignore","dispatch","_wrapNativeSuper","HTMLElement","isJoint","findNearestJoint","curr","prevHitPoint","newHitPoint","pivotPoint","tempVector","tempVector2","projectedStartPoint","projectedEndPoint","Plane","URDFDragControls","raycaster","Raycaster","initialGrabPoint","hitDistance","hovered","manipulating","hoveredJoint","intersections","intersectObject","hit","distance","object","point","onUnhover","onHover","updateJoint","onDragStart","onDragEnd","getRevoluteDelta","startPoint","endPoint","transformDirection","matrixWorld","applyMatrix4","setFromNormalAndCoplanarPoint","projectPoint","crossVectors","direction","dot","normal","angleTo","getPrismaticDelta","subVectors","moveRay","toRay","ray","at","delta","setGrabbed","grabbed","PointerURDFDragControls","_URDFDragControls","mouse","updateMouse","pageX","offsetLeft","offsetWidth","pageY","offsetTop","offsetHeight","_mouseDown","setFromCamera","_mouseMove","_mouseUp","abs","cross","removeEventListener","URDFManipulator","_URDFViewer","highlightMaterial","highlightColor","emissive","emissiveIntensity","highlightLinkGeometry","revert","__origMaterial","i","el","dragControls"],"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"}