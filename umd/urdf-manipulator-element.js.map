{"version":3,"file":"urdf-manipulator-element.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js","../src/urdf-viewer-element.js","../src/urdf-manipulator-element.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    show() {\n        this.visible = true;\n    }\n\n    hide() {\n        this.visible = false;\n    }\n\n    delete() {\n        this.parent.remove(this);\n        this.children.map(child => {\n            this.remove(child);\n        });\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n","import * as THREE from 'three';\nimport { AxesHelper } from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, makeURDFCollider } from './URDFClasses.js';\nimport { MeshBVH, acceleratedRaycast } from 'three-mesh-bvh';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\n    class URDFLoader {\n\n    constructor(manager, allowMeshBVH = false) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.allowMeshBVH = allowMeshBVH;\n        this.retryMap = {};\n\n    }\n\n    /* Public API */\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError, options) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        const errors = {};\n\n        let managerOnErrorDefault = function () { };\n        let managerOnProgressDefault = function () { };\n        let managerOnLoadDefault = function () { };\n        let model;\n\n        if (manager.onError) {\n\n            managerOnErrorDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onProgress) {\n\n            managerOnProgressDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onLoad) {\n\n            managerOnLoadDefault = manager.onLoad.bind(manager);\n\n        }\n\n        const that = this;\n        manager.onError = function (url) {\n\n            errors[url] = 'Error in loading resource';\n\n            if (onError) {\n\n                onError({\n                    url,\n                    retry: that.retryMap[url],\n                });\n\n            }\n\n            managerOnErrorDefault(url);\n\n        };\n\n        manager.onProgress = function (url, itemsLoaded, itemsTotal) {\n\n            if (onProgress) {\n\n                onProgress(url, itemsLoaded, itemsTotal);\n\n            }\n\n            managerOnProgressDefault(url, itemsLoaded, itemsTotal);\n\n        };\n\n        manager.onLoad = function () {\n\n            if (onComplete) {\n\n                const partialErrors = Object.keys(errors).length === 0\n                    ? undefined\n                    : errors;\n\n                onComplete(model, partialErrors);\n\n            }\n\n            managerOnLoadDefault();\n\n        };\n\n        options = Object.assign({\n            workingPath,\n        }, options);\n\n        manager.itemStart(urdfPath);\n        fetch(urdfPath, options.fetchOptions)\n            .then(res => res.text())\n            .then(data => {\n\n                model = this.parse(data, options);\n                window.model = model;\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                console.error('URDFLoader: Error parsing file.', e);\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content, options = {}) {\n\n        const packages = options.packages || '';\n        const loadMeshCb = options.loadMeshCb || this.defaultMeshLoader.bind(this);\n        const workingPath = options.workingPath || '';\n        const parseVisual = ('parseVisual' in options) ? options.parseVisual : true;\n        const parseCollision = options.parseCollision || false;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${targetPkg} not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        const processUrdf = data => {\n\n            const parser = new DOMParser();\n            const urdf = parser.parseFromString(data, 'text/xml');\n            const children = [...urdf.children];\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot.call(this, robotNode);\n\n        };\n\n\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [...robot.children];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial.call(this, m);\n\n            });\n\n            // Create the <link> map\n            links.forEach(l => {\n\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${name}\"]`) === null;\n                linkMap[name] = processLink.call(this, l, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint.call(this, j);\n\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n\n            return obj;\n\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n\n            const children = [...joint.children];\n            const jointType = joint.getAttribute('type');\n            const obj = new URDFJoint();\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                } else if (type === 'child') {\n\n                    child = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'parent') {\n\n                    parent = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'limit') {\n\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n                }\n\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n\n            // Add AxesHelper\n            const jointAxesHelper = new AxesHelper(0.5); // Customize size as needed\n            obj.add(jointAxesHelper);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n\n            if (axisNode) {\n\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n\n            }\n\n            return obj;\n\n        }\n\n        // Process the <link> nodes\n        function processLink(link, target = null) {\n\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [...link.children];\n            target.name = link.getAttribute('name');\n            target.urdfNode = link;\n\n            if (parseVisual) {\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => processLinkElement.call(this, vn, target, materialMap));\n            }\n            if (parseCollision) {\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(vn => processLinkElement.call(this, vn, target));\n            }\n            // Add AxesHelper\n            const linkAxesHelper = new AxesHelper(0.5); // Customize size as needed\n            target.add(linkAxesHelper);\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [...node.children];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n\n                } else if (type === 'texture') {\n\n                    const loader = new THREE.TextureLoader(manager);\n                    const filename = n.getAttribute('filename');\n                    const filePath = resolvePath(filename);\n                    const onError = () => {\n                        this.retryMap[filePath] = () => loader.load(filePath, () => null, () => null, onError);\n                    };\n                    material.map = loader.load(filePath, () => null, () => null, onError);\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, linkObj, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n            let scale = [1, 1, 1];\n\n            const children = [...vn.children];\n            let material = null;\n            let primitiveModel = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial.call(this, materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) scale = processTuple(scaleAttr);\n\n                            const cb = (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n                                    this.retryMap[filePath] = () => loadMeshCb(filePath, manager, cb);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n                                        if (this.allowMeshBVH) {\n                                            obj.raycast = acceleratedRaycast;\n                                            obj.geometry.boundsTree = new MeshBVH(obj.geometry);\n                                        }\n                                    }\n\n                                    linkObj.add(obj);\n\n                                    obj.position.set(xyz[0], xyz[1], xyz[2]);\n                                    obj.rotation.set(0, 0, 0);\n\n                                    // multiply the existing scale by the scale components because\n                                    // the loaded model could have important scale values already applied\n                                    // to the root. Collada files, for example, can load in with a scale\n                                    // to convert the model units to meters.\n                                    obj.scale.x *= scale[0];\n                                    obj.scale.y *= scale[1];\n                                    obj.scale.z *= scale[2];\n\n                                    applyRotation(obj, rpy);\n\n                                    if (isCollisionNode) {\n\n                                        makeURDFCollider(obj);\n\n                                    }\n\n                                }\n\n                            };\n                            loadMeshCb(filePath, manager, cb);\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n\n                        linkObj.add(primitiveModel);\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'sphere') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'cylinder') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        if (this.allowMeshBVH) {\n                            primitiveModel.raycast = acceleratedRaycast;\n                            primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n                        }\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                }\n\n            });\n\n            // apply the position and rotation to the primitive geometry after\n            // the fact because it's guaranteed to have been scraped from the child\n            // nodes by this point\n            if (primitiveModel) {\n\n                applyRotation(primitiveModel, rpy, true);\n                primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\n\n            }\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl(?:\\?|$)/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae(?:\\?|$)/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${path}.\\nNo loader available`);\n\n        }\n\n    }\n\n};\n\nURDFLoader.prototype.parseFromString = function(urdfString, options) {\n    try {\n        const parser = new DOMParser();\n        const urdfDom = parser.parseFromString(urdfString, \"text/xml\");\n        \n        // Directly use the existing parse method if it can handle a DOM object\n        // Alternatively, convert the DOM to a string or another format as required by your parse method\n        const model = this.parse(urdfDom, options);\n        \n        if (options.onComplete) {\n            options.onComplete(model);\n        }\n    } catch (error) {\n        if (options.onError) {\n            options.onError(error);\n        }\n    }\n};\n\n\n// In URDFLoader.js\nURDFLoader.prototype.loadFromString = function(urdfString, onComplete) {\n    try {\n        // Assuming the existing parse method can handle XML DOM, convert the string to DOM first\n        const parser = new DOMParser();\n        const urdfDOM = parser.parseFromString(urdfString, \"text/xml\");\n        const model = this.parse(urdfDOM, {});\n        if (onComplete) {\n            onComplete(model);\n        }\n    } catch (error) {\n        console.error('Failed to parse URDF string:', error);\n    }\n};\n\n// Add or modify URDFJoint to handle updates more dynamically\nURDFJoint.prototype.updateProperties = function (params) {\n    if (params.origin) {\n        this.origin.set(...params.origin.xyz);\n        const euler = new THREE.Euler(...params.origin.rpy, 'XYZ');\n        this.origQuaternion.setFromEuler(euler);\n    }\n    if (params.axis) {\n        this.axis.set(...params.axis);\n    }\n    if (params.limit) {\n        this.limit.lower = params.limit.lower;\n        this.limit.upper = params.limit.upper;\n    }\n\n    // After updating properties, you might need to recalculate the joint's position in the world\n    this.updateTransform();\n}\n\nURDFJoint.prototype.updateTransform = function () {\n    // Apply new position and rotation\n    this.position.set(...this.origin.toArray());\n    this.quaternion.copy(this.origQuaternion);\n\n    // Ensure updates affect the visual representation\n    this.updateMatrix();\n    this.updateMatrixWorld(true);\n\n    // If part of a larger kinematic chain, inform parent or children to update as well\n    if (this.parent) {\n        this.parent.updateMatrixWorld(true);\n    }\n}\n\n// Call this method after changing joint parameters\nfunction refreshScene() {\n    if (viewer && viewer.robot) {\n        Object.values(viewer.robot.joints).forEach(joint => joint.updateTransform());\n        viewer.updateScene();  // Assuming this triggers a re-render\n    }\n}\n\n\n// Assuming URDFLoader, URDFRobot, and URDFJoint are already defined elsewhere in your script\n\n/* Add update joint functionality to URDFRobot */\nURDFRobot.prototype.updateJoint = function (jointName, params) {\n    const joint = this.joints[jointName];\n    if (joint) {\n        // Update joint parameters like origin, axis, limits, etc.\n        if (params.origin) {\n            joint.origin = params.origin;\n        }\n        if (params.axis) {\n            joint.axis.set(...params.axis);\n        }\n        if (params.limit) {\n            joint.limit.lower = params.limit.lower;\n            joint.limit.upper = params.limit.upper;\n        }\n        // Trigger a scene update or similar if needed\n        this.refreshScene(); // This method would need to be implemented based on your application's structure\n    }\n};\n\n/* Method to refresh the visual scene, to be defined based on how you're managing your THREE.js scene */\nURDFRobot.prototype.refreshScene = function () {\n    // Implementation depends on how the scene is managed, but you would typically mark the scene or object for update\n    // For example:\n    if (this.mesh) {\n        this.mesh.geometry.computeBoundingSphere();\n        this.mesh.geometry.computeVertexNormals();\n    }\n    // You might need to re-render the scene\n    render(); // This function would need to be defined in your global scope or passed in\n};\n\n// Extend URDFLoader to handle scene updates\nURDFLoader.prototype.applyUpdates = function () {\n    // This could be a method to apply pending updates or simply refresh parts of the model\n    if (window.model) {\n        window.model.refreshScene();\n    }\n};\nfunction render() {\n    renderer.render(scene, camera);\n    requestAnimationFrame(render);\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/js/controls/OrbitControls';\nimport URDFLoader from './URDFLoader.js';\n\n// urdf-viewer element\n// Loads and displays a 3D view of a URDF-formatted robot\n\n// Events\n// urdf-change: Fires when the URDF has finished loading and getting processed\n// urdf-processed: Fires when the URDF has finished loading and getting processed\n// geometry-loaded: Fires when all the geometry has been fully loaded\n// ignore-limits-change: Fires when the 'ignore-limits' attribute changes\n// angle-change: Fires when an angle changes\nexport default\nclass URDFViewer extends HTMLElement {\n\n    static get observedAttributes() {\n\n        return ['package', 'urdf', 'up', 'display-shadow', 'ambient-color', 'ignore-limits'];\n\n    }\n\n    get package() { return this.getAttribute('package') || ''; }\n    set package(val) { this.setAttribute('package', val); }\n\n    get urdf() { return this.getAttribute('urdf') || ''; }\n    set urdf(val) { this.setAttribute('urdf', val); }\n\n    get ignoreLimits() { return this.hasAttribute('ignore-limits') || false; }\n    set ignoreLimits(val) { val ? this.setAttribute('ignore-limits', val) : this.removeAttribute('ignore-limits'); }\n\n    get up() { return this.getAttribute('up') || '+Z'; }\n    set up(val) { this.setAttribute('up', val); }\n\n    get displayShadow() { return this.hasAttribute('display-shadow') || false; }\n    set displayShadow(val) { val ? this.setAttribute('display-shadow', '') : this.removeAttribute('display-shadow'); }\n\n    get ambientColor() { return this.getAttribute('ambient-color') || '#263238'; }\n    set ambientColor(val) { val ? this.setAttribute('ambient-color', val) : this.removeAttribute('ambient-color'); }\n\n    get autoRedraw() { return this.hasAttribute('auto-redraw') || false; }\n    set autoRedraw(val) { val ? this.setAttribute('auto-redraw', true) : this.removeAttribute('auto-redraw'); }\n\n    get noAutoRecenter() { return this.hasAttribute('no-auto-recenter') || false; }\n    set noAutoRecenter(val) { val ? this.setAttribute('no-auto-recenter', true) : this.removeAttribute('no-auto-recenter'); }\n\n    get angles() {\n\n        const angles = {};\n        if (this.robot) {\n\n            for (const name in this.robot.joints) angles[name] = this.robot.joints[name].angle;\n\n        }\n\n        return angles;\n\n    }\n    set angles(val) { this._setAngles(val); }\n\n    /* Lifecycle Functions */\n    constructor() {\n\n        super();\n\n        this._requestId = 0;\n        this._dirty = false;\n        this._loadScheduled = false;\n        this.robot = null;\n        this.loadMeshFunc = null;\n        this.urlModifierFunc = null;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n\n        const ambientLight = new THREE.HemisphereLight(this.ambientColor, '#000');\n        ambientLight.groundColor.lerp(ambientLight.color, 0.5);\n        ambientLight.intensity = 0.5;\n        ambientLight.position.set(0, 1, 0);\n        scene.add(ambientLight);\n\n        // Light setup\n        const dirLight = new THREE.DirectionalLight(0xffffff);\n        dirLight.position.set(4, 10, 1);\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.castShadow = true;\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setClearColor(0xffffff);\n        renderer.setClearAlpha(0);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.gammaOutput = true;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 2000);\n        camera.position.z = -10;\n\n        // World setup\n        const world = new THREE.Object3D();\n        scene.add(world);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(40, 40),\n            new THREE.ShadowMaterial({ side: THREE.DoubleSide, transparent: true, opacity: 0.5 })\n        );\n        plane.rotation.x = -Math.PI / 2;\n        plane.position.y = -0.5;\n        plane.receiveShadow = true;\n        plane.scale.set(10, 10, 10);\n        scene.add(plane);\n\n        // Controls setup\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.rotateSpeed = 2.0;\n        controls.zoomSpeed = 5;\n        controls.panSpeed = 2;\n        controls.enableZoom = true;\n        controls.enableDamping = false;\n        controls.maxDistance = 150;\n        controls.minDistance = 0.25;\n        controls.addEventListener('change', () => this.recenter());\n\n        this.scene = scene;\n        this.world = world;\n        this.renderer = renderer;\n        this.camera = camera;\n        this.controls = controls;\n        this.plane = plane;\n        this.directionalLight = dirLight;\n        this.ambientLight = ambientLight;\n\n        this._setUp(this.up);\n\n        const _renderLoop = () => {\n\n            if (this.parentNode) {\n\n                this.updateSize();\n\n                if (this._dirty || this.autoRedraw) {\n\n                    if (!this.noAutoRecenter) {\n\n                        this._updateEnvironment();\n                    }\n\n                    this.renderer.render(scene, camera);\n                    this._dirty = false;\n\n                }\n\n                // update controls after the environment in\n                // case the controls are retargeted\n                this.controls.update();\n\n            }\n            this._renderLoopId = requestAnimationFrame(_renderLoop);\n\n        };\n        _renderLoop();\n\n    }\n\n    connectedCallback() {\n\n        // Add our initialize styles for the element if they haven't\n        // been added yet\n        if (!this.constructor._styletag) {\n\n            const styletag = document.createElement('style');\n            styletag.innerHTML =\n            `\n                ${ this.tagName } { display: block; }\n                ${ this.tagName } canvas {\n                    width: 100%;\n                    height: 100%;\n                }\n            `;\n            document.head.appendChild(styletag);\n            this.constructor._styletag = styletag;\n\n        }\n\n        // add the renderer\n        if (this.childElementCount === 0) {\n\n            this.appendChild(this.renderer.domElement);\n\n        }\n\n        this.updateSize();\n        requestAnimationFrame(() => this.updateSize());\n\n    }\n\n    disconnectedCallback() {\n\n        cancelAnimationFrame(this._renderLoopId);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        this.recenter();\n\n        switch (attr) {\n\n            case 'package':\n            case 'urdf': {\n\n                this._scheduleLoad();\n                break;\n\n            }\n\n            case 'up': {\n\n                this._setUp(this.up);\n                break;\n\n            }\n\n            case 'ambient-color': {\n\n                this.ambientLight.color.set(this.ambientColor);\n                this.ambientLight.groundColor.set('#000').lerp(this.ambientLight.color, 0.5);\n                break;\n\n            }\n\n            case 'ignore-limits': {\n\n                this._setIgnoreLimits(this.ignoreLimits, true);\n                break;\n\n            }\n\n        }\n\n    }\n\n    /* Public API */\n    updateSize() {\n\n        const r = this.renderer;\n        const w = this.clientWidth;\n        const h = this.clientHeight;\n        const currsize = new THREE.Vector2();\n        r.getSize(currsize);\n\n        if (currsize.width !== w || currsize.height !== h) {\n\n            this.recenter();\n\n        }\n\n        r.setPixelRatio(window.devicePixelRatio);\n        r.setSize(w, h, false);\n\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n\n    }\n\n    redraw() {\n\n        this._dirty = true;\n    }\n\n    recenter() {\n\n        this._updateEnvironment();\n        this.redraw();\n\n    }\n\n    // Set the joint with jointName to\n    // angle in degrees\n    setAngle(jointName, angle) {\n\n        if (!this.robot) return;\n        if (!this.robot.joints[jointName]) return;\n\n        const origAngle = this.robot.joints[jointName].angle;\n        const newAngle = this.robot.setAngle(jointName, angle);\n        if (origAngle !== newAngle) {\n            this.redraw();\n        }\n\n        this.dispatchEvent(new CustomEvent('angle-change', { bubbles: true, cancelable: true, detail: jointName }));\n\n    }\n\n    setAngles(angles) {\n\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n    /* Private Functions */\n    // Updates the position of the plane to be at the\n    // lowest point below the robot and focuses the\n    // camera on the center of the scene\n    _updateEnvironment() {\n\n        if (!this.robot) return;\n\n        this.world.updateMatrixWorld();\n\n        const bbox = new THREE.Box3();\n        const temp = new THREE.Box3();\n\n        this.robot.traverse(c => {\n\n            const geometry = c.geometry;\n            if (geometry) {\n\n                if (geometry.boundingBox === null) {\n\n                    geometry.computeBoundingBox();\n\n                }\n\n                temp.copy(geometry.boundingBox);\n                temp.applyMatrix4(c.matrixWorld);\n\n                bbox.union(temp);\n\n            }\n\n        });\n\n        const center = bbox.getCenter(new THREE.Vector3());\n        this.controls.target.y = center.y;\n        this.plane.position.y = bbox.min.y - 1e-3;\n\n        const dirLight = this.directionalLight;\n        dirLight.castShadow = this.displayShadow;\n\n        if (this.displayShadow) {\n\n            // Update the shadow camera rendering bounds to encapsulate the\n            // model. We use the bounding sphere of the bounding box for\n            // simplicity -- this could be a tighter fit.\n            const sphere = bbox.getBoundingSphere(new THREE.Sphere());\n            const minmax = sphere.radius;\n            const cam = dirLight.shadow.camera;\n            cam.left = cam.bottom = -minmax;\n            cam.right = cam.top = minmax;\n\n            // Update the camera to focus on the center of the model so the\n            // shadow can encapsulate it\n            const offset = dirLight.position.clone().sub(dirLight.target.position);\n            dirLight.target.position.copy(center);\n            dirLight.position.copy(center).add(offset);\n\n            cam.updateProjectionMatrix();\n\n        }\n\n    }\n\n    _scheduleLoad() {\n\n        // if our current model is already what's being requested\n        // or has been loaded then early out\n        if (this._prevload === `${ this.package }|${ this.urdf }`) return;\n        this._prevload = `${ this.package }|${ this.urdf }`;\n\n        // if we're already waiting on a load then early out\n        if (this._loadScheduled) return;\n        this._loadScheduled = true;\n\n        if (this.robot) {\n\n            this.robot.traverse(c => c.dispose && c.dispose());\n            this.robot.parent.remove(this.robot);\n            this.robot = null;\n\n        }\n\n        requestAnimationFrame(() => {\n\n            this._loadUrdf(this.package, this.urdf);\n            this._loadScheduled = false;\n\n        });\n\n    }\n\n    // Watch the package and urdf field and load the robot model.\n    // This should _only_ be called from _scheduleLoad because that\n    // ensures the that current robot has been removed\n    _loadUrdf(pkg, urdf) {\n\n        this.dispatchEvent(new CustomEvent('urdf-change', { bubbles: true, cancelable: true, composed: true }));\n\n        if (urdf) {\n\n            // Keep track of this request and make\n            // sure it doesn't get overwritten by\n            // a subsequent one\n            this._requestId++;\n            const requestId = this._requestId;\n\n            const updateMaterials = mesh => {\n\n                mesh.traverse(c => {\n\n                    if (c.isMesh) {\n\n                        c.castShadow = true;\n                        c.receiveShadow = true;\n\n                        if (c.material) {\n\n                            const mats =\n                                (Array.isArray(c.material) ? c.material : [c.material])\n                                    .map(m => {\n\n                                        if (m instanceof THREE.MeshBasicMaterial) {\n\n                                            m = new THREE.MeshPhongMaterial();\n\n                                        }\n\n                                        if (m.map) {\n\n                                            m.map.encoding = THREE.GammaEncoding;\n\n                                        }\n\n                                        return m;\n\n                                    });\n                            c.material = mats.length === 1 ? mats[0] : mats;\n\n                        }\n\n                    }\n\n                });\n\n            };\n\n            if (pkg.includes(':') && (pkg.split(':')[1].substring(0, 2)) !== '//') {\n                // E.g. pkg = \"pkg_name: path/to/pkg_name, pk2: path2/to/pk2\"}\n\n                // Convert pkg(s) into a map. E.g.\n                // { \"pkg_name\": \"path/to/pkg_name\",\n                //   \"pk2\":      \"path2/to/pk2\"      }\n\n                pkg = pkg.split(',').reduce((map, value) => {\n\n                    const split = value.split(/:/).filter(x => !!x);\n                    const pkgName = split.shift().trim();\n                    const pkgPath = split.join(':').trim();\n                    map[pkgName] = pkgPath;\n\n                    return map;\n\n                }, {});\n            }\n\n            let robot = null;\n            const manager = new THREE.LoadingManager();\n            manager.onLoad = () => {\n\n                // If another request has come in to load a new\n                // robot, then ignore this one\n                if (this._requestId !== requestId) {\n\n                    robot.traverse(c => c.dispose && c.dispose());\n                    return;\n\n                }\n\n                this.robot = robot;\n                this.world.add(robot);\n                updateMaterials(robot);\n\n                this._setIgnoreLimits(this.ignoreLimits);\n\n                this.dispatchEvent(new CustomEvent('urdf-processed', { bubbles: true, cancelable: true, composed: true }));\n                this.dispatchEvent(new CustomEvent('geometry-loaded', { bubbles: true, cancelable: true, composed: true }));\n\n                this.recenter();\n\n            };\n\n            if (this.urlModifierFunc) {\n\n                manager.setURLModifier(this.urlModifierFunc);\n\n            }\n\n            new URDFLoader(manager).load(\n                urdf,\n\n                // onComplete\n                (model) => {\n                    robot = model;\n                },\n\n                // onProgress\n                (url, loaded, total) => {\n                    console.log(`${ url }; ${ loaded }/${ total }`);\n                },\n\n                // onError\n                (error) => {\n                    console.log(error);\n                },\n\n                // options\n                {\n\n                    packages: pkg,\n                    loadMeshCb: this.loadMeshFunc,\n                    fetchOptions: { mode: 'cors', credentials: 'same-origin' },\n\n                });\n\n        }\n\n    }\n\n    // Watch the coordinate frame and update the\n    // rotation of the scene to match\n    _setUp(up) {\n\n        if (!up) up = '+Z';\n        up = up.toUpperCase();\n        const sign = up.replace(/[^-+]/g, '')[0] || '+';\n        const axis = up.replace(/[^XYZ]/gi, '')[0] || 'Z';\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        if (axis === 'X') this.world.rotation.set(0, 0, sign === '+' ? HALFPI : -HALFPI);\n        if (axis === 'Z') this.world.rotation.set(sign === '+' ? -HALFPI : HALFPI, 0, 0);\n        if (axis === 'Y') this.world.rotation.set(sign === '+' ? 0 : PI, 0, 0);\n\n    }\n\n    // Updates the current robot's angles to ignore\n    // joint limits or not\n    _setIgnoreLimits(ignore, dispatch = false) {\n\n        if (this.robot) {\n\n            Object\n                .values(this.robot.joints)\n                .forEach(joint => {\n\n                    joint.ignoreLimits = ignore;\n                    joint.setAngle(joint.angle);\n\n                });\n\n        }\n\n        if (dispatch) {\n\n            this.dispatchEvent(new CustomEvent('ignore-limits-change', { bubbles: true, cancelable: true, composed: true }));\n\n        }\n\n    }\n\n};\n","import * as THREE from 'three';\nimport URDFViewer from './urdf-viewer-element.js';\n\n// urdf-manipulator element\n// Displays a URDF model that can be manipulated with the mouse\n\n// Events\n// joint-mouseover: Fired when a joint is hovered over\n// joint-mouseout: Fired when a joint is no longer hovered over\n// manipulate-start: Fires when a joint is manipulated\n// manipulate-end: Fires when a joint is done being manipulated\nexport default\nclass URDFManipulator extends URDFViewer {\n\n    static get observedAttributes() {\n\n        return ['highlight-color', ...super.observedAttributes];\n\n    }\n\n    get disableDragging() { return this.hasAttribute('disable-dragging'); }\n    set disableDragging(val) { val ? this.setAttribute('disable-dragging', !!val) : this.removeAttribute('disable-dragging'); }\n\n    get highlightColor() { return this.getAttribute('highlight-color') || '#FFFFFF'; }\n    set highlightColor(val) { val ? this.setAttribute('highlight-color', val) : this.removeAttribute('highlight-color'); }\n\n    constructor(...args) {\n\n        super(...args);\n\n        // The highlight material\n        this.highlightMaterial =\n            new THREE.MeshPhongMaterial({\n                shininess: 10,\n                color: this.highlightColor,\n                emissive: this.highlightColor,\n                emissiveIntensity: 0.25,\n            });\n\n        const el = this.renderer.domElement;\n\n        // Saved mouse data between frames and initial\n        // click point in space\n        const mouse = new THREE.Vector2();\n        const lastMouse = new THREE.Vector2();\n        const clickPoint = new THREE.Vector3();\n\n        // Reuseable variables\n        const raycaster = new THREE.Raycaster();\n        const delta = new THREE.Vector2();\n        const plane = new THREE.Plane();\n        const line = new THREE.Line3();\n\n        // The joint being manipulated\n        let dragging = null;\n\n        const toMouseCoord = (e, v) => {\n\n            v.x = ((e.pageX - el.offsetLeft) / el.offsetWidth) * 2 - 1;\n            v.y = -((e.pageY - el.offsetTop) / el.offsetHeight) * 2 + 1;\n\n        };\n\n        // Get which part of the robot is hit by the mouse click\n        const getCollisions = m => {\n\n            if (!this.robot) return [];\n\n            raycaster.setFromCamera(m, this.camera);\n\n            const meshes = [];\n            this.robot.traverse(c => c.type === 'Mesh' && meshes.push(c));\n\n            return raycaster.intersectObjects(meshes);\n\n        };\n\n        const isJoint = j => {\n\n            return j.isURDFJoint && j.jointType !== 'fixed';\n\n        };\n\n        // Find the nearest parent that is a joint\n        const findNearestJoint = m => {\n\n            let curr = m;\n            while (curr) {\n\n                if (isJoint(curr)) {\n\n                    break;\n\n                }\n\n                curr = curr.parent;\n\n            }\n\n            return curr;\n\n        };\n\n        // Highlight the link geometry under a joint\n        const highlightLinkGeometry = (m, revert) => {\n\n            const traverse = c => {\n\n                // Set or revert the highlight color\n                if (c.type === 'Mesh') {\n\n                    if (revert) {\n\n                        c.material = c.__origMaterial;\n                        delete c.__origMaterial;\n\n                    } else {\n\n                        c.__origMaterial = c.material;\n                        c.material = this.highlightMaterial;\n\n                    }\n\n                }\n\n                // Look into the children and stop if the next child is\n                // another joint\n                if (c === m || !isJoint(c)) {\n\n                    for (let i = 0; i < c.children.length; i++) {\n\n                        traverse(c.children[i]);\n\n                    }\n\n                }\n\n            };\n\n            traverse(m);\n\n        };\n\n        const temp = new THREE.Vector3();\n        const intersect1 = new THREE.Vector3();\n        const intersect2 = new THREE.Vector3();\n\n        // Get the changed angle between mouse position 1 and 2\n        // when manipulating target\n        const getAngle = (tg, m1, m2) => {\n\n            // TODO: Why is the constant negated?\n            plane.normal.copy(tg.axis).transformDirection(tg.matrixWorld).normalize();\n            plane.constant = -plane.normal.dot(clickPoint);\n\n            // If the camera is looking at the rotation axis at a skewed angle\n            temp.copy(this.camera.position).sub(clickPoint).normalize();\n            if (Math.abs(temp.dot(plane.normal)) < 0.2) {\n\n                // distance to the clicked point\n                const dist = temp.copy(clickPoint).sub(this.camera.position).length() * 0.9;\n\n                // Get the point closest to the original clicked point\n                // and use that as center of the rotation axis\n                temp.set(0, 0, 0).applyMatrix4(tg.matrixWorld);\n                temp.addScaledVector(plane.normal, -plane.distanceToPoint(temp));\n\n                // Project out from the camera\n                raycaster.setFromCamera(m1, this.camera);\n                intersect1.copy(raycaster.ray.origin).add(\n                    raycaster.ray.direction.normalize().multiplyScalar(dist)\n                );\n                intersect1.sub(temp);\n\n                raycaster.setFromCamera(m2, this.camera);\n                intersect2.copy(raycaster.ray.origin).add(\n                    raycaster.ray.direction.normalize().multiplyScalar(dist)\n                );\n                intersect2.sub(temp);\n\n                temp.crossVectors(intersect2, intersect1).normalize();\n\n                // Multiply by a magic number to make it feel good\n                return temp.dot(plane.normal) * intersect2.angleTo(intersect1) * 2;\n\n            } else {\n\n                // Get the point closest to the original clicked point\n                // and use that as center of the rotation axis\n                temp.set(0, 0, 0).applyMatrix4(tg.matrixWorld);\n                temp.addScaledVector(plane.normal, -plane.distanceToPoint(temp));\n\n                // project onto the plane of rotation\n                raycaster.setFromCamera(m1, this.camera);\n                line.start.copy(raycaster.ray.origin);\n                line.end.copy(raycaster.ray.origin).add(raycaster.ray.direction.normalize().multiplyScalar(1e5));\n                plane.intersectLine(line, intersect1);\n                intersect1.sub(temp);\n\n                raycaster.setFromCamera(m2, this.camera);\n                line.start.copy(raycaster.ray.origin);\n                line.end.copy(raycaster.ray.origin).add(raycaster.ray.direction.normalize().multiplyScalar(1e5));\n                plane.intersectLine(line, intersect2);\n                intersect2.sub(temp);\n\n                temp.crossVectors(intersect2, intersect1);\n\n                return Math.sign(temp.dot(plane.normal)) * intersect2.angleTo(intersect1);\n\n            }\n\n        };\n\n        // Get the amount to move the prismatic joint based on the mouse move\n        const getMove = (tg, m1, m2) => {\n\n            const dist = temp.copy(clickPoint).sub(this.camera.position).length();\n\n            raycaster.setFromCamera(m1, this.camera);\n            raycaster.ray.direction.normalize().multiplyScalar(dist);\n            intersect1.copy(raycaster.ray.origin).add(raycaster.ray.direction);\n\n            raycaster.setFromCamera(m2, this.camera);\n            raycaster.ray.direction.normalize().multiplyScalar(dist);\n            intersect2.copy(raycaster.ray.origin).add(raycaster.ray.direction);\n\n            temp.copy(intersect2).sub(intersect1);\n\n            plane.normal.copy(tg.axis).transformDirection(tg.parent.matrixWorld).normalize();\n\n            return temp.length() * -Math.sign(temp.dot(plane.normal));\n\n        };\n\n        el.addEventListener('mousedown', e => {\n\n            if (this.disableDragging) return;\n\n            toMouseCoord(e, mouse);\n            lastMouse.copy(mouse);\n\n            // get the information on the clicked item\n            // and set the dragged joint\n            const target = getCollisions(mouse).shift();\n            if (target) {\n\n                dragging = findNearestJoint(target.object);\n\n                if (dragging) {\n\n                    clickPoint.copy(target.point);\n                    this.dispatchEvent(new CustomEvent('manipulate-start', { bubbles: true, cancelable: true, detail: dragging.name }));\n                    this.controls.enabled = false;\n\n                }\n\n            }\n\n        }, true);\n\n        let hovered = null;\n        this._mouseMoveFunc = e => {\n\n            toMouseCoord(e, mouse);\n            delta.copy(mouse).sub(lastMouse);\n\n            // Keep track of the hovered item. If an item is being\n            // dragged, then it is considered hovered\n            const wasHovered = hovered;\n            if (hovered) {\n\n                hovered = null;\n            }\n\n            if (dragging == null && this.disableDragging === false) {\n\n                const collision = getCollisions(mouse).shift() || null;\n                const joint = collision && findNearestJoint(collision.object);\n                if (joint) {\n\n                    hovered = joint;\n\n                }\n\n            } else if (dragging) {\n\n                hovered = dragging;\n\n            }\n\n            // Highlight the meshes and broadcast events if the hovered item changed\n            if (hovered !== wasHovered) {\n\n                if (wasHovered) {\n\n                    highlightLinkGeometry(wasHovered, true);\n                    this.dispatchEvent(new CustomEvent('joint-mouseout', { bubbles: true, cancelable: true, detail: wasHovered.name }));\n\n                }\n\n                if (hovered) {\n\n                    highlightLinkGeometry(hovered, false);\n                    this.dispatchEvent(new CustomEvent('joint-mouseover', { bubbles: true, cancelable: true, detail: hovered.name }));\n\n                }\n\n                this.redraw();\n\n            }\n\n            // Apply the manipulation\n            if (dragging !== null) {\n\n                let delta = null;\n                if (dragging.jointType === 'revolute' || dragging.jointType === 'continuous') {\n\n                    delta = getAngle(dragging, mouse, lastMouse);\n\n                } else if (dragging.jointType === 'prismatic') {\n\n                    delta = getMove(dragging, mouse, lastMouse);\n\n                } else {\n\n                    // Not supported\n\n                }\n\n                if (delta) {\n\n                    this.setAngle(dragging.name, dragging.angle + delta);\n\n                }\n\n            }\n\n            lastMouse.copy(mouse);\n\n        };\n\n        // Clean up\n        this._mouseUpFunc = e => {\n\n            if (dragging) {\n\n                this.dispatchEvent(new CustomEvent('manipulate-end', { bubbles: true, cancelable: true, detail: dragging.name }));\n                dragging = null;\n                this.controls.enabled = true;\n\n            }\n\n        };\n\n    }\n\n    connectedCallback() {\n\n        super.connectedCallback();\n        window.addEventListener('mousemove', this._mouseMoveFunc, true);\n        window.addEventListener('mouseup', this._mouseUpFunc, true);\n\n    }\n\n    disconnectedCallback() {\n\n        super.disconnectedCallback();\n        window.removeEventListener('mousemove', this._mouseMoveFunc, true);\n        window.removeEventListener('mouseup', this._mouseUpFunc, true);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        super.attributeChangedCallback(attr, oldval, newval);\n\n        switch (attr) {\n\n            case 'highlight-color':\n                this.highlightMaterial.color.set(this.highlightColor);\n                this.highlightMaterial.emissive.set(this.highlightColor);\n                break;\n\n        }\n\n    }\n\n};\n"],"names":["URDFColliderClone","_proto$clone","proto","Object","getPrototypeOf","_len","arguments","length","args","Array","_key","result","clone","call","apply","concat","isURDFCollider","makeURDFCollider","object","URDFLink","_Object3D","_this","_classCallCheck","_len2","_key2","_callSuper","isURDFLink","type","urdfNode","_inherits","_createClass","key","value","show","visible","hide","_delete","_this2","parent","remove","children","map","child","copy","source","recursive","_get","_getPrototypeOf","prototype","Object3D","URDFJoint","_Object3D2","_this3","_len3","_key3","isURDFJoint","jointValue","jointType","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","get","_jointType","set","v","fill","isArray","_toConsumableArray","setAngle","setOffset","_len4","values","_key4","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","_URDFLink","_this4","_len5","_key5","isURDFRobot","urdfRobotNode","robotName","links","joints","_this5","traverse","c","name","jointName","joint","_len6","_key6","setAngles","angles","tempQuaternion","THREE","tempEuler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","undefined","rotation","setFromEuler","multiply","URDFLoader","manager","allowMeshBVH","retryMap","load","urdf","onComplete","onProgress","onError","options","workingPath","extractUrlBase","urdfPath","resolveURL","errors","managerOnErrorDefault","managerOnProgressDefault","managerOnLoadDefault","model","bind","onLoad","that","url","retry","itemsLoaded","itemsTotal","partialErrors","keys","assign","itemStart","fetch","fetchOptions","then","res","text","data","parse","window","itemEnd","e","error","itemError","content","packages","loadMeshCb","defaultMeshLoader","parseVisual","parseCollision","linkMap","jointMap","materialMap","resolvePath","path","test","_path$replace$split","replace","_path$replace$split2","_slicedToArray","targetPkg","relPath","endsWith","_typeof","processUrdf","parser","DOMParser","parseFromString","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","forEach","m","processMaterial","l","isRoot","querySelector","processLink","j","processJoint","xyz","n","add","jointAxesHelper","AxesHelper","axisNode","axisXYZ","normalize","link","target","visualNodes","vn","processLinkElement","collisionNodes","linkAxesHelper","node","matNodes","material","rgba","color","setRGB","opacity","transparent","loader","filename","filePath","linkObj","_this6","isCollisionNode","scale","primitiveModel","materialNode","geoType","scaleAttr","cb","err","raycast","acceleratedRaycast","geometry","boundsTree","MeshBVH","x","y","z","size","radius","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene","urdfString","urdfDom","loadFromString","urdfDOM","updateProperties","params","origin","_this$origin","euler","_construct","_this$axis","updateTransform","_this$position","toArray","updateMatrix","updateMatrixWorld","refreshScene","viewer","updateScene","updateJoint","_joint$axis","computeBoundingSphere","computeVertexNormals","render","applyUpdates","renderer","camera","requestAnimationFrame","URDFViewer","_HTMLElement","_requestId","_dirty","_loadScheduled","loadMeshFunc","urlModifierFunc","ambientLight","ambientColor","groundColor","lerp","intensity","dirLight","shadow","mapSize","width","height","castShadow","antialias","alpha","setClearColor","setClearAlpha","shadowMap","enabled","gammaOutput","world","plane","side","receiveShadow","controls","OrbitControls","domElement","rotateSpeed","zoomSpeed","panSpeed","enableZoom","enableDamping","maxDistance","minDistance","addEventListener","recenter","directionalLight","_setUp","up","_renderLoop","parentNode","updateSize","autoRedraw","noAutoRecenter","_updateEnvironment","update","_renderLoopId","setAttribute","hasAttribute","removeAttribute","_setAngles","connectedCallback","constructor","_styletag","styletag","document","createElement","innerHTML","tagName","head","appendChild","childElementCount","disconnectedCallback","cancelAnimationFrame","attributeChangedCallback","attr","oldval","newval","_scheduleLoad","_setIgnoreLimits","r","w","clientWidth","h","clientHeight","currsize","getSize","setPixelRatio","devicePixelRatio","setSize","aspect","updateProjectionMatrix","redraw","origAngle","newAngle","dispatchEvent","CustomEvent","bubbles","cancelable","detail","bbox","temp","boundingBox","computeBoundingBox","applyMatrix4","matrixWorld","union","center","getCenter","displayShadow","sphere","getBoundingSphere","minmax","cam","left","bottom","right","top","offset","sub","_prevload","dispose","_loadUrdf","pkg","composed","requestId","updateMaterials","isMesh","mats","encoding","includes","substring","reduce","pkgName","shift","pkgPath","join","setURLModifier","loaded","total","log","mode","credentials","toUpperCase","sign","HALFPI","ignore","dispatch","_wrapNativeSuper","HTMLElement","URDFManipulator","_URDFViewer","highlightMaterial","shininess","highlightColor","emissive","emissiveIntensity","el","mouse","lastMouse","clickPoint","raycaster","line","dragging","toMouseCoord","pageX","offsetLeft","offsetWidth","pageY","offsetTop","offsetHeight","getCollisions","setFromCamera","meshes","push","intersectObjects","isJoint","findNearestJoint","curr","highlightLinkGeometry","revert","__origMaterial","i","intersect1","intersect2","getAngle","tg","m1","m2","normal","transformDirection","constant","dot","abs","dist","distanceToPoint","ray","direction","multiplyScalar","crossVectors","angleTo","start","end","intersectLine","getMove","disableDragging","point","hovered","_mouseMoveFunc","wasHovered","collision","_mouseUpFunc","removeEventListener"],"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"}